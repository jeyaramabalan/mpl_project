
--- File: mpl-backend\.env ---


# --- Database Configuration ---
# Replace with your actual MySQL connection details
DB_HOST=localhost
DB_USER=supersa2_mpl_dbadmin
DB_PASSWORD=Mpl@2025
DB_NAME=supersa2_mpl_db

# --- Server Configuration ---
PORT=5000

# --- Security ---
# IMPORTANT: Generate a strong, unique secret key for JWT!
# Example command (run in terminal): node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=Mpl@2025

# --- Frontend URL ---
# The URL where your React frontend is running (used for CORS and Socket.IO)
FRONTEND_URL=http://localhost:5173

# --- Node Environment ---
# Set to 'production' when deploying
# NODE_ENV=development




--- File: mpl-backend\package-lock.json ---


{
    "name": "mpl-backend",
    "version": "1.0.0",
    "lockfileVersion": 3,
    "requires": true,
    "packages": {
        "": {
            "name": "mpl-backend",
            "version": "1.0.0",
            "dependencies": {
                "bcrypt": "^5.1.0",
                "cors": "^2.8.5",
                "dotenv": "^16.3.1",
                "express": "^4.21.2",
                "jsonwebtoken": "^9.0.1",
                "mysql2": "^3.6.0",
                "socket.io": "^4.7.1"
            },
            "devDependencies": {
                "nodemon": "^3.0.1"
            },
            "engines": {
                "node": ">=16.0.0"
            }
        },
        "node_modules/@mapbox/node-pre-gyp": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/@mapbox/node-pre-gyp/-/node-pre-gyp-1.0.11.tgz",
            "integrity": "sha512-Yhlar6v9WQgUp/He7BdgzOz8lqMQ8sU+jkCq7Wx8Myc5YFJLbEe7lgui/V7G1qB1DJykHSGwreceSaD60Y0PUQ==",
            "license": "BSD-3-Clause",
            "dependencies": {
                "detect-libc": "^2.0.0",
                "https-proxy-agent": "^5.0.0",
                "make-dir": "^3.1.0",
                "node-fetch": "^2.6.7",
                "nopt": "^5.0.0",
                "npmlog": "^5.0.1",
                "rimraf": "^3.0.2",
                "semver": "^7.3.5",
                "tar": "^6.1.11"
            },
            "bin": {
                "node-pre-gyp": "bin/node-pre-gyp"
            }
        },
        "node_modules/@socket.io/component-emitter": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
            "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
            "license": "MIT"
        },
        "node_modules/@types/cors": {
            "version": "2.8.17",
            "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
            "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
            "license": "MIT",
            "dependencies": {
                "@types/node": "*"
            }
        },
        "node_modules/@types/node": {
            "version": "22.14.1",
            "resolved": "https://registry.npmjs.org/@types/node/-/node-22.14.1.tgz",
            "integrity": "sha512-u0HuPQwe/dHrItgHHpmw3N2fYCR6x4ivMNbPHRkBVP4CvN+kiRrKHWk3i8tXiO/joPwXLMYvF9TTF0eqgHIuOw==",
            "license": "MIT",
            "dependencies": {
                "undici-types": "~6.21.0"
            }
        },
        "node_modules/abbrev": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
            "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
            "license": "ISC"
        },
        "node_modules/accepts": {
            "version": "1.3.8",
            "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
            "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
            "license": "MIT",
            "dependencies": {
                "mime-types": "~2.1.34",
                "negotiator": "0.6.3"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/agent-base": {
            "version": "6.0.2",
            "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
            "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
            "license": "MIT",
            "dependencies": {
                "debug": "4"
            },
            "engines": {
                "node": ">= 6.0.0"
            }
        },
        "node_modules/agent-base/node_modules/debug": {
            "version": "4.4.0",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
            "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/agent-base/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/ansi-regex": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
            "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/anymatch": {
            "version": "3.1.3",
            "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
            "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "normalize-path": "^3.0.0",
                "picomatch": "^2.0.4"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/aproba": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.0.0.tgz",
            "integrity": "sha512-lYe4Gx7QT+MKGbDsA+Z+he/Wtef0BiwDOlK/XkBrdfsh9J/jPPXbX0tE9x9cl27Tmu5gg3QUbUrQYa/y+KOHPQ==",
            "license": "ISC"
        },
        "node_modules/are-we-there-yet": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-2.0.0.tgz",
            "integrity": "sha512-Ci/qENmwHnsYo9xKIcUJN5LeDKdJ6R1Z1j9V/J5wyq8nh/mYPEpIKJbBZXtZjG04HiK7zV/p6Vs9952MrMeUIw==",
            "deprecated": "This package is no longer supported.",
            "license": "ISC",
            "dependencies": {
                "delegates": "^1.0.0",
                "readable-stream": "^3.6.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/array-flatten": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
            "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
            "license": "MIT"
        },
        "node_modules/aws-ssl-profiles": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/aws-ssl-profiles/-/aws-ssl-profiles-1.1.2.tgz",
            "integrity": "sha512-NZKeq9AfyQvEeNlN0zSYAaWrmBffJh3IELMZfRpJVWgrpEbtEpnjvzqBPf+mxoI287JohRDoa+/nsfqqiZmF6g==",
            "license": "MIT",
            "engines": {
                "node": ">= 6.0.0"
            }
        },
        "node_modules/balanced-match": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
            "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
            "license": "MIT"
        },
        "node_modules/base64id": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
            "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
            "license": "MIT",
            "engines": {
                "node": "^4.5.0 || >= 5.9"
            }
        },
        "node_modules/bcrypt": {
            "version": "5.1.1",
            "resolved": "https://registry.npmjs.org/bcrypt/-/bcrypt-5.1.1.tgz",
            "integrity": "sha512-AGBHOG5hPYZ5Xl9KXzU5iKq9516yEmvCKDg3ecP5kX2aB6UqTeXZxk2ELnDgDm6BQSMlLt9rDB4LoSMx0rYwww==",
            "hasInstallScript": true,
            "license": "MIT",
            "dependencies": {
                "@mapbox/node-pre-gyp": "^1.0.11",
                "node-addon-api": "^5.0.0"
            },
            "engines": {
                "node": ">= 10.0.0"
            }
        },
        "node_modules/binary-extensions": {
            "version": "2.3.0",
            "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
            "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/body-parser": {
            "version": "1.20.3",
            "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
            "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
            "license": "MIT",
            "dependencies": {
                "bytes": "3.1.2",
                "content-type": "~1.0.5",
                "debug": "2.6.9",
                "depd": "2.0.0",
                "destroy": "1.2.0",
                "http-errors": "2.0.0",
                "iconv-lite": "0.4.24",
                "on-finished": "2.4.1",
                "qs": "6.13.0",
                "raw-body": "2.5.2",
                "type-is": "~1.6.18",
                "unpipe": "1.0.0"
            },
            "engines": {
                "node": ">= 0.8",
                "npm": "1.2.8000 || >= 1.4.16"
            }
        },
        "node_modules/brace-expansion": {
            "version": "1.1.11",
            "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
            "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
            "license": "MIT",
            "dependencies": {
                "balanced-match": "^1.0.0",
                "concat-map": "0.0.1"
            }
        },
        "node_modules/braces": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
            "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "fill-range": "^7.1.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/buffer-equal-constant-time": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
            "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
            "license": "BSD-3-Clause"
        },
        "node_modules/bytes": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
            "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/call-bind-apply-helpers": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
            "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0",
                "function-bind": "^1.1.2"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/call-bound": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
            "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
            "license": "MIT",
            "dependencies": {
                "call-bind-apply-helpers": "^1.0.2",
                "get-intrinsic": "^1.3.0"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/chokidar": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
            "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "anymatch": "~3.1.2",
                "braces": "~3.0.2",
                "glob-parent": "~5.1.2",
                "is-binary-path": "~2.1.0",
                "is-glob": "~4.0.1",
                "normalize-path": "~3.0.0",
                "readdirp": "~3.6.0"
            },
            "engines": {
                "node": ">= 8.10.0"
            },
            "funding": {
                "url": "https://paulmillr.com/funding/"
            },
            "optionalDependencies": {
                "fsevents": "~2.3.2"
            }
        },
        "node_modules/chownr": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
            "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
            "license": "ISC",
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/color-support": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
            "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
            "license": "ISC",
            "bin": {
                "color-support": "bin.js"
            }
        },
        "node_modules/concat-map": {
            "version": "0.0.1",
            "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
            "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
            "license": "MIT"
        },
        "node_modules/console-control-strings": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
            "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
            "license": "ISC"
        },
        "node_modules/content-disposition": {
            "version": "0.5.4",
            "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
            "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
            "license": "MIT",
            "dependencies": {
                "safe-buffer": "5.2.1"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/content-type": {
            "version": "1.0.5",
            "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
            "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/cookie": {
            "version": "0.7.1",
            "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
            "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/cookie-signature": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
            "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
            "license": "MIT"
        },
        "node_modules/cors": {
            "version": "2.8.5",
            "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
            "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
            "license": "MIT",
            "dependencies": {
                "object-assign": "^4",
                "vary": "^1"
            },
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/debug": {
            "version": "2.6.9",
            "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
            "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
            "license": "MIT",
            "dependencies": {
                "ms": "2.0.0"
            }
        },
        "node_modules/delegates": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
            "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
            "license": "MIT"
        },
        "node_modules/denque": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/denque/-/denque-2.1.0.tgz",
            "integrity": "sha512-HVQE3AAb/pxF8fQAoiqpvg9i3evqug3hoiwakOyZAwJm+6vZehbkYXZ0l4JxS+I3QxM97v5aaRNhj8v5oBhekw==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=0.10"
            }
        },
        "node_modules/depd": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
            "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/destroy": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
            "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8",
                "npm": "1.2.8000 || >= 1.4.16"
            }
        },
        "node_modules/detect-libc": {
            "version": "2.0.3",
            "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.3.tgz",
            "integrity": "sha512-bwy0MGW55bG41VqxxypOsdSdGqLwXPI/focwgTYCFMbdUiBAxLg9CFzG08sz2aqzknwiX7Hkl0bQENjg8iLByw==",
            "license": "Apache-2.0",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/dotenv": {
            "version": "16.5.0",
            "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
            "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
            "license": "BSD-2-Clause",
            "engines": {
                "node": ">=12"
            },
            "funding": {
                "url": "https://dotenvx.com"
            }
        },
        "node_modules/dunder-proto": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
            "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
            "license": "MIT",
            "dependencies": {
                "call-bind-apply-helpers": "^1.0.1",
                "es-errors": "^1.3.0",
                "gopd": "^1.2.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/ecdsa-sig-formatter": {
            "version": "1.0.11",
            "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
            "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
            "license": "Apache-2.0",
            "dependencies": {
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/ee-first": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
            "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
            "license": "MIT"
        },
        "node_modules/emoji-regex": {
            "version": "8.0.0",
            "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
            "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
            "license": "MIT"
        },
        "node_modules/encodeurl": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
            "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/engine.io": {
            "version": "6.6.4",
            "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.6.4.tgz",
            "integrity": "sha512-ZCkIjSYNDyGn0R6ewHDtXgns/Zre/NT6Agvq1/WobF7JXgFff4SeDroKiCO3fNJreU9YG429Sc81o4w5ok/W5g==",
            "license": "MIT",
            "dependencies": {
                "@types/cors": "^2.8.12",
                "@types/node": ">=10.0.0",
                "accepts": "~1.3.4",
                "base64id": "2.0.0",
                "cookie": "~0.7.2",
                "cors": "~2.8.5",
                "debug": "~4.3.1",
                "engine.io-parser": "~5.2.1",
                "ws": "~8.17.1"
            },
            "engines": {
                "node": ">=10.2.0"
            }
        },
        "node_modules/engine.io-parser": {
            "version": "5.2.3",
            "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
            "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
            "license": "MIT",
            "engines": {
                "node": ">=10.0.0"
            }
        },
        "node_modules/engine.io/node_modules/cookie": {
            "version": "0.7.2",
            "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
            "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/engine.io/node_modules/debug": {
            "version": "4.3.7",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
            "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/engine.io/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/es-define-property": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
            "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/es-errors": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
            "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/es-object-atoms": {
            "version": "1.1.1",
            "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
            "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/escape-html": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
            "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
            "license": "MIT"
        },
        "node_modules/etag": {
            "version": "1.8.1",
            "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
            "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/express": {
            "version": "4.21.2",
            "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
            "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
            "license": "MIT",
            "dependencies": {
                "accepts": "~1.3.8",
                "array-flatten": "1.1.1",
                "body-parser": "1.20.3",
                "content-disposition": "0.5.4",
                "content-type": "~1.0.4",
                "cookie": "0.7.1",
                "cookie-signature": "1.0.6",
                "debug": "2.6.9",
                "depd": "2.0.0",
                "encodeurl": "~2.0.0",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "finalhandler": "1.3.1",
                "fresh": "0.5.2",
                "http-errors": "2.0.0",
                "merge-descriptors": "1.0.3",
                "methods": "~1.1.2",
                "on-finished": "2.4.1",
                "parseurl": "~1.3.3",
                "path-to-regexp": "0.1.12",
                "proxy-addr": "~2.0.7",
                "qs": "6.13.0",
                "range-parser": "~1.2.1",
                "safe-buffer": "5.2.1",
                "send": "0.19.0",
                "serve-static": "1.16.2",
                "setprototypeof": "1.2.0",
                "statuses": "2.0.1",
                "type-is": "~1.6.18",
                "utils-merge": "1.0.1",
                "vary": "~1.1.2"
            },
            "engines": {
                "node": ">= 0.10.0"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/express"
            }
        },
        "node_modules/fill-range": {
            "version": "7.1.1",
            "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
            "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "to-regex-range": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/finalhandler": {
            "version": "1.3.1",
            "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
            "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
            "license": "MIT",
            "dependencies": {
                "debug": "2.6.9",
                "encodeurl": "~2.0.0",
                "escape-html": "~1.0.3",
                "on-finished": "2.4.1",
                "parseurl": "~1.3.3",
                "statuses": "2.0.1",
                "unpipe": "~1.0.0"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/forwarded": {
            "version": "0.2.0",
            "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
            "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/fresh": {
            "version": "0.5.2",
            "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
            "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/fs-minipass": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
            "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
            "license": "ISC",
            "dependencies": {
                "minipass": "^3.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/fs-minipass/node_modules/minipass": {
            "version": "3.3.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
            "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
            "license": "ISC",
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/fs.realpath": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
            "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
            "license": "ISC"
        },
        "node_modules/fsevents": {
            "version": "2.3.3",
            "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
            "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
            "dev": true,
            "hasInstallScript": true,
            "license": "MIT",
            "optional": true,
            "os": [
                "darwin"
            ],
            "engines": {
                "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
            }
        },
        "node_modules/function-bind": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
            "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
            "license": "MIT",
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/gauge": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/gauge/-/gauge-3.0.2.tgz",
            "integrity": "sha512-+5J6MS/5XksCuXq++uFRsnUd7Ovu1XenbeuIuNRJxYWjgQbPuFhT14lAvsWfqfAmnwluf1OwMjz39HjfLPci0Q==",
            "deprecated": "This package is no longer supported.",
            "license": "ISC",
            "dependencies": {
                "aproba": "^1.0.3 || ^2.0.0",
                "color-support": "^1.1.2",
                "console-control-strings": "^1.0.0",
                "has-unicode": "^2.0.1",
                "object-assign": "^4.1.1",
                "signal-exit": "^3.0.0",
                "string-width": "^4.2.3",
                "strip-ansi": "^6.0.1",
                "wide-align": "^1.1.2"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/generate-function": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/generate-function/-/generate-function-2.3.1.tgz",
            "integrity": "sha512-eeB5GfMNeevm/GRYq20ShmsaGcmI81kIX2K9XQx5miC8KdHaC6Jm0qQ8ZNeGOi7wYB8OsdxKs+Y2oVuTFuVwKQ==",
            "license": "MIT",
            "dependencies": {
                "is-property": "^1.0.2"
            }
        },
        "node_modules/get-intrinsic": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
            "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
            "license": "MIT",
            "dependencies": {
                "call-bind-apply-helpers": "^1.0.2",
                "es-define-property": "^1.0.1",
                "es-errors": "^1.3.0",
                "es-object-atoms": "^1.1.1",
                "function-bind": "^1.1.2",
                "get-proto": "^1.0.1",
                "gopd": "^1.2.0",
                "has-symbols": "^1.1.0",
                "hasown": "^2.0.2",
                "math-intrinsics": "^1.1.0"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/get-proto": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
            "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
            "license": "MIT",
            "dependencies": {
                "dunder-proto": "^1.0.1",
                "es-object-atoms": "^1.0.0"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/glob": {
            "version": "7.2.3",
            "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
            "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
            "deprecated": "Glob versions prior to v9 are no longer supported",
            "license": "ISC",
            "dependencies": {
                "fs.realpath": "^1.0.0",
                "inflight": "^1.0.4",
                "inherits": "2",
                "minimatch": "^3.1.1",
                "once": "^1.3.0",
                "path-is-absolute": "^1.0.0"
            },
            "engines": {
                "node": "*"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/glob-parent": {
            "version": "5.1.2",
            "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
            "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
            "dev": true,
            "license": "ISC",
            "dependencies": {
                "is-glob": "^4.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/gopd": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
            "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/has-flag": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
            "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/has-symbols": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
            "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/has-unicode": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
            "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
            "license": "ISC"
        },
        "node_modules/hasown": {
            "version": "2.0.2",
            "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
            "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
            "license": "MIT",
            "dependencies": {
                "function-bind": "^1.1.2"
            },
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/http-errors": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
            "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
            "license": "MIT",
            "dependencies": {
                "depd": "2.0.0",
                "inherits": "2.0.4",
                "setprototypeof": "1.2.0",
                "statuses": "2.0.1",
                "toidentifier": "1.0.1"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/https-proxy-agent": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
            "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
            "license": "MIT",
            "dependencies": {
                "agent-base": "6",
                "debug": "4"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/https-proxy-agent/node_modules/debug": {
            "version": "4.4.0",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
            "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/https-proxy-agent/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/iconv-lite": {
            "version": "0.4.24",
            "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
            "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
            "license": "MIT",
            "dependencies": {
                "safer-buffer": ">= 2.1.2 < 3"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/ignore-by-default": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
            "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
            "dev": true,
            "license": "ISC"
        },
        "node_modules/inflight": {
            "version": "1.0.6",
            "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
            "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
            "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
            "license": "ISC",
            "dependencies": {
                "once": "^1.3.0",
                "wrappy": "1"
            }
        },
        "node_modules/inherits": {
            "version": "2.0.4",
            "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
            "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
            "license": "ISC"
        },
        "node_modules/ipaddr.js": {
            "version": "1.9.1",
            "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
            "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/is-binary-path": {
            "version": "2.1.0",
            "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
            "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "binary-extensions": "^2.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-extglob": {
            "version": "2.1.1",
            "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
            "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-fullwidth-code-point": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
            "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
            "license": "MIT",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/is-glob": {
            "version": "4.0.3",
            "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
            "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "is-extglob": "^2.1.1"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/is-number": {
            "version": "7.0.0",
            "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
            "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.12.0"
            }
        },
        "node_modules/is-property": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/is-property/-/is-property-1.0.2.tgz",
            "integrity": "sha512-Ks/IoX00TtClbGQr4TWXemAnktAQvYB7HzcCxDGqEZU6oCmb2INHuOoKxbtR+HFkmYWBKv/dOZtGRiAjDhj92g==",
            "license": "MIT"
        },
        "node_modules/jsonwebtoken": {
            "version": "9.0.2",
            "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
            "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
            "license": "MIT",
            "dependencies": {
                "jws": "^3.2.2",
                "lodash.includes": "^4.3.0",
                "lodash.isboolean": "^3.0.3",
                "lodash.isinteger": "^4.0.4",
                "lodash.isnumber": "^3.0.3",
                "lodash.isplainobject": "^4.0.6",
                "lodash.isstring": "^4.0.1",
                "lodash.once": "^4.0.0",
                "ms": "^2.1.1",
                "semver": "^7.5.4"
            },
            "engines": {
                "node": ">=12",
                "npm": ">=6"
            }
        },
        "node_modules/jsonwebtoken/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/jwa": {
            "version": "1.4.1",
            "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
            "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
            "license": "MIT",
            "dependencies": {
                "buffer-equal-constant-time": "1.0.1",
                "ecdsa-sig-formatter": "1.0.11",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/jws": {
            "version": "3.2.2",
            "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
            "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
            "license": "MIT",
            "dependencies": {
                "jwa": "^1.4.1",
                "safe-buffer": "^5.0.1"
            }
        },
        "node_modules/lodash.includes": {
            "version": "4.3.0",
            "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
            "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
            "license": "MIT"
        },
        "node_modules/lodash.isboolean": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
            "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
            "license": "MIT"
        },
        "node_modules/lodash.isinteger": {
            "version": "4.0.4",
            "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
            "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
            "license": "MIT"
        },
        "node_modules/lodash.isnumber": {
            "version": "3.0.3",
            "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
            "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
            "license": "MIT"
        },
        "node_modules/lodash.isplainobject": {
            "version": "4.0.6",
            "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
            "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
            "license": "MIT"
        },
        "node_modules/lodash.isstring": {
            "version": "4.0.1",
            "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
            "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
            "license": "MIT"
        },
        "node_modules/lodash.once": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
            "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
            "license": "MIT"
        },
        "node_modules/long": {
            "version": "5.3.1",
            "resolved": "https://registry.npmjs.org/long/-/long-5.3.1.tgz",
            "integrity": "sha512-ka87Jz3gcx/I7Hal94xaN2tZEOPoUOEVftkQqZx2EeQRN7LGdfLlI3FvZ+7WDplm+vK2Urx9ULrvSowtdCieng==",
            "license": "Apache-2.0"
        },
        "node_modules/lru-cache": {
            "version": "7.18.3",
            "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
            "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
            "license": "ISC",
            "engines": {
                "node": ">=12"
            }
        },
        "node_modules/lru.min": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/lru.min/-/lru.min-1.1.2.tgz",
            "integrity": "sha512-Nv9KddBcQSlQopmBHXSsZVY5xsdlZkdH/Iey0BlcBYggMd4two7cZnKOK9vmy3nY0O5RGH99z1PCeTpPqszUYg==",
            "license": "MIT",
            "engines": {
                "bun": ">=1.0.0",
                "deno": ">=1.30.0",
                "node": ">=8.0.0"
            },
            "funding": {
                "type": "github",
                "url": "https://github.com/sponsors/wellwelwel"
            }
        },
        "node_modules/make-dir": {
            "version": "3.1.0",
            "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
            "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
            "license": "MIT",
            "dependencies": {
                "semver": "^6.0.0"
            },
            "engines": {
                "node": ">=8"
            },
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/make-dir/node_modules/semver": {
            "version": "6.3.1",
            "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
            "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
            "license": "ISC",
            "bin": {
                "semver": "bin/semver.js"
            }
        },
        "node_modules/math-intrinsics": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
            "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            }
        },
        "node_modules/media-typer": {
            "version": "0.3.0",
            "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
            "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/merge-descriptors": {
            "version": "1.0.3",
            "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
            "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
            "license": "MIT",
            "funding": {
                "url": "https://github.com/sponsors/sindresorhus"
            }
        },
        "node_modules/methods": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
            "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/mime": {
            "version": "1.6.0",
            "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
            "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
            "license": "MIT",
            "bin": {
                "mime": "cli.js"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/mime-db": {
            "version": "1.52.0",
            "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
            "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/mime-types": {
            "version": "2.1.35",
            "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
            "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
            "license": "MIT",
            "dependencies": {
                "mime-db": "1.52.0"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/minimatch": {
            "version": "3.1.2",
            "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
            "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
            "license": "ISC",
            "dependencies": {
                "brace-expansion": "^1.1.7"
            },
            "engines": {
                "node": "*"
            }
        },
        "node_modules/minipass": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
            "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
            "license": "ISC",
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/minizlib": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
            "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
            "license": "MIT",
            "dependencies": {
                "minipass": "^3.0.0",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">= 8"
            }
        },
        "node_modules/minizlib/node_modules/minipass": {
            "version": "3.3.6",
            "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
            "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
            "license": "ISC",
            "dependencies": {
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/mkdirp": {
            "version": "1.0.4",
            "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
            "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
            "license": "MIT",
            "bin": {
                "mkdirp": "bin/cmd.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/ms": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
            "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
            "license": "MIT"
        },
        "node_modules/mysql2": {
            "version": "3.14.0",
            "resolved": "https://registry.npmjs.org/mysql2/-/mysql2-3.14.0.tgz",
            "integrity": "sha512-8eMhmG6gt/hRkU1G+8KlGOdQi2w+CgtNoD1ksXZq9gQfkfDsX4LHaBwTe1SY0Imx//t2iZA03DFnyYKPinxSRw==",
            "license": "MIT",
            "dependencies": {
                "aws-ssl-profiles": "^1.1.1",
                "denque": "^2.1.0",
                "generate-function": "^2.3.1",
                "iconv-lite": "^0.6.3",
                "long": "^5.2.1",
                "lru.min": "^1.0.0",
                "named-placeholders": "^1.1.3",
                "seq-queue": "^0.0.5",
                "sqlstring": "^2.3.2"
            },
            "engines": {
                "node": ">= 8.0"
            }
        },
        "node_modules/mysql2/node_modules/iconv-lite": {
            "version": "0.6.3",
            "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
            "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
            "license": "MIT",
            "dependencies": {
                "safer-buffer": ">= 2.1.2 < 3.0.0"
            },
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/named-placeholders": {
            "version": "1.1.3",
            "resolved": "https://registry.npmjs.org/named-placeholders/-/named-placeholders-1.1.3.tgz",
            "integrity": "sha512-eLoBxg6wE/rZkJPhU/xRX1WTpkFEwDJEN96oxFrTsqBdbT5ec295Q+CoHrL9IT0DipqKhmGcaZmwOt8OON5x1w==",
            "license": "MIT",
            "dependencies": {
                "lru-cache": "^7.14.1"
            },
            "engines": {
                "node": ">=12.0.0"
            }
        },
        "node_modules/negotiator": {
            "version": "0.6.3",
            "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
            "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/node-addon-api": {
            "version": "5.1.0",
            "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-5.1.0.tgz",
            "integrity": "sha512-eh0GgfEkpnoWDq+VY8OyvYhFEzBk6jIYbRKdIlyTiAXIVJ8PyBaKb0rp7oDtoddbdoHWhq8wwr+XZ81F1rpNdA==",
            "license": "MIT"
        },
        "node_modules/node-fetch": {
            "version": "2.7.0",
            "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
            "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
            "license": "MIT",
            "dependencies": {
                "whatwg-url": "^5.0.0"
            },
            "engines": {
                "node": "4.x || >=6.0.0"
            },
            "peerDependencies": {
                "encoding": "^0.1.0"
            },
            "peerDependenciesMeta": {
                "encoding": {
                    "optional": true
                }
            }
        },
        "node_modules/nodemon": {
            "version": "3.1.9",
            "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.9.tgz",
            "integrity": "sha512-hdr1oIb2p6ZSxu3PB2JWWYS7ZQ0qvaZsc3hK8DR8f02kRzc8rjYmxAIvdz+aYC+8F2IjNaB7HMcSDg8nQpJxyg==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "chokidar": "^3.5.2",
                "debug": "^4",
                "ignore-by-default": "^1.0.1",
                "minimatch": "^3.1.2",
                "pstree.remy": "^1.1.8",
                "semver": "^7.5.3",
                "simple-update-notifier": "^2.0.0",
                "supports-color": "^5.5.0",
                "touch": "^3.1.0",
                "undefsafe": "^2.0.5"
            },
            "bin": {
                "nodemon": "bin/nodemon.js"
            },
            "engines": {
                "node": ">=10"
            },
            "funding": {
                "type": "opencollective",
                "url": "https://opencollective.com/nodemon"
            }
        },
        "node_modules/nodemon/node_modules/debug": {
            "version": "4.4.0",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
            "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/nodemon/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/nopt": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
            "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
            "license": "ISC",
            "dependencies": {
                "abbrev": "1"
            },
            "bin": {
                "nopt": "bin/nopt.js"
            },
            "engines": {
                "node": ">=6"
            }
        },
        "node_modules/normalize-path": {
            "version": "3.0.0",
            "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
            "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/npmlog": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-5.0.1.tgz",
            "integrity": "sha512-AqZtDUWOMKs1G/8lwylVjrdYgqA4d9nu8hc+0gzRxlDb1I10+FHBGMXs6aiQHFdCUUlqH99MUMuLfzWDNDtfxw==",
            "deprecated": "This package is no longer supported.",
            "license": "ISC",
            "dependencies": {
                "are-we-there-yet": "^2.0.0",
                "console-control-strings": "^1.1.0",
                "gauge": "^3.0.0",
                "set-blocking": "^2.0.0"
            }
        },
        "node_modules/object-assign": {
            "version": "4.1.1",
            "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
            "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/object-inspect": {
            "version": "1.13.4",
            "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
            "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/on-finished": {
            "version": "2.4.1",
            "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
            "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
            "license": "MIT",
            "dependencies": {
                "ee-first": "1.1.1"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/once": {
            "version": "1.4.0",
            "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
            "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
            "license": "ISC",
            "dependencies": {
                "wrappy": "1"
            }
        },
        "node_modules/parseurl": {
            "version": "1.3.3",
            "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
            "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/path-is-absolute": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
            "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
            "license": "MIT",
            "engines": {
                "node": ">=0.10.0"
            }
        },
        "node_modules/path-to-regexp": {
            "version": "0.1.12",
            "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
            "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
            "license": "MIT"
        },
        "node_modules/picomatch": {
            "version": "2.3.1",
            "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
            "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
            "dev": true,
            "license": "MIT",
            "engines": {
                "node": ">=8.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/jonschlinkert"
            }
        },
        "node_modules/proxy-addr": {
            "version": "2.0.7",
            "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
            "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
            "license": "MIT",
            "dependencies": {
                "forwarded": "0.2.0",
                "ipaddr.js": "1.9.1"
            },
            "engines": {
                "node": ">= 0.10"
            }
        },
        "node_modules/pstree.remy": {
            "version": "1.1.8",
            "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
            "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/qs": {
            "version": "6.13.0",
            "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
            "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
            "license": "BSD-3-Clause",
            "dependencies": {
                "side-channel": "^1.0.6"
            },
            "engines": {
                "node": ">=0.6"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/range-parser": {
            "version": "1.2.1",
            "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
            "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/raw-body": {
            "version": "2.5.2",
            "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
            "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
            "license": "MIT",
            "dependencies": {
                "bytes": "3.1.2",
                "http-errors": "2.0.0",
                "iconv-lite": "0.4.24",
                "unpipe": "1.0.0"
            },
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/readable-stream": {
            "version": "3.6.2",
            "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
            "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
            "license": "MIT",
            "dependencies": {
                "inherits": "^2.0.3",
                "string_decoder": "^1.1.1",
                "util-deprecate": "^1.0.1"
            },
            "engines": {
                "node": ">= 6"
            }
        },
        "node_modules/readdirp": {
            "version": "3.6.0",
            "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
            "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "picomatch": "^2.2.1"
            },
            "engines": {
                "node": ">=8.10.0"
            }
        },
        "node_modules/rimraf": {
            "version": "3.0.2",
            "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
            "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
            "deprecated": "Rimraf versions prior to v4 are no longer supported",
            "license": "ISC",
            "dependencies": {
                "glob": "^7.1.3"
            },
            "bin": {
                "rimraf": "bin.js"
            },
            "funding": {
                "url": "https://github.com/sponsors/isaacs"
            }
        },
        "node_modules/safe-buffer": {
            "version": "5.2.1",
            "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
            "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
            "funding": [
                {
                    "type": "github",
                    "url": "https://github.com/sponsors/feross"
                },
                {
                    "type": "patreon",
                    "url": "https://www.patreon.com/feross"
                },
                {
                    "type": "consulting",
                    "url": "https://feross.org/support"
                }
            ],
            "license": "MIT"
        },
        "node_modules/safer-buffer": {
            "version": "2.1.2",
            "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
            "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
            "license": "MIT"
        },
        "node_modules/semver": {
            "version": "7.7.1",
            "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
            "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
            "license": "ISC",
            "bin": {
                "semver": "bin/semver.js"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/send": {
            "version": "0.19.0",
            "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
            "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
            "license": "MIT",
            "dependencies": {
                "debug": "2.6.9",
                "depd": "2.0.0",
                "destroy": "1.2.0",
                "encodeurl": "~1.0.2",
                "escape-html": "~1.0.3",
                "etag": "~1.8.1",
                "fresh": "0.5.2",
                "http-errors": "2.0.0",
                "mime": "1.6.0",
                "ms": "2.1.3",
                "on-finished": "2.4.1",
                "range-parser": "~1.2.1",
                "statuses": "2.0.1"
            },
            "engines": {
                "node": ">= 0.8.0"
            }
        },
        "node_modules/send/node_modules/encodeurl": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
            "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/send/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/seq-queue": {
            "version": "0.0.5",
            "resolved": "https://registry.npmjs.org/seq-queue/-/seq-queue-0.0.5.tgz",
            "integrity": "sha512-hr3Wtp/GZIc/6DAGPDcV4/9WoZhjrkXsi5B/07QgX8tsdc6ilr7BFM6PM6rbdAX1kFSDYeZGLipIZZKyQP0O5Q=="
        },
        "node_modules/serve-static": {
            "version": "1.16.2",
            "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
            "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
            "license": "MIT",
            "dependencies": {
                "encodeurl": "~2.0.0",
                "escape-html": "~1.0.3",
                "parseurl": "~1.3.3",
                "send": "0.19.0"
            },
            "engines": {
                "node": ">= 0.8.0"
            }
        },
        "node_modules/set-blocking": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
            "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
            "license": "ISC"
        },
        "node_modules/setprototypeof": {
            "version": "1.2.0",
            "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
            "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
            "license": "ISC"
        },
        "node_modules/side-channel": {
            "version": "1.1.0",
            "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
            "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0",
                "object-inspect": "^1.13.3",
                "side-channel-list": "^1.0.0",
                "side-channel-map": "^1.0.1",
                "side-channel-weakmap": "^1.0.2"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/side-channel-list": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
            "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
            "license": "MIT",
            "dependencies": {
                "es-errors": "^1.3.0",
                "object-inspect": "^1.13.3"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/side-channel-map": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
            "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
            "license": "MIT",
            "dependencies": {
                "call-bound": "^1.0.2",
                "es-errors": "^1.3.0",
                "get-intrinsic": "^1.2.5",
                "object-inspect": "^1.13.3"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/side-channel-weakmap": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
            "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
            "license": "MIT",
            "dependencies": {
                "call-bound": "^1.0.2",
                "es-errors": "^1.3.0",
                "get-intrinsic": "^1.2.5",
                "object-inspect": "^1.13.3",
                "side-channel-map": "^1.0.1"
            },
            "engines": {
                "node": ">= 0.4"
            },
            "funding": {
                "url": "https://github.com/sponsors/ljharb"
            }
        },
        "node_modules/signal-exit": {
            "version": "3.0.7",
            "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
            "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
            "license": "ISC"
        },
        "node_modules/simple-update-notifier": {
            "version": "2.0.0",
            "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
            "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "semver": "^7.5.3"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/socket.io": {
            "version": "4.8.1",
            "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.8.1.tgz",
            "integrity": "sha512-oZ7iUCxph8WYRHHcjBEc9unw3adt5CmSNlppj/5Q4k2RIrhl8Z5yY2Xr4j9zj0+wzVZ0bxmYoGSzKJnRl6A4yg==",
            "license": "MIT",
            "dependencies": {
                "accepts": "~1.3.4",
                "base64id": "~2.0.0",
                "cors": "~2.8.5",
                "debug": "~4.3.2",
                "engine.io": "~6.6.0",
                "socket.io-adapter": "~2.5.2",
                "socket.io-parser": "~4.2.4"
            },
            "engines": {
                "node": ">=10.2.0"
            }
        },
        "node_modules/socket.io-adapter": {
            "version": "2.5.5",
            "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
            "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
            "license": "MIT",
            "dependencies": {
                "debug": "~4.3.4",
                "ws": "~8.17.1"
            }
        },
        "node_modules/socket.io-adapter/node_modules/debug": {
            "version": "4.3.7",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
            "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/socket.io-adapter/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/socket.io-parser": {
            "version": "4.2.4",
            "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
            "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
            "license": "MIT",
            "dependencies": {
                "@socket.io/component-emitter": "~3.1.0",
                "debug": "~4.3.1"
            },
            "engines": {
                "node": ">=10.0.0"
            }
        },
        "node_modules/socket.io-parser/node_modules/debug": {
            "version": "4.3.7",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
            "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/socket.io-parser/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/socket.io/node_modules/debug": {
            "version": "4.3.7",
            "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
            "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
            "license": "MIT",
            "dependencies": {
                "ms": "^2.1.3"
            },
            "engines": {
                "node": ">=6.0"
            },
            "peerDependenciesMeta": {
                "supports-color": {
                    "optional": true
                }
            }
        },
        "node_modules/socket.io/node_modules/ms": {
            "version": "2.1.3",
            "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
            "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
            "license": "MIT"
        },
        "node_modules/sqlstring": {
            "version": "2.3.3",
            "resolved": "https://registry.npmjs.org/sqlstring/-/sqlstring-2.3.3.tgz",
            "integrity": "sha512-qC9iz2FlN7DQl3+wjwn3802RTyjCx7sDvfQEXchwa6CWOx07/WVfh91gBmQ9fahw8snwGEWU3xGzOt4tFyHLxg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/statuses": {
            "version": "2.0.1",
            "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
            "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/string_decoder": {
            "version": "1.3.0",
            "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
            "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
            "license": "MIT",
            "dependencies": {
                "safe-buffer": "~5.2.0"
            }
        },
        "node_modules/string-width": {
            "version": "4.2.3",
            "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
            "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
            "license": "MIT",
            "dependencies": {
                "emoji-regex": "^8.0.0",
                "is-fullwidth-code-point": "^3.0.0",
                "strip-ansi": "^6.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/strip-ansi": {
            "version": "6.0.1",
            "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
            "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
            "license": "MIT",
            "dependencies": {
                "ansi-regex": "^5.0.1"
            },
            "engines": {
                "node": ">=8"
            }
        },
        "node_modules/supports-color": {
            "version": "5.5.0",
            "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
            "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "has-flag": "^3.0.0"
            },
            "engines": {
                "node": ">=4"
            }
        },
        "node_modules/tar": {
            "version": "6.2.1",
            "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
            "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
            "license": "ISC",
            "dependencies": {
                "chownr": "^2.0.0",
                "fs-minipass": "^2.0.0",
                "minipass": "^5.0.0",
                "minizlib": "^2.1.1",
                "mkdirp": "^1.0.3",
                "yallist": "^4.0.0"
            },
            "engines": {
                "node": ">=10"
            }
        },
        "node_modules/to-regex-range": {
            "version": "5.0.1",
            "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
            "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
            "dev": true,
            "license": "MIT",
            "dependencies": {
                "is-number": "^7.0.0"
            },
            "engines": {
                "node": ">=8.0"
            }
        },
        "node_modules/toidentifier": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
            "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
            "license": "MIT",
            "engines": {
                "node": ">=0.6"
            }
        },
        "node_modules/touch": {
            "version": "3.1.1",
            "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
            "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
            "dev": true,
            "license": "ISC",
            "bin": {
                "nodetouch": "bin/nodetouch.js"
            }
        },
        "node_modules/tr46": {
            "version": "0.0.3",
            "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
            "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
            "license": "MIT"
        },
        "node_modules/type-is": {
            "version": "1.6.18",
            "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
            "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
            "license": "MIT",
            "dependencies": {
                "media-typer": "0.3.0",
                "mime-types": "~2.1.24"
            },
            "engines": {
                "node": ">= 0.6"
            }
        },
        "node_modules/undefsafe": {
            "version": "2.0.5",
            "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
            "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
            "dev": true,
            "license": "MIT"
        },
        "node_modules/undici-types": {
            "version": "6.21.0",
            "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
            "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
            "license": "MIT"
        },
        "node_modules/unpipe": {
            "version": "1.0.0",
            "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
            "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/util-deprecate": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
            "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
            "license": "MIT"
        },
        "node_modules/utils-merge": {
            "version": "1.0.1",
            "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
            "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.4.0"
            }
        },
        "node_modules/vary": {
            "version": "1.1.2",
            "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
            "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
            "license": "MIT",
            "engines": {
                "node": ">= 0.8"
            }
        },
        "node_modules/webidl-conversions": {
            "version": "3.0.1",
            "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
            "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
            "license": "BSD-2-Clause"
        },
        "node_modules/whatwg-url": {
            "version": "5.0.0",
            "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
            "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
            "license": "MIT",
            "dependencies": {
                "tr46": "~0.0.3",
                "webidl-conversions": "^3.0.0"
            }
        },
        "node_modules/wide-align": {
            "version": "1.1.5",
            "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
            "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
            "license": "ISC",
            "dependencies": {
                "string-width": "^1.0.2 || 2 || 3 || 4"
            }
        },
        "node_modules/wrappy": {
            "version": "1.0.2",
            "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
            "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
            "license": "ISC"
        },
        "node_modules/ws": {
            "version": "8.17.1",
            "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
            "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
            "license": "MIT",
            "engines": {
                "node": ">=10.0.0"
            },
            "peerDependencies": {
                "bufferutil": "^4.0.1",
                "utf-8-validate": ">=5.0.2"
            },
            "peerDependenciesMeta": {
                "bufferutil": {
                    "optional": true
                },
                "utf-8-validate": {
                    "optional": true
                }
            }
        },
        "node_modules/yallist": {
            "version": "4.0.0",
            "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
            "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
            "license": "ISC"
        }
    }
}





--- File: mpl-backend\package.json ---


{
    "name": "mpl-backend",
    "version": "1.0.0",
    "description": "Backend for Metalworks Premier League",
    "main": "server.js",
    "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js",
        "test": "echo \"Error: no test specified\" && exit 1"
    },
    "dependencies": {
        "bcrypt": "^5.1.0",
        "cors": "^2.8.5",
        "dotenv": "^16.3.1",
        "express": "^4.21.2",
        "jsonwebtoken": "^9.0.1",
        "mysql2": "^3.6.0",
        "socket.io": "^4.7.1"
    },
    "devDependencies": {
        "nodemon": "^3.0.1"
    },
    "engines": {
        "node": ">=16.0.0"
    }
}





--- File: mpl-backend\server.js ---


// mpl-project/mpl-backend/server.js

// --- Core Modules ---
const http = require('http'); // For creating HTTP server for Express & Socket.IO
const express = require('express'); // Web framework
const { Server } = require("socket.io"); // Socket.IO server
const cors = require('cors'); // Middleware for enabling Cross-Origin Resource Sharing
require('dotenv').config(); // Load environment variables from .env file

// --- Custom Modules ---
const pool = require('./config/db'); // Database connection pool (ensures DB connects on start)
const initializeSocket = require('./socket/socketHandler'); // Socket.IO event handling logic
const { protect } = require('./middleware/authMiddleware'); // Admin authentication middleware
const leaderboardRoutes = require('./routes/leaderboard');
// --- Route Imports ---
// Public Routes (Accessible without login)
const playerRoutes = require('./routes/players');
const matchRoutes = require('./routes/matches');
//const ratingRoutes = require('./routes/ratings'); // Contains public GET and protected POST
const standingsRoutes = require('./routes/standings');
const publicSeasonRoutes = require('./routes/seasons');

// Admin Auth Route (Login endpoint is public)
const adminAuthRoutes = require('./routes/admin/auth');

// Protected Admin Routes (Require admin login via 'protect' middleware)
const adminSeasonRoutes = require('./routes/admin/seasons');
const adminTeamRoutes = require('./routes/admin/teams');
const adminScoringRoutes = require('./routes/admin/scoring');
const adminMatchRoutes = require('./routes/admin/matchesAdmin');
// TODO: Import other admin routes (e.g., payments, player management) if created

// --- App & Server Initialization ---
const app = express(); // Create Express application instance
const server = http.createServer(app); // Create HTTP server instance using the Express app

// Initialize Socket.IO server, attaching it to the HTTP server
const io = new Server(server, {
    // Configure CORS for Socket.IO connections to allow requests from the frontend URL
    cors: {
        origin: process.env.FRONTEND_URL || "http://localhost:5173", // Allow frontend origin
        methods: ["GET", "POST"] // Allowed HTTP methods for CORS negotiation
    },
    // Optional: Adjust ping settings if needed for network stability
    // pingTimeout: 60000, // Time without pong before connection considered closed
    // pingInterval: 25000 // How often pings are sent
});


// --- Global Middleware ---
// Enable CORS for all API routes (restrict origin in production)
app.use(cors({ origin: process.env.FRONTEND_URL || "http://localhost:5173" }));

// Parse incoming JSON request bodies
app.use(express.json());

// Parse incoming URL-encoded request bodies (e.g., from standard HTML forms)
app.use(express.urlencoded({ extended: true }));


// --- API Route Definitions ---

// Root/Health Check Route
app.get('/api', (req, res) => res.json({ message: 'MPL API is alive and kicking!' }));

// Mount Public Routes
app.use('/api/players', playerRoutes);
app.use('/api/matches', matchRoutes);
app.use('/api/standings', standingsRoutes)
//app.use('/api/ratings', ratingRoutes); // Remember POST is protected internally if auth middleware added
app.use('/api/seasons', publicSeasonRoutes);

// Mount Admin Authentication Routes (Login is public)
app.use('/api/admin/auth', adminAuthRoutes);
app.use('/api/leaderboard', leaderboardRoutes);

// Mount Protected Admin Routes (Apply 'protect' middleware here globally)
app.use('/api/admin/seasons', protect, adminSeasonRoutes);
app.use('/api/admin/teams', protect, adminTeamRoutes);
app.use('/api/admin/scoring', protect, adminScoringRoutes);
app.use('/api/admin/matches', protect, adminMatchRoutes);
// TODO: Mount other protected admin routes here...
// Example: app.use('/api/admin/payments', protect, paymentRoutes);


// --- Initialize Socket.IO Event Handlers ---
initializeSocket(io); // Pass the initialized Socket.IO server instance


// --- Error Handling Middleware ---

// 404 Not Found Handler (Catch-all for routes not defined above)
app.use((req, res, next) => {
    res.status(404).json({ message: `Resource not found at ${req.originalUrl}` });
});

// Global Error Handler (Catches errors passed via next(error))
// Must have 4 arguments (err, req, res, next)
app.use((err, req, res, next) => {
    console.error("--- Global Error Handler Caught Error ---");
    console.error(`Timestamp: ${new Date().toISOString()}`);
    console.error(`Route: ${req.method} ${req.originalUrl}`);
    // Log the error stack trace for debugging
    console.error("Stack Trace:", err.stack || err); // Log stack or error itself

    // Determine status code: use error's status code if available, otherwise default to 500
    const statusCode = err.statusCode || 500;

    // Send standardized error response
    res.status(statusCode).json({
        message: err.message || 'An unexpected internal server error occurred.',
        // Optionally include stack trace in development environment ONLY
        stack: process.env.NODE_ENV === 'production' ? undefined : err.stack,
    });
});


// --- Start the HTTP Server ---
const PORT = process.env.PORT || 5000;
const NODE_ENV = process.env.NODE_ENV || 'development';

server.listen(PORT, () => {
    console.log(`-------------------------------------------------------`);
    console.log(` MPL Server running on port ${PORT} in ${NODE_ENV} mode`);
    console.log(` API available at http://localhost:${PORT}/api`);
    console.log(` Frontend expected at ${process.env.FRONTEND_URL || 'http://localhost:5173'}`);
    console.log(`-------------------------------------------------------`);
});


// --- Graceful Shutdown Handling (Optional but Recommended) ---
const shutdown = (signal) => {
    console.log(`\n${signal} signal received. Shutting down gracefully...`);
    server.close(() => {
        console.log('HTTP server closed.');
        // Close database connection pool
        pool.end(err => {
             if (err) {
                 console.error('Error closing database pool:', err.message);
             } else {
                console.log('Database pool closed.');
             }
             process.exit(0); // Exit process cleanly
        });
    });
};

// Listen for termination signals
process.on('SIGTERM', () => shutdown('SIGTERM')); // Standard termination signal
process.on('SIGINT', () => shutdown('SIGINT')); // Ctrl+C in terminal




--- File: mpl-backend\config\db.js ---


// mpl-project/mpl-backend/config/db.js
const mysql = require('mysql2/promise');
require('dotenv').config(); // Load environment variables from .env file

const pool = mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'mmpl_dbadmin', // Default user if not set in .env
    password: process.env.DB_PASSWORD || 'Mpl@2025', // Default password if not set
    database: process.env.DB_NAME || 'mpl_db', // Default DB name
    waitForConnections: true,
    connectionLimit: 10, // Adjust based on expected load
    queueLimit: 0, // No limit on connection queue
    timezone: '+00:00' // Use UTC timezone for consistency in date/time storage
});

// Optional: Test the connection on startup
pool.getConnection()
    .then(connection => {
        console.log('MySQL Database connected successfully!');
        connection.release(); // Release the connection back to the pool
    })
    .catch(error => {
        console.error('!!! MySQL Database connection error !!!');
        console.error(`Error Code: ${error.code}`);
        console.error(`Error Message: ${error.message}`);
        // Depending on the error, you might want to exit the process
        if (error.code === 'ER_ACCESS_DENIED_ERROR') {
            console.error('=> Check database username and password in your .env file.');
        } else if (error.code === 'ER_BAD_DB_ERROR') {
            console.error(`=> Database '${process.env.DB_NAME}' not found. Ensure it exists.`);
        } else if (error.code === 'ECONNREFUSED') {
             console.error('=> Connection refused. Ensure MySQL server is running and accessible at the specified host.');
        }
        // Consider exiting if DB is essential for startup: process.exit(1);
    });

module.exports = pool;




--- File: mpl-backend\controllers\leaderboardController.js ---


// mpl-project/mpl-backend/controllers/leaderboardController.js
const pool = require('../config/db');

const calculateSR = (runs, balls) => (balls > 0 ? (runs / balls * 100) : 0);
const calculateAvg = (runs, outs) => (outs > 0 ? (runs / outs) : (runs > 0 ? Infinity : 0)); // Handle infinity for not out
const calculateEcon = (runs, oversDecimal) => {
    if (oversDecimal <= 0) return null;
    const completedOvers = Math.floor(oversDecimal);
    const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
    const totalBalls = (completedOvers * 6) + ballsInPartialOver;
    if (totalBalls === 0) return null;
    const properOvers = totalBalls / 6;
    return runs / properOvers;
};

/**
 * @desc    Get leaderboards (Batting, Bowling, Impact) for a season
 * @route   GET /api/leaderboard?season_id=X
 * @access  Public
 */
exports.getLeaderboards = async (req, res, next) => {
    const { season_id } = req.query;

    if (!season_id || isNaN(parseInt(season_id))) {
        return res.status(400).json({ message: 'Valid season_id query parameter is required.' });
    }

    try {
        const seasonIdNum = parseInt(season_id);

        // Base query joining PlayerMatchStats and Players, filtered by season
        const baseQuery = `
            SELECT
                p.player_id,
                p.name as player_name,
                COUNT(DISTINCT pms.match_id) as matches_played,
                SUM(COALESCE(pms.runs_scored, 0)) as total_runs,
                SUM(COALESCE(pms.balls_faced, 0)) as total_balls_faced,
                SUM(CASE WHEN pms.is_out = TRUE THEN 1 ELSE 0 END) as times_out,
                MAX(COALESCE(pms.runs_scored, 0)) as highest_score, -- Simple Max, not considering not outs
                SUM(COALESCE(pms.fours, 0)) as total_fours,
                SUM(COALESCE(pms.sixes, 0)) as total_sixes,
                SUM(COALESCE(pms.wickets_taken, 0)) as total_wickets,
                SUM(COALESCE(pms.runs_conceded, 0)) as total_runs_conceded,
                SUM(COALESCE(pms.overs_bowled, 0)) as total_overs_bowled, -- Sum of decimals
                SUM(COALESCE(pms.maidens, 0)) as total_maidens,
                SUM(COALESCE(pms.batting_impact_points, 0)) as total_batting_impact,
                SUM(COALESCE(pms.bowling_impact_points, 0)) as total_bowling_impact,
                SUM(COALESCE(pms.fielding_impact_points, 0)) as total_fielding_impact,
                SUM(COALESCE(pms.batting_impact_points, 0) + COALESCE(pms.bowling_impact_points, 0) + COALESCE(pms.fielding_impact_points, 0)) as total_impact
            FROM playermatchstats pms
            JOIN players p ON pms.player_id = p.player_id
            JOIN matches m ON pms.match_id = m.match_id
            WHERE m.season_id = ?
            GROUP BY p.player_id, p.name
        `;

        const [allStats] = await pool.query(baseQuery, [seasonIdNum]);

        // Process for leaderboards
        const battingLeaders = allStats
            .filter(s => s.total_runs > 0 || s.matches_played > 0) // Consider players who played
            .map(s => ({
                player_id: s.player_id,
                player_name: s.player_name,
                matches: s.matches_played,
                runs: s.total_runs,
                avg: calculateAvg(s.total_runs, s.times_out),
                sr: calculateSR(s.total_runs, s.total_balls_faced),
                hs: s.highest_score, // Simple highest for now
                fours: s.total_fours,
                sixes: s.total_sixes,
            }))
            .sort((a, b) => b.runs - a.runs) // Sort by runs descending
            .slice(0, 20); // Limit to top 20

        const bowlingLeaders = allStats
            .filter(s => s.total_overs_bowled > 0) // Consider only players who bowled
            .map(s => ({
                player_id: s.player_id,
                player_name: s.player_name,
                matches: s.matches_played,
                wickets: s.total_wickets,
                runs: s.total_runs_conceded,
                overs: formatOversDisplay(s.total_overs_bowled), // Format overs
                econ: calculateEcon(s.total_runs_conceded, s.total_overs_bowled),
                // avg: calculateBowlAvg(s.total_runs_conceded, s.total_wickets), // Need helper
                // sr: calculateBowlSR(s.total_overs_bowled, s.total_wickets) // Need helper
            }))
            .sort((a, b) => b.wickets - a.wickets || (a.econ ?? 999) - (b.econ ?? 999)) // Sort by wickets, then econ asc
            .slice(0, 20); // Limit

        const impactLeaders = allStats
             .map(s => ({
                player_id: s.player_id,
                player_name: s.player_name,
                matches: s.matches_played,
                total_impact: s.total_impact,
                bat_impact: s.total_batting_impact,
                bowl_impact: s.total_bowling_impact,
                field_impact: s.total_fielding_impact,
             }))
             .sort((a, b) => b.total_impact - a.total_impact) // Sort by total impact desc
             .slice(0, 20); // Limit

        res.json({
            batting: battingLeaders,
            bowling: bowlingLeaders,
            impact: impactLeaders
        });

    } catch (error) {
        console.error("Get Leaderboards Error:", error);
        next(error);
    }
};

// Helper function to format overs display (duplicate from above, consider moving to shared utils)
const formatOversDisplay = (oversDecimal) => {
    if (oversDecimal == null || isNaN(oversDecimal)) return "-";
    const completedOvers = Math.floor(oversDecimal);
    const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
    if (ballsInPartialOver === 0 && oversDecimal === completedOvers) return `${completedOvers}.0`;
    return `${completedOvers}.${ballsInPartialOver}`;
};




--- File: mpl-backend\controllers\matchController.js ---


// mpl-project/mpl-backend/controllers/matchController.js
const pool = require('../config/db');

/**
 * @desc    Get match fixtures (list view, can be filtered)
 * @route   GET /api/matches?season_id=X&status=Y&team_id=Z
 * @access  Public
 */
exports.getFixtures = async (req, res, next) => {
    // Extract potential query parameters for filtering
    const { season_id, status, team_id } = req.query;
    try {
        // Base query joining necessary tables for display
        let query = `
            SELECT
                m.match_id, m.match_datetime, m.status, m.venue, m.result_summary,
                m.season_id, s.name as season_name,
                m.team1_id, t1.name as team1_name,
                m.team2_id, t2.name as team2_name,
                m.winner_team_id, wt.name as winner_team_name,
                m.man_of_the_match_player_id, mom.name as man_of_the_match_name
            FROM matches m
            JOIN seasons s ON m.season_id = s.season_id
            JOIN teams t1 ON m.team1_id = t1.team_id
            JOIN teams t2 ON m.team2_id = t2.team_id
            LEFT JOIN teams wt ON m.winner_team_id = wt.team_id
            LEFT JOIN players mom ON m.man_of_the_match_player_id = mom.player_id
        `;
        const params = [];
        const conditions = [];

        // Add conditions based on query parameters
        if (season_id && !isNaN(parseInt(season_id))) {
            conditions.push('m.season_id = ?');
            params.push(parseInt(season_id));
        }
        if (status) {
             // Optional: Validate status against allowed enum values
             const validStatuses = ['Scheduled', 'Setup', 'Live', 'Completed', 'Abandoned'];
             if (validStatuses.includes(status)) {
                conditions.push('m.status = ?');
                params.push(status);
             } else {
                 console.warn(`Invalid status filter ignored: ${status}`);
             }
        }
        if (team_id && !isNaN(parseInt(team_id))) {
            // Filter matches where the team is either team1 or team2
            conditions.push('(m.team1_id = ? OR m.team2_id = ?)');
            params.push(parseInt(team_id), parseInt(team_id));
        }

        // Append WHERE clause if conditions exist
        if (conditions.length > 0) {
            query += ' WHERE ' + conditions.join(' AND ');
        }

        // Add ordering (e.g., show upcoming first, then recent completed)
        query += ' ORDER BY CASE m.status WHEN "Live" THEN 1 WHEN "Setup" THEN 2 WHEN "Scheduled" THEN 3 ELSE 4 END, m.match_datetime ASC';

        const [matches] = await pool.query(query, params);
        res.json(matches);
    } catch (error) {
        console.error("Get Fixtures Error:", error);
        next(error);
    }
};

/**
 * @desc    Get full details for a single match (for viewer detail page)
 * @route   GET /api/matches/:id
 * @access  Public
 */
exports.getMatchDetails = async (req, res, next) => {
    const { id } = req.params; // Match ID

     if (isNaN(parseInt(id))) {
         return res.status(400).json({ message: 'Invalid Match ID.' });
     }

    try {
         // Query to fetch comprehensive match details
         const query = `
            SELECT
                m.*, -- Select all columns from Matches table
                s.name as season_name,
                t1.name as team1_name,
                t2.name as team2_name,
                twt.name as toss_winner_name, -- Name of team that won toss
                wt.name as winner_team_name,  -- Name of winning team (if completed)
                mom.name as man_of_the_match_name -- Name of MoM (if set)
            FROM matches m
            JOIN seasons s ON m.season_id = s.season_id
            JOIN teams t1 ON m.team1_id = t1.team_id
            JOIN teams t2 ON m.team2_id = t2.team_id
            LEFT JOIN teams twt ON m.toss_winner_team_id = twt.team_id
            LEFT JOIN teams wt ON m.winner_team_id = wt.team_id
            LEFT JOIN players mom ON m.man_of_the_match_player_id = mom.player_id
            WHERE m.match_id = ?
        `;
        const [matches] = await pool.query(query, [id]);

        // Check if match was found
        if (matches.length === 0) {
            return res.status(404).json({ message: 'Match not found.' });
        }
        const matchDetails = matches[0];

        // If the match is completed, also fetch the detailed player stats for the scorecard
        let playerStats = [];
        if (matchDetails.status === 'Completed') {
             const [stats] = await pool.query(
                `SELECT
                    pms.*, -- Select all columns from PlayerMatchStats
                    p.name as player_name,
                     -- Determine which team (1 or 2) this player belongs to for display grouping
                    CASE WHEN pms.team_id = m.team1_id THEN 1 ELSE 2 END as team_number
                 FROM playermatchstats pms
                 JOIN players p ON pms.player_id = p.player_id
                 JOIN matches m ON pms.match_id = m.match_id -- Join Matches to determine team number
                 WHERE pms.match_id = ?
                 ORDER BY team_number, p.name`, // Order by team, then player name for scorecard
                [id]
            );
            playerStats = stats;
        }

        // Return the combined match details and player stats (if available)
        res.json({ ...matchDetails, playerStats });

    } catch (error) {
        console.error("Get Match Details Error:", error);
        next(error);
    }
};


// @desc    Get ball-by-ball commentary for a match
// @route   GET /api/matches/:id/commentary
// @access  Public
exports.getMatchCommentary = async (req, res, next) => {
    const { id } = req.params;
     if (isNaN(parseInt(id))) return res.status(400).json({ message: 'Invalid Match ID format.' });

    try {
        const [commentary] = await pool.query(
            `SELECT
                b.*,
                batsman.name as batsman_name,
                bowler.name as bowler_name,
                fielder.name as fielder_name
             FROM ballbyball b
             JOIN players batsman ON b.batsman_on_strike_player_id = batsman.player_id
             JOIN players bowler ON b.bowler_player_id = bowler.player_id
             LEFT JOIN players fielder ON b.fielder_player_id = fielder.player_id
             WHERE b.match_id = ?
             ORDER BY b.inning_number ASC, b.over_number ASC, b.ball_number_in_over ASC, b.ball_id ASC`,
            [id]
        );

        res.json(commentary);

    } catch (error) {
        console.error(`Get Commentary Error for Match ${id}:`, error);
        next(error);
    }
};


// --- Placeholder Admin Functions (Implement if creating/managing matches via API) ---

/**
 * @desc    Create a new match fixture
 * @route   POST /api/matches
 * @access  Admin (Protected)
 */
// exports.createMatch = async (req, res, next) => { ... }

/**
 * @desc    Update match details (datetime, venue etc.)
 * @route   PUT /api/matches/:id
 * @access  Admin (Protected)
 */
// exports.updateMatch = async (req, res, next) => { ... }

/**
 * @desc    Delete a match fixture
 * @route   DELETE /api/matches/:id
 * @access  Admin (Protected)
 */
// exports.deleteMatch = async (req, res, next) => { ... }




--- File: mpl-backend\controllers\playerController.js ---


// mpl-project/mpl-backend/controllers/playerController.js
const pool = require('../config/db');
const { formatOversDisplay, calculateAvg, calculateSR, calculateEcon } = require('../utils/statsCalculations'); // Assuming utils file exists

/**
 * @desc    Register a new player
 * @route   POST /api/players
 * @access  Admin Protected (via route)
 */
exports.registerPlayer = async (req, res, next) => {
    const { name, base_price, role } = req.body; // Removed email, phone
    // --- Validation ---
    if (!name) { return res.status(400).json({ message: 'Player name is required.' }); }
    const validRoles = ['Batsman', 'Bowler', 'AllRounder', 'WicketKeeper', null];
    if (role && !validRoles.includes(role)) { return res.status(400).json({ message: `Invalid role. Must be one of: ${validRoles.slice(0,-1).join(', ')} or empty.` }); }
    // --- End Validation ---
    try {
        const [result] = await pool.query('INSERT INTO Players (name, base_price, role, current_team_id) VALUES (?, ?, ?, NULL)', [ name, base_price === undefined || base_price === null ? 100.00 : base_price, role || null ]);
        const playerId = result.insertId;
        const [newPlayer] = await pool.query('SELECT player_id, name, base_price, role, current_team_id FROM players WHERE player_id = ?', [playerId]);
        if (newPlayer.length === 0) throw new Error('Failed to retrieve newly registered player.');
        res.status(201).json({ message: 'Player registered successfully', player: newPlayer[0] });
    } catch (error) { console.error("Player Registration Error:", error); next(error); }
};

/**
 * @desc    Get all players (basic list)
 * @route   GET /api/players
 * @access  Public
 */
exports.getAllPlayers = async (req, res, next) => {
    try {
        const [players] = await pool.query('SELECT p.player_id, p.name, p.role, t.name as current_team_name FROM players p LEFT JOIN teams t ON p.current_team_id = t.team_id ORDER BY p.name ASC');
        res.json(players);
    } catch (error) { console.error("Get All Players Error:", error); next(error); }
};

/**
 * @desc    Get details of a single player by ID
 * @route   GET /api/players/:id
 * @access  Public
 */
exports.getPlayerById = async (req, res, next) => {
     const { id } = req.params; if (isNaN(parseInt(id))) { return res.status(400).json({ message: 'Invalid Player ID.' }); }
    try {
        const playerQuery = ` SELECT p.player_id, p.name, p.base_price, p.role, p.current_team_id, t.name as current_team_name FROM players p LEFT JOIN teams t ON p.current_team_id = t.team_id WHERE p.player_id = ? `;
        const [players] = await pool.query(playerQuery, [id]);
        if (players.length === 0) { return res.status(404).json({ message: 'Player not found.' }); }
        const playerData = players[0];
        const impactQuery = ` SELECT SUM(COALESCE(batting_impact_points, 0) + COALESCE(bowling_impact_points, 0) + COALESCE(fielding_impact_points, 0)) as total_impact, COUNT(DISTINCT match_id) as matches_played FROM playermatchstats WHERE player_id = ? GROUP BY player_id `;
        const [impactRes] = await pool.query(impactQuery, [id]); let averageImpact = 0; if (impactRes.length > 0 && impactRes[0].matches_played > 0) { averageImpact = impactRes[0].total_impact / impactRes[0].matches_played; }
        const responseData = { ...playerData, average_impact: parseFloat(averageImpact.toFixed(2)) };
        res.json(responseData);
    } catch (error) { console.error("Get Player By ID Error:", error); next(error); }
};

/**
 * @desc    Get aggregated player statistics (career or filtered by season)
 * @route   GET /api/players/:id/stats?season_id=X
 * @access  Public
 */
exports.getPlayerStats = async (req, res, next) => {
    const playerId = req.params.id;
    const { season_id } = req.query;
    // Use pool directly unless transaction is needed across queries
    // const connection = await pool.getConnection();

    if (isNaN(parseInt(playerId))) { return res.status(400).json({ message: 'Invalid Player ID.' }); }
    if (season_id && isNaN(parseInt(season_id))) { return res.status(400).json({ message: 'Invalid Season ID provided in query parameter.' }); }

    try {
        // --- Query 1: Fetch Main Aggregated Stats ---
        let query = `
            SELECT
                p.player_id, p.name, p.role,
                COUNT(DISTINCT pms.match_id) as matches_played,
                COALESCE(SUM(pms.runs_scored), 0) as total_runs,
                COALESCE(SUM(pms.balls_faced), 0) as total_balls_faced,
                MAX(COALESCE(pms.runs_scored, 0)) as highest_score,
                COALESCE(SUM(pms.fours), 0) as total_fours,
                COALESCE(SUM(pms.sixes), 0) as total_sixes,
                COALESCE(SUM(CASE WHEN pms.is_out = TRUE THEN 1 ELSE 0 END), 0) as times_out,
                COALESCE(SUM(pms.wickets_taken), 0) as total_wickets,
                COALESCE(SUM(pms.runs_conceded), 0) as total_runs_conceded,
                COALESCE(SUM(pms.overs_bowled), 0.0) as total_overs_bowled,
                COALESCE(SUM(pms.maidens), 0) as total_maidens,
                COALESCE(SUM(pms.wides), 0) as total_wides,
                COALESCE(SUM(pms.no_balls), 0) as total_no_balls,
                COALESCE(SUM(pms.catches), 0) as total_catches,
                COALESCE(SUM(pms.stumps), 0) as total_stumps,
                COALESCE(SUM(pms.run_outs), 0) as total_run_outs,
                COALESCE(SUM(pms.batting_impact_points), 0) as total_batting_impact,
                COALESCE(SUM(pms.bowling_impact_points), 0) as total_bowling_impact,
                COALESCE(SUM(pms.fielding_impact_points), 0) as total_fielding_impact
            FROM players p
            LEFT JOIN playermatchstats pms ON p.player_id = pms.player_id
        `;
        const params = [];
        let joinClause = '';
        let whereClause = ' WHERE p.player_id = ?'; params.push(playerId);

        if (season_id) {
            joinClause = ' LEFT JOIN matches m ON pms.match_id = m.match_id';
            whereClause += ' AND m.season_id = ?'; params.push(season_id);
        }
        query += joinClause + whereClause + ' GROUP BY p.player_id, p.name, p.role';

        const [statsArr] = await pool.query(query, params); // Use pool

        // --- Handle No Stats Found ---
        if (statsArr.length === 0) {
             const [playerCheck] = await pool.query('SELECT player_id, name, role FROM players WHERE player_id = ?', [playerId]);
             if (playerCheck.length === 0) { return res.status(404).json({ message: 'Player not found.' }); }
             else { return res.json({ ...playerCheck[0], matches_played: 0, total_runs: 0, total_balls_faced: 0, highest_score: 0, total_fours: 0, total_sixes: 0, times_out: 0, total_wickets: 0, total_runs_conceded: 0, total_overs_bowled: 0.0, total_maidens: 0, total_wides: 0, total_no_balls: 0, total_catches: 0, total_stumps: 0, total_run_outs: 0, total_batting_impact: 0, total_bowling_impact: 0, total_fielding_impact: 0, average_impact: 0, super_overs_bowled: 0, batting_average: null, batting_strike_rate: null, bowling_average: null, bowling_economy_rate: null, bowling_strike_rate: null }); } // Added super_overs_bowled: 0
        }

        let stats = statsArr[0];

        // --- Query 2: Calculate Super Overs Bowled --- // ADDED THIS QUERY
        let superOverQuery = `
            SELECT COUNT(DISTINCT b.match_id) as super_overs_bowled
            FROM ballbyball b
            JOIN matches m ON b.match_id = m.match_id
            WHERE b.bowler_player_id = ?
              AND b.over_number = m.super_over_number
        `;
        const superOverParams = [playerId];
        if (season_id) {
            superOverQuery += ' AND m.season_id = ?';
            superOverParams.push(season_id);
        }
        const [superOverRes] = await pool.query(superOverQuery, superOverParams);
        stats.super_overs_bowled = superOverRes[0]?.super_overs_bowled || 0; // Add to stats object
        // --- End Super Over Query ---

        // --- Calculate Derived Statistics ---
        stats.batting_average = calculateAvg(stats.total_runs, stats.times_out);
        stats.batting_strike_rate = calculateSR(stats.total_runs, stats.total_balls_faced);
        stats.bowling_economy_rate = calculateEcon(stats.total_runs_conceded, stats.total_overs_bowled);
        const totalImpact = (stats.total_batting_impact || 0) + (stats.total_bowling_impact || 0) + (stats.total_fielding_impact || 0);
        stats.average_impact = stats.matches_played > 0 ? totalImpact / stats.matches_played : 0;

        // --- Formatting ---
        if (stats.batting_average === Infinity) { stats.batting_average_display = "Not Out"; stats.batting_average = null; }
        else { stats.batting_average_display = stats.batting_average !== null ? stats.batting_average.toFixed(2) : '-'; }
        stats.batting_strike_rate = stats.batting_strike_rate !== null ? parseFloat(stats.batting_strike_rate.toFixed(2)) : null;
        stats.bowling_economy_rate = stats.bowling_economy_rate !== null ? parseFloat(stats.bowling_economy_rate.toFixed(2)) : null;
        stats.average_impact = parseFloat(stats.average_impact.toFixed(2));

        res.json(stats);
    } catch (error) { console.error("Get Player Stats Error:", error); next(error); }
    // finally { if (connection) connection.release(); } // Remove if not using connection
};
    
/**
 * @desc    Update player details
 * @route   PUT /api/players/:id
 * @access  Admin (Protected)
 */
exports.updatePlayer = async (req, res, next) => {
    const { id } = req.params;
    // MODIFIED: Removed email, phone
    const { name, base_price, role } = req.body;

    if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Player ID.' });
    }
    // Check if any valid update data is provided
    if (name === undefined && base_price === undefined && role === undefined) {
        return res.status(400).json({ message: 'No update data provided (name, base_price, role).' });
    }

    try {
        // Check if player exists
        const [existing] = await pool.query('SELECT player_id FROM players WHERE player_id = ?', [id]);
        if (existing.length === 0) {
            return res.status(404).json({ message: 'Player not found.' });
        }

        // Build fields to update dynamically
        const fieldsToUpdate = {};
        if (name !== undefined) fieldsToUpdate.name = name;
        if (base_price !== undefined) fieldsToUpdate.base_price = base_price;
        if (role !== undefined) fieldsToUpdate.role = role || null;

        // Perform update if there are fields to change
        if (Object.keys(fieldsToUpdate).length > 0) {
            const [result] = await pool.query('UPDATE Players SET ? WHERE player_id = ?', [fieldsToUpdate, id]);
             if (result.affectedRows === 0) {
                console.warn(`Update Player ${id}: Affected rows was 0. Data might be unchanged.`);
             }
        } else {
             return res.status(304).json({ message: 'No changes detected.' });
        }

        // Fetch updated player details (excluding sensitive/derived fields)
        const [updatedPlayer] = await pool.query('SELECT player_id, name, base_price, role, current_team_id FROM players WHERE player_id = ?', [id]);
        res.json({ message: 'Player updated successfully', player: updatedPlayer[0] });

    } catch (error) {
        console.error("Update Player Error:", error);
        next(error);
    }
};

/**
 * @desc    Delete a player (Use with caution!)
 * @route   DELETE /api/players/:id
 * @access  Admin (Protected)
 */
exports.deletePlayer = async (req, res, next) => {
    const { id } = req.params;
    if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Player ID.' });
    }

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // Check if player exists
         const [existing] = await connection.query('SELECT player_id FROM players WHERE player_id = ?', [id]);
        if (existing.length === 0) {
            await connection.rollback(); return res.status(404).json({ message: 'Player not found.' });
        }

        // --- Handle Foreign Key References ---
        await connection.query('UPDATE Teams SET captain_player_id = NULL WHERE captain_player_id = ?', [id]);
        await connection.query('UPDATE Matches SET man_of_the_match_player_id = NULL WHERE man_of_the_match_player_id = ?', [id]);
        // Assuming ratings should be kept but reference nulled (adjust if cascading delete is desired)
        // await connection.query('UPDATE PlayerRatings SET rater_player_id = NULL WHERE rater_player_id = ?', [id]);
        // await connection.query('UPDATE PlayerRatings SET rated_player_id = NULL WHERE rated_player_id = ?', [id]);

        // Explicitly delete from TeamPlayers junction table
        await connection.query('DELETE FROM teamplayers WHERE player_id = ?', [id]);
        console.log(`Deleted TeamPlayers entries for player ${id}`);

        // NOTE: Deletion will fail if player has stats in PlayerMatchStats and FK constraint is RESTRICT.
        // Handle this based on your desired behavior (e.g., delete stats too? Disallow player delete?).

        // Finally, attempt to delete the player
        const [result] = await connection.query('DELETE FROM players WHERE player_id = ?', [id]);

        if (result.affectedRows === 0) {
             await connection.rollback();
             return res.status(404).json({ message: 'Player not found or could not be deleted (possibly due to existing references like match stats).' });
        }

        await connection.commit();
        res.status(200).json({ message: 'Player deleted successfully.' });

    } catch (error) {
        await connection.rollback();
        console.error("Delete Player Error:", error);
        if (error.code === 'ER_ROW_IS_REFERENCED_2') {
            return res.status(400).json({ message: 'Cannot delete player. They are referenced in other records (e.g., match stats, payments) that prevent deletion. Check foreign key constraints or remove references first.' });
        }
        next(error);
    } finally {
        connection.release();
    }
};




--- File: mpl-backend\controllers\publicSeasonController.js ---


// mpl-backend/controllers/publicSeasonController.js
const pool = require('../config/db');

/**
 * @desc    Get public list of seasons (ID, Name, Year)
 * @route   GET /api/seasons/public
 * @access  Public
 */
exports.getPublicSeasons = async (req, res, next) => {
    try {
        // Select only necessary fields for public view, order by year
        const [seasons] = await pool.query('SELECT season_id, name, year FROM seasons ORDER BY year DESC');
        res.json(seasons);
    } catch (error) {
        console.error("Get Public Seasons Error:", error);
        next(error);
    }
};




--- File: mpl-backend\controllers\standingsController.js ---


// mpl-backend/controllers/standingsController.js
const pool = require('../config/db');
// Assuming utils file exists and exports this function
const { ballsToOversDecimal } = require('../utils/statsCalculations');

/**
 * @desc    Get team standings for a specific season
 * @route   GET /api/standings?season_id=X
 * @access  Public
 */
exports.getStandings = async (req, res, next) => {
    const { season_id } = req.query;

    if (!season_id || isNaN(parseInt(season_id))) {
        return res.status(400).json({ message: 'Valid season_id query parameter is required.' });
    }

    const seasonIdNum = parseInt(season_id);
    const connection = await pool.getConnection();

    try {
        // 1. Get all teams for the season
        const [teams] = await connection.query('SELECT team_id, name FROM teams WHERE season_id = ?', [seasonIdNum]);
        if (teams.length === 0) {
            return res.json([]); // Return empty array if no teams in the season
        }

        // 2. Get all completed OR abandoned matches for the season
        const [matches] = await connection.query(
            'SELECT match_id, team1_id, team2_id, winner_team_id, decision, toss_winner_team_id, status FROM matches WHERE season_id = ? AND status IN (?, ?)',
            [seasonIdNum, 'Completed', 'Abandoned'] // Fetch both Completed and Abandoned
        );

        // 3. Initialize standings data structure
        const standingsMap = new Map();
        teams.forEach(team => {
            standingsMap.set(team.team_id, {
                team_id: team.team_id,
                name: team.name,
                played: 0,
                wins: 0,
                losses: 0,
                no_result: 0, // Added no_result
                points: 0,
                totalRunsScored: 0,
                totalBallsFaced: 0,
                totalRunsConceded: 0,
                totalBallsBowled: 0,
                nrr: 0,
            });
        });

        // 4. Process each completed or abandoned match
        for (const match of matches) {
            const team1Stats = standingsMap.get(match.team1_id);
            const team2Stats = standingsMap.get(match.team2_id);

            if (!team1Stats || !team2Stats) continue; // Skip if team data missing

            // Increment played count for both types
            team1Stats.played++;
            team2Stats.played++;

            // Handle based on status
            if (match.status === 'Completed') {
                // Assign Win/Loss/Tie points for Completed matches
                if (match.winner_team_id === match.team1_id) {
                    team1Stats.wins++;
                    team1Stats.points += 2;
                    team2Stats.losses++;
                } else if (match.winner_team_id === match.team2_id) {
                    team2Stats.wins++;
                    team2Stats.points += 2;
                    team1Stats.losses++;
                } else {
                    // Completed but no winner means Tie/No Result
                    team1Stats.no_result++; // Increment no_result
                    team2Stats.no_result++; // Increment no_result
                    team1Stats.points += 1; // 1 point for tie/no result
                    team2Stats.points += 1; // 1 point for tie/no result
                    console.log(`Match ${match.match_id}: Tie or Completed No Result. Awarding 1 point. NR count updated.`);
                }

                // NRR Calculation only for Completed matches
                // Fetch Ball-by-Ball data
                const [ballsData] = await connection.query(`
                    SELECT inning_number, runs_scored, extra_runs, is_extra, extra_type, is_bye
                    FROM ballbyball
                    WHERE match_id = ?
                    ORDER BY inning_number, ball_id
                `, [match.match_id]);

                let inn1Runs = 0; let inn1Balls = 0;
                let inn2Runs = 0; let inn2Balls = 0;

                ballsData.forEach(ball => {
                    const isLegalDelivery = !(ball.is_extra && ball.extra_type === 'Wide');
                    // Include extras in runs scored/conceded for NRR, but not byes/legbyes
                    const runsAdded = ball.is_bye ? 0 : (ball.runs_scored + (ball.extra_runs || 0));

                    if (ball.inning_number === 1) {
                        inn1Runs += runsAdded;
                        if (isLegalDelivery) inn1Balls++;
                    } else if (ball.inning_number === 2) {
                        inn2Runs += runsAdded;
                        if (isLegalDelivery) inn2Balls++;
                    }
                });

                 // Determine who batted first
                const team1BatFirst = (match.decision === 'Bat' && match.toss_winner_team_id === match.team1_id) ||
                                  (match.decision === 'Bowl' && match.toss_winner_team_id === match.team2_id);

                // Update team stats totals based on who batted when
                if (team1BatFirst) {
                    team1Stats.totalRunsScored += inn1Runs; team1Stats.totalBallsFaced += inn1Balls;
                    team1Stats.totalRunsConceded += inn2Runs; team1Stats.totalBallsBowled += inn2Balls;
                    team2Stats.totalRunsScored += inn2Runs; team2Stats.totalBallsFaced += inn2Balls;
                    team2Stats.totalRunsConceded += inn1Runs; team2Stats.totalBallsBowled += inn1Balls;
                } else {
                    team2Stats.totalRunsScored += inn1Runs; team2Stats.totalBallsFaced += inn1Balls;
                    team2Stats.totalRunsConceded += inn2Runs; team2Stats.totalBallsBowled += inn2Balls;
                    team1Stats.totalRunsScored += inn2Runs; team1Stats.totalBallsFaced += inn2Balls;
                    team1Stats.totalRunsConceded += inn1Runs; team1Stats.totalBallsBowled += inn1Balls;
                }

            } else if (match.status === 'Abandoned') {
                // Award points for Abandoned (typically 1 each) and count as No Result
                team1Stats.no_result++; // Increment no_result
                team2Stats.no_result++; // Increment no_result
                team1Stats.points += 1; // Award 1 point for abandonment
                team2Stats.points += 1; // Award 1 point for abandonment
                console.log(`Match ${match.match_id}: Abandoned. Awarding 1 point. NR count updated.`);
                // Do NOT calculate NRR for abandoned matches
            }
        }

        // 5. Calculate NRR and Finalize Standings Array
        const finalStandings = Array.from(standingsMap.values()).map(team => {
             const oversFaced = team.totalBallsFaced / 6;
             const oversBowled = team.totalBallsBowled / 6;
             // Ensure division by zero doesn't occur
             const runRateFor = oversFaced > 0 ? team.totalRunsScored / oversFaced : 0;
             const runRateAgainst = oversBowled > 0 ? team.totalRunsConceded / oversBowled : 0;
             team.nrr = (runRateFor - runRateAgainst);
             if (isNaN(team.nrr) || !isFinite(team.nrr)) {
                 team.nrr = 0; // Default NRR to 0 if calculation results in NaN/Infinity
             }
             team.nrrDisplay = (team.nrr >= 0 ? '+' : '') + team.nrr.toFixed(3);
             return team;
        });

        // 6. Sort Standings: Points DESC, NRR DESC
        finalStandings.sort((a, b) => {
            if (b.points !== a.points) {
                return b.points - a.points; // Higher points first
            }
            // If points are equal, sort by NRR (higher is better)
            return b.nrr - a.nrr;
        });

        // 7. Add Position
        finalStandings.forEach((team, index) => {
            team.position = index + 1;
        });

        res.json(finalStandings);

    } catch (error) {
        console.error("Get Standings Error:", error);
        next(error);
    } finally {
        if (connection) connection.release();
    }
};




--- File: mpl-backend\controllers\admin\authController.js ---


// mpl-project/mpl-backend/controllers/admin/authController.js
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const pool = require('../../config/db');
require('dotenv').config();

// --- Helper Function ---
// Generates a JWT token containing the admin ID
const generateToken = (id) => {
    if (!process.env.JWT_SECRET) {
        console.error("FATAL ERROR: JWT_SECRET is not defined in .env file.");
        process.exit(1); // Exit if secret is missing
    }
    return jwt.sign({ id }, process.env.JWT_SECRET, {
        expiresIn: '30d', // Token validity period (e.g., 30 days)
    });
};


// --- Controller Functions ---

/**
 * @desc    Authenticate admin & get token
 * @route   POST /api/admin/auth/login
 * @access  Public
 */
/* exports.loginAdmin = async (req, res, next) => {
    const { username, password } = req.body;

    // Basic input validation
    if (!username || !password) {
        return res.status(400).json({ message: 'Please provide username and password' });
    }

    try {
        // Find admin by username in the database
        const [admins] = await pool.query('SELECT admin_id, username, email, password_hash FROM admins WHERE username = ?', [username]);

        // Check if admin exists
        if (admins.length === 0) {
             return res.status(401).json({ message: 'Invalid credentials' }); // Use generic message for security
        }

        const admin = admins[0];

        // Compare provided password with the stored hash
        const isMatch = await bcrypt.compare(password, admin.password_hash);

        if (isMatch) {
            // Passwords match - generate token and send response
            res.json({
                admin_id: admin.admin_id,
                username: admin.username,
                email: admin.email,
                token: generateToken(admin.admin_id), // Generate and include the JWT
            });
        } else {
            // Passwords don't match
            res.status(401).json({ message: 'Invalid credentials' }); // Generic message
        }
    } catch (error) {
        console.error('Admin Login Error:', error);
        next(error); // Pass error to the global error handler
    }
}; */

exports.loginAdmin = async (req, res, next) => {
    const { username, password } = req.body;
    console.log(`[Backend Login] Attempting login for username: ${username}`); // <-- ADD THIS

    if (!username || !password) {
        console.log("[Backend Login] Missing username or password."); // <-- ADD THIS
        return res.status(400).json({ message: 'Please provide username and password' });
    }

    try {
        const [admins] = await pool.query('SELECT admin_id, username, email, password_hash FROM admins WHERE username = ?', [username]);

        if (admins.length === 0) {
             console.log("[Backend Login] Admin user not found in DB."); // <-- ADD THIS
             return res.status(401).json({ message: 'Invalid credentials' }); // User not found
        }

        const admin = admins[0];
        console.log("[Backend Login] Admin found:", { id: admin.admin_id, user: admin.username }); // <-- ADD THIS
        console.log("[Backend Login] Comparing provided password with hash:", admin.password_hash); // <-- ADD THIS

        const isMatch = await bcrypt.compare(password, admin.password_hash);
        console.log("[Backend Login] Password comparison result (isMatch):", isMatch); // <-- ADD THIS

        if (isMatch) {
            console.log("[Backend Login] Password MATCH! Generating token."); // <-- ADD THIS
            res.json({
                admin_id: admin.admin_id,
                username: admin.username,
                email: admin.email,
                token: generateToken(admin.admin_id),
            });
        } else {
            console.log("[Backend Login] Password DOES NOT MATCH."); // <-- ADD THIS
            res.status(401).json({ message: 'Invalid credentials' }); // Password incorrect
        }
    } catch (error) {
        console.error('[Backend Login] Error during login process:', error); // <-- ADD THIS
        next(error); // Pass to global error handler
    }
};


/**
 * @desc    Register a new admin (Use with caution!)
 * @route   POST /api/admin/auth/register
 * @access  Protected / Development Only (adjust route access control)
 */
exports.registerAdmin = async (req, res, next) => {
    const { username, email, password } = req.body;

     // Input validation
     if (!username || !email || !password) {
        return res.status(400).json({ message: 'Please provide username, email, and password' });
    }
     if (password.length < 8) { // Enforce minimum password length
         return res.status(400).json({ message: 'Password must be at least 8 characters long' });
     }
     // Basic email format validation (can be more robust)
     if (!/\S+@\S+\.\S+/.test(email)) {
        return res.status(400).json({ message: 'Please provide a valid email address' });
    }

    try {
        // Check if username or email already exists
        const [existingAdmin] = await pool.query('SELECT admin_id FROM admins WHERE username = ? OR email = ?', [username, email]);
        if (existingAdmin.length > 0) {
            return res.status(400).json({ message: 'Admin with that username or email already exists' });
        }

        // Hash the password before storing
        const salt = await bcrypt.genSalt(10); // Standard salt rounds
        const password_hash = await bcrypt.hash(password, salt);

        // Insert the new admin into the database
        const [result] = await pool.query(
            'INSERT INTO Admins (username, email, password_hash) VALUES (?, ?, ?)',
            [username, email, password_hash]
        );

        const newAdminId = result.insertId;

        // Fetch the newly created admin's info (excluding hash)
        const [newAdmin] = await pool.query('SELECT admin_id, username, email FROM admins WHERE admin_id = ?', [newAdminId]);

        if (newAdmin.length > 0) {
             // Respond with new admin details and a token (log them in immediately)
             res.status(201).json({
                admin_id: newAdmin[0].admin_id,
                username: newAdmin[0].username,
                email: newAdmin[0].email,
                token: generateToken(newAdmin[0].admin_id)
            });
        } else {
             // Should not happen if insert succeeded, but handle defensively
             throw new Error('Failed to retrieve newly created admin after insertion.');
        }

    } catch (error) {
        console.error('Admin Registration Error:', error);
        // Handle specific database errors (like duplicate entry if check failed due to race condition)
        if (error.code === 'ER_DUP_ENTRY') {
            return res.status(400).json({ message: 'Admin with that username or email already exists.' });
        }
        next(error); // Pass other errors to global handler
    }
};




--- File: mpl-backend\controllers\admin\matchAdminController.js ---


// mpl-project/mpl-backend/controllers/admin/matchAdminController.js
const pool = require('../../config/db');

// Helper function to validate team IDs exist for a specific season
async function validateTeamsForSeason(teamIds, seasonId, connection) {
    // Ensure inputs are valid before proceeding
    if (!seasonId || isNaN(parseInt(seasonId))) {
        throw new Error('Invalid Season ID provided for team validation.');
    }
    if (!teamIds || !Array.isArray(teamIds) || teamIds.length === 0) {
        return true; // No teams to validate
    }

    // Filter out null/undefined/non-numeric IDs and get unique ones
    const uniqueTeamIds = [...new Set(teamIds
        .filter(id => id != null && !isNaN(parseInt(id)))
        .map(id => parseInt(id))
    )];

    if (uniqueTeamIds.length === 0) {
        return true; // Only invalid IDs were passed
    }

    const placeholders = uniqueTeamIds.map(() => '?').join(',');
    const sql = `SELECT COUNT(DISTINCT team_id) as count FROM teams WHERE season_id = ? AND team_id IN (${placeholders})`;
    const params = [parseInt(seasonId), ...uniqueTeamIds];

    // Use provided connection (if in transaction) or default pool
    const db = connection || pool;
    const [rows] = await db.query(sql, params);
    return rows[0].count === uniqueTeamIds.length;
}


// @desc    Create a new match schedule entry
// @route   POST /api/admin/matches
// @access  Admin
exports.createMatch = async (req, res, next) => {
    // Ensure required fields are present and have basic validity
    const { season_id, team1_id, team2_id, match_datetime, venue } = req.body;
    if (!season_id || !team1_id || !team2_id || !match_datetime) {
        return res.status(400).json({ message: 'Season ID, Team 1 ID, Team 2 ID, and Match Datetime are required.' });
    }
    if (isNaN(parseInt(season_id)) || isNaN(parseInt(team1_id)) || isNaN(parseInt(team2_id))) {
        return res.status(400).json({ message: 'Season ID and Team IDs must be valid numbers.' });
    }
    if (parseInt(team1_id) === parseInt(team2_id)) {
        return res.status(400).json({ message: 'Team 1 and Team 2 cannot be the same.' });
    }
    if (isNaN(new Date(match_datetime).getTime())) {
        return res.status(400).json({ message: 'Invalid Match Datetime format provided.' });
    }

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // Validate season exists
        const [seasonCheck] = await connection.query('SELECT 1 FROM seasons WHERE season_id = ?', [season_id]);
        if (seasonCheck.length === 0) {
            throw new Error(`Season with ID ${season_id} not found.`);
        }

        // Validate teams exist for this season
        const teamsValid = await validateTeamsForSeason([team1_id, team2_id], season_id, connection);
        if (!teamsValid) {
            throw new Error('One or both Team IDs are invalid or do not belong to the selected season.');
        }

        // Insert the match
        const [result] = await connection.query(
            `INSERT INTO Matches (season_id, team1_id, team2_id, match_datetime, venue, status)
             VALUES (?, ?, ?, ?, ?, 'Scheduled')`,
            [parseInt(season_id), parseInt(team1_id), parseInt(team2_id), match_datetime, venue || 'Metalworks Box Arena']
        );
        const newMatchId = result.insertId;

        await connection.commit();

        // Fetch the created match with team names to return it
        const [newMatch] = await pool.query(
             `SELECT m.*, t1.name as team1_name, t2.name as team2_name
              FROM matches m
              JOIN teams t1 ON m.team1_id = t1.team_id
              JOIN teams t2 ON m.team2_id = t2.team_id
              WHERE m.match_id = ?`, [newMatchId]);

        // Check if the fetch returned the match (it should)
        if (newMatch.length === 0) {
             console.error(`Consistency Error: Match ID ${newMatchId} created but could not be fetched immediately.`);
             // Still send success, but log the warning
             return res.status(201).json({ message: 'Match scheduled successfully, but failed to retrieve details immediately.', matchId: newMatchId });
        }

        res.status(201).json({ message: 'Match scheduled successfully', match: newMatch[0] });

    } catch (error) {
        await connection.rollback(); // Ensure rollback on error
        console.error("Create Match Controller Error:", error);
        // Pass a more specific error if possible, otherwise a generic one
        next(new Error(error.message || 'Database error occurred while scheduling match.'));
    } finally {
        connection.release(); // Ensure connection is always released
    }
};


// @desc    Get all matches (Admin view, can filter)
// @route   GET /api/admin/matches?season_id=X&status=Y&team_id=Z
// @access  Admin
exports.getAllMatches = async (req, res, next) => {
    const { season_id, status, team_id } = req.query;
     try {
        let query = `
            SELECT
                m.match_id, m.match_datetime, m.status, m.venue, m.result_summary,
                m.season_id, s.name as season_name,
                t1.name as team1_name, t1.team_id as team1_id,
                t2.name as team2_name, t2.team_id as team2_id,
                wt.name as winner_team_name,
                mom.name as man_of_the_match_name
            FROM matches m
            JOIN seasons s ON m.season_id = s.season_id
            JOIN teams t1 ON m.team1_id = t1.team_id
            JOIN teams t2 ON m.team2_id = t2.team_id
            LEFT JOIN teams wt ON m.winner_team_id = wt.team_id
            LEFT JOIN players mom ON m.man_of_the_match_player_id = mom.player_id
        `;
        const params = [];
        const conditions = [];

        if (season_id) {
             if (isNaN(parseInt(season_id))) return res.status(400).json({ message: 'Invalid Season ID format.' });
             conditions.push('m.season_id = ?'); params.push(parseInt(season_id));
        }
        if (status) {
             const allowedStatus = ['Scheduled', 'Setup', 'Live', 'Completed', 'Abandoned'];
             if (!allowedStatus.includes(status)) return res.status(400).json({ message: `Invalid status filter. Allowed: ${allowedStatus.join(', ')}` });
             conditions.push('m.status = ?'); params.push(status);
        }
        if (team_id) {
             if (isNaN(parseInt(team_id))) return res.status(400).json({ message: 'Invalid Team ID format.' });
             conditions.push('(m.team1_id = ? OR m.team2_id = ?)'); params.push(parseInt(team_id), parseInt(team_id));
        }

        if (conditions.length > 0) {
            query += ' WHERE ' + conditions.join(' AND ');
        }
        // Default ordering
        query += ' ORDER BY m.match_datetime ASC, m.match_id ASC';

        const [matches] = await pool.query(query, params);
        res.json(matches);
    } catch (error) {
        console.error("Get All Matches (Admin) Controller Error:", error);
        next(error); // Pass to global error handler
    }
};

// @desc    Get a single match by ID (Admin view)
// @route   GET /api/admin/matches/:id
// @access  Admin
 exports.getMatchById = async (req, res, next) => {
     const { id } = req.params;
     if (isNaN(parseInt(id))) {
         return res.status(400).json({ message: 'Invalid Match ID format.' });
     }
    try {
         let query = `
            SELECT m.*, s.name as season_name, t1.name as team1_name, t2.name as team2_name
            FROM matches m
            JOIN seasons s ON m.season_id = s.season_id
            JOIN teams t1 ON m.team1_id = t1.team_id
            JOIN teams t2 ON m.team2_id = t2.team_id
            WHERE m.match_id = ?`;
        const [matches] = await pool.query(query, [id]);

        if (matches.length === 0) {
            return res.status(404).json({ message: 'Match not found' });
        }
        res.json(matches[0]); // Send the found match details
    } catch (error) {
        console.error(`Get Match By ID (Admin) Controller Error for ID ${id}:`, error);
        next(error);
    }
 };


// @desc    Update a match schedule entry
// @route   PUT /api/admin/matches/:id
// @access  Admin
exports.updateMatch = async (req, res, next) => {
    const matchId = parseInt(req.params.id);
    if (isNaN(matchId)) {
        return res.status(400).json({ message: 'Invalid Match ID format.' });
    }

    const { team1_id, team2_id, match_datetime, venue, status } = req.body;

    // --- Input Validation ---
    const validFieldsProvided = [team1_id, team2_id, match_datetime, venue, status].some(f => f !== undefined);
    if (!validFieldsProvided) {
        return res.status(400).json({ message: 'No fields provided for update.' });
    }
    if (match_datetime && isNaN(new Date(match_datetime).getTime())) {
        return res.status(400).json({ message: 'Invalid Match Datetime format.' });
    }
    // Allow setting only 'Scheduled' or 'Abandoned' via this update route for safety
    const allowedStatusUpdates = ['Scheduled', 'Abandoned'];
    if (status !== undefined && !allowedStatusUpdates.includes(status)) {
        return res.status(400).json({ message: `Status can only be explicitly updated to: ${allowedStatusUpdates.join(', ')} via this route.` });
    }
    if (team1_id !== undefined && isNaN(parseInt(team1_id))) return res.status(400).json({ message: 'Invalid Team 1 ID format.' });
    if (team2_id !== undefined && isNaN(parseInt(team2_id))) return res.status(400).json({ message: 'Invalid Team 2 ID format.' });
    // --- End Input Validation ---

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // Fetch existing match for validation
        const [existingMatches] = await connection.query(
            'SELECT season_id, status, team1_id as current_team1, team2_id as current_team2 FROM matches WHERE match_id = ? FOR UPDATE',
            [matchId]
        );
        if (existingMatches.length === 0) {
            await connection.rollback();
            return res.status(404).json({ message: 'Match not found.' });
        }
        const { season_id, current_status, current_team1, current_team2 } = existingMatches[0];

        // --- Business Logic Validation ---
        if (current_status !== 'Scheduled' && (team1_id !== undefined || team2_id !== undefined || match_datetime !== undefined)) {
            await connection.rollback();
            return res.status(400).json({ message: `Cannot change teams or datetime for a match that is already '${current_status}'. You can only update venue or status (to Abandoned/Scheduled).` });
        }
        // --- End Business Logic Validation ---

        // Prepare fields to update and validate teams
        const fieldsToUpdate = {};
        const teamsToValidate = [];
        let finalTeam1 = current_team1;
        let finalTeam2 = current_team2;

        if (team1_id !== undefined) { fieldsToUpdate.team1_id = parseInt(team1_id); teamsToValidate.push(parseInt(team1_id)); finalTeam1 = parseInt(team1_id); }
        if (team2_id !== undefined) { fieldsToUpdate.team2_id = parseInt(team2_id); teamsToValidate.push(parseInt(team2_id)); finalTeam2 = parseInt(team2_id); }
        if (match_datetime !== undefined) fieldsToUpdate.match_datetime = match_datetime;
        if (venue !== undefined) fieldsToUpdate.venue = venue;
        if (status !== undefined) fieldsToUpdate.status = status;

        // Validate teams if any team ID was provided
        if (teamsToValidate.length > 0) {
             const teamsValid = await validateTeamsForSeason(teamsToValidate, season_id, connection);
             if (!teamsValid) {
                 throw new Error('One or both provided Team IDs are invalid for the match\'s season.');
             }
        }

        // Ensure final teams aren't the same
        if (finalTeam1 === finalTeam2) {
            throw new Error('Team 1 and Team 2 cannot be the same.');
        }

        // Proceed with update if there are fields to change
        if (Object.keys(fieldsToUpdate).length > 0) {
            const [result] = await connection.query('UPDATE Matches SET ? WHERE match_id = ?', [fieldsToUpdate, matchId]);
            if (result.changedRows === 0 && result.affectedRows > 0){
                 console.log(`Update Match ${matchId}: Data provided was same as existing data.`);
                 // Optionally return 304 Not Modified or proceed to fetch and return 200 OK
            } else if (result.affectedRows === 0) {
                 // This case is less likely if the FOR UPDATE select succeeded
                 console.warn(`Update Match ${matchId}: Affected rows was 0, potentially match ID gone?`);
            }
        } else {
            // This condition should ideally not be reached due to initial check, but as safeguard:
            await connection.rollback();
            return res.status(304).json({ message: 'No effective changes provided.' });
        }

        await connection.commit();

        // Fetch updated match data with team names to return
        const [updatedMatch] = await pool.query(
            `SELECT m.*, t1.name as team1_name, t2.name as team2_name
             FROM matches m
             JOIN teams t1 ON m.team1_id = t1.team_id
             JOIN teams t2 ON m.team2_id = t2.team_id
             WHERE m.match_id = ?`, [matchId]);

        res.json({ message: 'Match updated successfully', match: updatedMatch[0] });

    } catch (error) {
        await connection.rollback(); // Rollback on any error
        console.error(`Update Match ${matchId} Controller Error:`, error);
        next(new Error(error.message || 'Database error occurred while updating match.'));
    } finally {
        connection.release(); // Release connection
    }
};


// @desc    Delete a match schedule entry
// @route   DELETE /api/admin/matches/:id
// @access  Admin
exports.deleteMatch = async (req, res, next) => {
     const matchId = parseInt(req.params.id);
     if (isNaN(matchId)) {
         return res.status(400).json({ message: 'Invalid Match ID format.' });
     }

    const connection = await pool.getConnection();
    try {
         await connection.beginTransaction();

         // Check if match exists and its status before attempting delete
         const [existingMatches] = await connection.query('SELECT status FROM matches WHERE match_id = ? FOR UPDATE', [matchId]);
        if (existingMatches.length === 0) {
            await connection.rollback();
            return res.status(404).json({ message: 'Match not found.' });
        }

         // Business Rule: Only allow deleting 'Scheduled' matches
         const current_status = existingMatches[0].status;
         if (current_status !== 'Scheduled') {
             await connection.rollback();
             return res.status(400).json({ message: `Cannot delete match. Only 'Scheduled' matches can be deleted (current status: '${current_status}').` });
         }

        // Foreign keys to ballbyball and PlayerMatchStats should have ON DELETE CASCADE set in schema
        const [result] = await connection.query('DELETE FROM matches WHERE match_id = ?', [matchId]);

        if (result.affectedRows === 0) {
            // Should not happen if the SELECT FOR UPDATE found the row
            await connection.rollback();
            return res.status(404).json({ message: 'Match found but could not be deleted.' });
        }

        await connection.commit();
        res.status(200).json({ message: `Scheduled Match ID ${matchId} deleted successfully.` }); // Use 200 OK for successful delete

    } catch (error) {
         await connection.rollback();
         console.error(`Delete Match ${matchId} Controller Error:`, error);
         // Handle specific DB errors if necessary
         next(error);
    } finally {
        connection.release();
    }
};

// Add this new function to mpl-backend/controllers/admin/matchAdminController.js

/**
 * @desc    Manually resolve a match (e.g., Tiebreaker, Abandoned, Admin Decision)
 * @route   PUT /api/admin/matches/:id/resolve
 * @access  Admin
 */
exports.resolveMatch = async (req, res, next) => {
    const matchId = parseInt(req.params.id);
    const { winner_team_id, result_summary, status, man_of_the_match_player_id } = req.body;

    // Validation
    if (isNaN(matchId)) {
        return res.status(400).json({ message: 'Invalid Match ID.' });
    }
    // Status must be one of the final states allowed by admin resolution
    const allowedFinalStatus = ['Completed', 'Abandoned'];
    if (!status || !allowedFinalStatus.includes(status)) {
        return res.status(400).json({ message: `Resolution requires a final status: ${allowedFinalStatus.join(' or ')}.` });
    }
    if (status === 'Completed' && !result_summary) {
        return res.status(400).json({ message: 'Result summary is required when setting status to Completed.' });
    }
    // winner_team_id can be null (for Tie/Abandoned) or must be a number
    const winnerId = (winner_team_id === null || winner_team_id === '') ? null : parseInt(winner_team_id);
    if (winner_team_id !== null && winner_team_id !== '' && isNaN(winnerId)) {
         return res.status(400).json({ message: 'Invalid Winner Team ID format.' });
    }
    // MoM ID can be null or must be a number
    const momId = (man_of_the_match_player_id === null || man_of_the_match_player_id === '') ? null : parseInt(man_of_the_match_player_id);
     if (man_of_the_match_player_id !== null && man_of_the_match_player_id !== '' && isNaN(momId)) {
        return res.status(400).json({ message: 'Invalid Man of the Match Player ID format.' });
    }

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // 1. Fetch Match Details to validate winner/mom IDs if provided
        const [matches] = await connection.query(
            'SELECT team1_id, team2_id, season_id, status as current_status FROM matches WHERE match_id = ? FOR UPDATE',
            [matchId]
        );
        if (matches.length === 0) {
            throw new Error('Match not found.');
        }
        const { team1_id, team2_id, season_id, current_status } = matches[0];

        // Optional: Add check if current status allows resolution (e.g., prevent resolving already completed)
        // if (current_status === 'Completed' || current_status === 'Abandoned') {
        //     throw new Error(`Match is already in a final state (${current_status}). Cannot resolve again.`);
        // }

        // 2. Validate Winner Team ID (if provided) belongs to the match
        if (winnerId !== null && winnerId !== team1_id && winnerId !== team2_id) {
             throw new Error('Winner Team ID does not belong to this match.');
        }

        // 3. Validate MoM Player ID (if provided) exists and belongs to one of the teams in the season
        if (momId !== null) {
             const [momPlayerCheck] = await connection.query(
                `SELECT 1 FROM teamplayers tp
                 WHERE tp.player_id = ? AND tp.season_id = ? AND (tp.team_id = ? OR tp.team_id = ?)`,
                [momId, season_id, team1_id, team2_id]
             );
             if (momPlayerCheck.length === 0) {
                 throw new Error('Man of the Match Player ID is invalid or does not belong to either team in this season.');
             }
        }

        // 4. Update the Match record
        const summaryToSave = status === 'Abandoned' ? (result_summary || 'Match Abandoned') : result_summary;
        const winnerToSave = status === 'Abandoned' ? null : winnerId; // No winner if abandoned
        const momToSave = status === 'Abandoned' ? null : momId;       // No MoM if abandoned

        const [updateResult] = await connection.query(
            'UPDATE Matches SET status = ?, winner_team_id = ?, result_summary = ?, man_of_the_match_player_id = ? WHERE match_id = ?',
            [status, winnerToSave, summaryToSave, momToSave, matchId]
        );

        if (updateResult.affectedRows === 0) {
             // Should not happen if SELECT FOR UPDATE worked
             throw new Error('Match record could not be updated.');
        }

        await connection.commit();

        // Fetch updated record to return
        const [updatedMatch] = await connection.query('SELECT * FROM matches WHERE match_id = ?', [matchId]);

        // TODO: Optionally emit a socket event ('matchEnded' or 'matchResolved') ?
        // Depends if live viewers need to see this manual resolution instantly.

        res.status(200).json({ message: 'Match resolved successfully.', match: updatedMatch[0] });

    } catch (error) {
        await connection.rollback();
        console.error(`Error resolving match ${matchId}:`, error);
        const statusCode = error.message.includes('not found') ? 404 : (error.message.includes('invalid') || error.message.includes('required') || error.message.includes('does not belong')) ? 400 : 500;
        res.status(statusCode).json({ message: error.message || 'Failed to resolve match.' });
    } finally {
        if (connection) connection.release();
    }
};




--- File: mpl-backend\controllers\admin\scoringController.js ---


// mpl-project/mpl-backend/controllers/admin/scoringController.js
const pool = require('../../config/db');

// --- Helper functions (PLACEHOLDERS - Ensure you have actual implementations) ---
async function validateTeamsForSeason(teamIds, seasonId, connection) {
    // Example basic check, replace with your actual validation logic
    if (!seasonId || !Array.isArray(teamIds)) return false;
    console.log(`Placeholder validation for teams ${teamIds.join(',')} in season ${seasonId}`);
    return true; // Assume valid for now
}

function calculateNewOversDecimal(currentOversDecimal, isLegalDelivery) {
    // Example calculation, replace with your actual logic
    const completedOvers = Math.floor(currentOversDecimal);
    const ballsInCurrentOver = Math.round((currentOversDecimal - completedOvers) * 10);
    if (isLegalDelivery) {
        if (ballsInCurrentOver >= 5) { // Assume 6 balls per over
            return parseFloat(completedOvers + 1);
        } else {
            return parseFloat(`${completedOvers}.${ballsInCurrentOver + 1}`);
        }
    }
    return currentOversDecimal;
}

// --- NEW HELPER: Calculate Impact Points (Updated Logic) ---
/**
 * Calculates impact points based on the outcome of a single ball using the revised rules.
 * @param {object} ballData - Details of the ball event.
 * @returns {object} - Object containing points for batsman, bowler, fielder.
 */
function calculateImpactPoints(ballData) {
    const points = { batsman: 0, bowler: 0, fielder: 0 };
    // Destructure with default values for safety
    const { runs_scored = 0, is_extra = false, extra_type = null, extra_runs = 0, is_wicket = false, wicket_type = null, is_bye = false } = ballData;

    // Runs scored off the bat (excluding byes/leg-byes and non-NoBall extras)
    const runsOffBat = (!is_bye && !is_extra) ? runs_scored : ((!is_bye && is_extra && extra_type === 'NoBall') ? runs_scored : 0);
    // Runs conceded by the bowler (includes runs off bat on NB, and extra runs for NB/Wide, excludes byes)
    const runsConcededByBowler = (!is_bye ? runsOffBat : 0) + (is_extra ? (extra_runs || 0) : 0);

    // --- Batting Points (Applied only for legal deliveries where runs are scored off the bat) ---
    if (!is_extra && !is_bye) {
        if (runsOffBat === 0) {
            points.batsman = -0.5;
        } else if (runsOffBat === 1) {
            points.batsman = 1;
        } else if (runsOffBat === 2) {
            points.batsman = 3;
        } else if (runsOffBat === 4) {
            points.batsman = 6; // Changed from 7
        } else if (runsOffBat === 8) {
            points.batsman = 10; // Changed from 15 (Represents 4 runs in Super Over resulting in 8 actual runs)
        }
        // Add more conditions here if other run values (e.g., 6) have specific points
    }

    // --- Bowling Points (Byes are ignored) ---
    if (!is_bye) {
        if (runsConcededByBowler === 0) {
            if (!is_extra) { // Legal Dot Ball
                points.bowler = 1; // Changed from 2
            } else { // Extra (Wide/NoBall) that conceded 0 runs (e.g., wide not run)
                points.bowler = -0.5; // New Rule
            }
        } else if (runsConcededByBowler === 1) {
             if(!is_extra) { // 1 run conceded (legal)
                 points.bowler = 0; // No change
             } else { // 1 run conceded (extra - e.g. Wide run, NB run)
                 points.bowler = -1; // New Rule
             }
        } else if (runsConcededByBowler === 2) {
            points.bowler = -1; // Changed from -3
        } else if (runsConcededByBowler === 4) {
            points.bowler = -2; // Changed from -6
        } else if (runsConcededByBowler === 8) {
            points.bowler = -4; // Changed from -12
        } else if (runsConcededByBowler > 0 && is_extra) {
             // Catch-all for other run amounts conceded on extras, if any
             points.bowler = -1; // Apply the general -1 for extras with runs > 0 if specific value not matched
        }
        // Add other specific run values if needed (e.g., 6 runs conceded)
    }

    // Wicket points for bowler (excluding run outs)
    if (is_wicket && !['Run Out'].includes(wicket_type)) {
        points.bowler += 10; // Changed from 15
    }

    // --- Fielding Points ---
    if (is_wicket && (wicket_type === 'Caught' || wicket_type === 'Stumped')) {
        points.fielder = 5; // Changed from 4
    }
    // Add points for Run Outs for fielder if applicable

    return points;
}

// --- NEW HELPER: Calculate Impact Points ---
/**
 * Calculates impact points based on the outcome of a single ball.
 * @param {object} ballData - Details of the ball event.
 * @returns {object} - Object containing points for batsman, bowler, fielder.
 */

// --- End Helper Functions ---


// --- getMatchesForSetup (Includes Correct Logging) ---
/**
 * @desc    Get matches in 'Scheduled' status, ready for setup.
 * @route   GET /api/admin/scoring/setup-list
 * @access  Admin (Protected)
 */
exports.getMatchesForSetup = async (req, res, next) => {
    console.log('--- ENTERING getMatchesForSetup ---'); // Log Entry
    try {
        const query = `
            SELECT m.match_id, m.match_datetime, t1.name as team1_name, t2.name as team2_name, t1.team_id as team1_id, t2.team_id as team2_id
            FROM matches m
            JOIN teams t1 ON m.team1_id = t1.team_id
            JOIN teams t2 ON m.team2_id = t2.team_id
            WHERE m.status = 'Scheduled'
            ORDER BY m.match_datetime ASC
        `;
        console.log('--- Executing setup list query ---'); // Log Query Execution
        const [matches] = await pool.query(query);
        console.log(`--- Query finished, found ${matches.length} matches ---`); // Log Query Result
        res.json(matches);
        console.log('--- Response sent from getMatchesForSetup ---'); // Log Response Sent
    } catch (error) {
        console.error("Get Matches for Setup Error:", error); // Log Error Details
        console.log('--- Error in getMatchesForSetup, calling next() ---'); // Log Error Handling
        next(error);
    }
};

// --- submitMatchSetup ---
/**
 * @desc    Submit toss winner, decision, and super over number. Sets up player stats entries.
 * @route   POST /api/admin/scoring/matches/:matchId/setup
 * @access  Admin (Protected)
 */
exports.submitMatchSetup = async (req, res, next) => {
    const matchId = parseInt(req.params.matchId);
    const { toss_winner_team_id, decision, super_over_number } = req.body;

    // Validation
    if (isNaN(matchId)) return res.status(400).json({ message: 'Invalid Match ID.' });
    if (!toss_winner_team_id || isNaN(parseInt(toss_winner_team_id))) return res.status(400).json({ message: 'Valid Toss Winner Team ID is required.' });
    if (!decision || !['Bat', 'Bowl'].includes(decision)) return res.status(400).json({ message: 'Decision must be "Bat" or "Bowl".' });
    if (super_over_number == null || isNaN(parseInt(super_over_number)) || super_over_number < 1 || super_over_number > 5) return res.status(400).json({ message: 'Super Over number must be between 1 and 5.' });

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();
        console.log(`--- Starting Setup for Match ${matchId} ---`);

        // 1. Check Match Status & Get Details
        const [matchCheck] = await connection.query('SELECT status, team1_id, team2_id, season_id FROM matches WHERE match_id = ? FOR UPDATE', [matchId]);
        if (matchCheck.length === 0) throw new Error('Match not found.');
        if (matchCheck[0].status !== 'Scheduled') throw new Error(`Match cannot be set up. Current status: ${matchCheck[0].status}`);
        const { team1_id, team2_id, season_id } = matchCheck[0];

        // 2. Validate Toss Winner ID
        if (parseInt(toss_winner_team_id) !== team1_id && parseInt(toss_winner_team_id) !== team2_id) throw new Error('Toss winner ID does not match teams in the match.');

        // 3. Update Match Table
        console.log(`--- Updating Match ${matchId} status to Setup ---`);
        await connection.query(
            'UPDATE Matches SET status = ?, toss_winner_team_id = ?, decision = ?, super_over_number = ? WHERE match_id = ?',
            ['Setup', parseInt(toss_winner_team_id), decision, parseInt(super_over_number), matchId]
        );

        // 4. Create initial PlayerMatchStats entries
        console.log(`--- Fetching players for teams ${team1_id} and ${team2_id} ---`);
        const [team1Players] = await connection.query('SELECT player_id FROM teamplayers WHERE team_id = ? AND season_id = ?', [team1_id, season_id]);
        const [team2Players] = await connection.query('SELECT player_id FROM teamplayers WHERE team_id = ? AND season_id = ?', [team2_id, season_id]);
        const allPlayers = [
            ...team1Players.map(p => ({ player_id: p.player_id, team_id: team1_id })),
            ...team2Players.map(p => ({ player_id: p.player_id, team_id: team2_id }))
        ];

        if (allPlayers.length === 0) {
            console.warn(`Match ${matchId} setup: No players found assigned. Skipping PlayerMatchStats initialization.`);
        } else {
            console.log(`--- Initializing PlayerMatchStats for ${allPlayers.length} players ---`);
            const statsInsertPromises = allPlayers.map(p =>
                // MODIFIED: Add impact points initialized to 0
                connection.query('INSERT INTO PlayerMatchStats (match_id, player_id, team_id, batting_impact_points, bowling_impact_points, fielding_impact_points) VALUES (?, ?, ?, 0, 0, 0)', [matchId, p.player_id, p.team_id])
                    .catch(err => { if (err.code === 'ER_DUP_ENTRY') { console.warn(`PlayerMatchStats entry exists for match ${matchId}, player ${p.player_id}. Ignoring.`); return null; } throw err; })
            );
            await Promise.all(statsInsertPromises);
            console.log(`--- PlayerMatchStats initialization complete ---`);
        }

        // 5. Commit
        await connection.commit();
        console.log(`--- Match ${matchId} setup committed ---`);

        // 6. Prepare Initial State for Frontend/Sockets
        const fetchPlayerNames = async (playerIds) => { if (!playerIds || playerIds.length === 0) return []; const placeholders = playerIds.map(() => '?').join(','); const [names] = await pool.query(`SELECT player_id, name FROM players WHERE player_id IN (${placeholders})`, playerIds.map(p => p.player_id)); return names; };
        const battingTeamDbList = (decision === 'Bat' && toss_winner_team_id == team1_id) || (decision === 'Bowl' && toss_winner_team_id != team1_id) ? team1Players : team2Players;
        const bowlingTeamDbList = (decision === 'Bat' && toss_winner_team_id == team1_id) || (decision === 'Bowl' && toss_winner_team_id != team1_id) ? team2Players : team1Players;
        const battingTeamPlayerDetails = await fetchPlayerNames(battingTeamDbList);
        const bowlingTeamPlayerDetails = await fetchPlayerNames(bowlingTeamDbList);

        const initialState = {
            matchId: matchId, seasonId: season_id, status: 'Setup', inningNumber: 1,
            score: 0, wickets: 0, overs: 0, balls: 0, superOver: parseInt(super_over_number), target: null,
            battingTeamId: (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id),
            bowlingTeamId: (decision === 'Bowl') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id),
            playersBattingTeam: battingTeamPlayerDetails, playersBowlingTeam: bowlingTeamPlayerDetails,
            batsmenOutIds: [], bowlerStats: [],
            lastBallCommentary: "Match setup complete. Select opening players.", recentBallsSummary: "",
        };
        console.log(`--- Sending initial state for Match ${matchId} ---`);
        res.status(200).json({ message: 'Match setup successful. Ready for live scoring.', initialState });

    } catch (error) {
        await connection.rollback();
        console.error(`Error setting up match ${matchId}:`, error);
        const statusCode = error.message.includes('not found') ? 404 : (error.message.includes('already set up') || error.message.includes('Current status') || error.message.includes('does not match')) ? 400 : 500;
        res.status(statusCode).json({ message: error.message || 'Database error occurred during match setup.' });
    } finally {
        if (connection) connection.release();
    }
};

// --- NEW: getLiveMatchState ---
/**
 * @desc    Get the current detailed state of a match for resuming scoring or display.
 * @route   GET /api/admin/scoring/matches/:matchId/state
 * @access  Admin (Protected)
 */
exports.getLiveMatchState = async (req, res, next) => {
    const matchId = parseInt(req.params.matchId);
    if (isNaN(matchId)) return res.status(400).json({ message: 'Invalid Match ID.' });

    console.log(`--- ENTERING getLiveMatchState for Match ${matchId} ---`);

    try {
        // --- 1. Fetch Basic Match Details ---
        const [matches] = await pool.query('SELECT * FROM matches WHERE match_id = ?', [matchId]);
        if (matches.length === 0) {
            console.log(`--- getLiveMatchState: Match ${matchId} not found ---`);
            return res.status(404).json({ message: 'Match not found.' });
        }
        const match = matches[0];
        const { status, team1_id, team2_id, toss_winner_team_id, decision, season_id, super_over_number } = match;
        console.log(`--- getLiveMatchState: Match ${matchId} Status: ${status} ---`);

        // --- Handle simple statuses first (Scheduled, Abandoned) ---
        if (status === 'Scheduled' || status === 'Abandoned') {
            console.log(`--- getLiveMatchState: Returning minimal state for status ${status} ---`);
            const [team1Data] = await pool.query('SELECT name FROM teams WHERE team_id = ?', [team1_id]);
            const [team2Data] = await pool.query('SELECT name FROM teams WHERE team_id = ?', [team2_id]);
            return res.json({
                matchId: matchId, status: status, seasonId: season_id, superOver: super_over_number,
                team1_id: team1_id, team2_id: team2_id,
                team1_name: team1Data[0]?.name || `Team ${team1_id}`, team2_name: team2Data[0]?.name || `Team ${team2_id}`,
            });
        }

        // --- 2. Determine Current Inning & Teams (for Setup, Live, InningsBreak, Completed) ---
        
                let inningNumber = 1; // Default to 1

                if (status === 'InningsBreak' || status === 'Completed') {
                    // If the match status clearly indicates inning 2 has started or finished
                    inningNumber = 2;
                } else if (status === 'Live') {
                    // If live, check the inning of the last recorded ball
                    const [lastBall] = await pool.query('SELECT inning_number FROM ballbyball WHERE match_id = ? ORDER BY ball_id DESC LIMIT 1', [matchId]);
                    if (lastBall.length > 0) {
                        // Trust the inning number of the last ball bowled if status is Live
                        inningNumber = lastBall[0].inning_number;
                    } // If no last ball and Live, default inning 1 is correct
                } // If status is Setup, default inning 1 is correct
        
                // --- Determine batting/bowling teams based on the determined inningNumber ---
                let battingTeamId, bowlingTeamId;
                if (inningNumber === 1) { 
                    battingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id);
                    bowlingTeamId = (battingTeamId == team1_id) ? team2_id : team1_id; 
                }
                else { 
                    bowlingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id); 
                    battingTeamId = (bowlingTeamId == team1_id) ? team2_id : team1_id; 
                }
                console.log(`--- getLiveMatchState: Determined Inning=${inningNumber}, Batting=${battingTeamId}, Bowling=${bowlingTeamId} ---`);

        /*
        let inningNumber = 1;
        // Determine inning based on status and ball data
        if (status === 'InningsBreak' || status === 'Completed') {
            inningNumber = 2;
        } else if (status === 'Live') {
            const [lastBall] = await pool.query('SELECT inning_number FROM ballbyball WHERE match_id = ? ORDER BY ball_id DESC LIMIT 1', [matchId]);
            if (lastBall.length > 0) {
                inningNumber = lastBall[0].inning_number;
                // If last ball was inning 1, check if inning 1 should have ended
                if (inningNumber === 1) {
                    const maxWickets = 5; const maxOvers = 5;
                    const [inn1Stats] = await pool.query(`
                        SELECT
                            COUNT(CASE WHEN pms.is_out = TRUE THEN 1 END) as wickets,
                            MAX(b.over_number) as last_over_num,
                            (SELECT COUNT(*) FROM ballbyball b2 WHERE b2.match_id = ? AND b2.inning_number = 1 AND b2.over_number = MAX(b.over_number) AND (b2.is_extra = false OR b2.extra_type = 'NoBall')) as balls_in_last_over
                        FROM playermatchstats pms
                        LEFT JOIN ballbyball b ON pms.match_id = b.match_id AND pms.team_id = ? AND b.inning_number = 1
                        WHERE pms.match_id = ? AND pms.team_id = ?
                     `, [matchId, (decision === 'Bat' ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id)), matchId, (decision === 'Bat' ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id))]);

                    if (inn1Stats[0].wickets >= maxWickets || (inn1Stats[0].last_over_num === maxOvers && inn1Stats[0].balls_in_last_over >= 6)) {
                        console.warn(`Match ${matchId}: Status is Live, but Inning 1 seems complete based on DB. Setting inningNumber=2 for state recovery.`);
                        inningNumber = 2; // Correct state for processing
                    }
                }
            } else {
                inningNumber = 1; // Live but no balls bowled yet
            }
        } else if (status === 'Setup') {
            inningNumber = 1;
        }

        let battingTeamId, bowlingTeamId;
        if (inningNumber === 1) {
            battingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id);
            bowlingTeamId = (battingTeamId == team1_id) ? team2_id : team1_id;
        } else { // Inning 2 (or break/completed)
            bowlingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id);
            battingTeamId = (bowlingTeamId == team1_id) ? team2_id : team1_id;
        }
        console.log(`--- getLiveMatchState: Determined Inning=${inningNumber}, Batting=${battingTeamId}, Bowling=${bowlingTeamId} ---`);
        */
        // --- 3. Calculate Current Score, Wickets, Overs, Target ---
        const [summaryScoreData] = await pool.query(`SELECT SUM(runs_scored + extra_runs) as totalScore FROM ballbyball WHERE match_id = ? AND inning_number = ?`, [matchId, inningNumber]);
        const [summaryWicketData] = await pool.query(`SELECT COUNT(*) as totalWickets FROM playermatchstats WHERE match_id = ? AND team_id = ? AND is_out = TRUE`, [matchId, battingTeamId]);
        const score = summaryScoreData[0]?.totalScore || 0;
        const wickets = summaryWicketData[0]?.totalWickets || 0;

        // Calculate current overs/balls display (using corrected logic)
        const maxOvers = 5;
        let displayOver = 0;
        let displayBall = 0;
        const [overProgressData] = await pool.query(`
             SELECT over_number, COUNT(*) as legal_balls
             FROM ballbyball
             WHERE match_id = ? AND inning_number = ? AND (is_extra = false OR extra_type = 'NoBall')
             GROUP BY over_number ORDER BY over_number DESC LIMIT 1
         `, [matchId, inningNumber]);

        if (overProgressData.length > 0) {
            const lastLegalOverNum = overProgressData[0].over_number;
            const ballsInLastLegalOver = overProgressData[0].legal_balls;
            if (ballsInLastLegalOver >= 6) {
                displayOver = Math.min(maxOvers, lastLegalOverNum); // Show completed overs
                displayBall = 0;
            } else {
                displayOver = Math.min(maxOvers, lastLegalOverNum - 1); // Show previously completed
                displayBall = ballsInLastLegalOver;
            }
        } // If no legal balls, displayOver and displayBall remain 0

        // Handle end of innings display override
        if (status === 'InningsBreak' || status === 'Completed') {
            displayOver = maxOvers; // Show 5.0 at end of innings
            displayBall = 0;
        }
        console.log(`--- getLiveMatchState: Calculated Score=${score}/${wickets}, Overs=${displayOver}.${displayBall} ---`);

        let targetScore = null;
        if (inningNumber === 2 || status === 'InningsBreak' || status === 'Completed') {
            const [scoreDataInning1] = await pool.query(`SELECT SUM(runs_scored + extra_runs) as score FROM ballbyball WHERE match_id = ? AND inning_number = 1`, [matchId]);
            targetScore = Number((scoreDataInning1[0]?.score || 0)) + 1;
            console.log(`--- getLiveMatchState: Target Score = ${targetScore} ---`);
        }

        // --- 4. Fetch Player Lists, Out Batsmen, Bowler Stats ---
        const fetchPlayerNames = async (playerIds) => { if (!playerIds || playerIds.length === 0) return []; const placeholders = playerIds.map(() => '?').join(','); const [names] = await pool.query(`SELECT player_id, name FROM players WHERE player_id IN (${placeholders})`, playerIds.map(p => p.player_id || p)); return names; };
        const [team1PlayersDb] = await pool.query('SELECT player_id FROM teamplayers WHERE team_id = ? AND season_id = ?', [team1_id, season_id]);
        const [team2PlayersDb] = await pool.query('SELECT player_id FROM teamplayers WHERE team_id = ? AND season_id = ?', [team2_id, season_id]);
        const team1PlayerDetails = await fetchPlayerNames(team1PlayersDb);
        const team2PlayerDetails = await fetchPlayerNames(team2PlayersDb);
        const battingPlayersList = battingTeamId === team1_id ? team1PlayerDetails : team2PlayerDetails;
        const bowlingPlayersList = bowlingTeamId === team1_id ? team1PlayerDetails : team2PlayerDetails;

        const [batsmenOutStats] = await pool.query(`SELECT player_id FROM playermatchstats WHERE match_id = ? AND team_id = ? AND is_out = TRUE`, [matchId, battingTeamId]);
        const batsmenOutIds = batsmenOutStats.map(b => b.player_id);

        const [currentBowlerStats] = await pool.query(`SELECT player_id, FLOOR(overs_bowled) as completed_overs FROM playermatchstats WHERE match_id = ? AND team_id = ? AND overs_bowled > 0`, [matchId, bowlingTeamId]);
        console.log(`--- getLiveMatchState: Fetched ${batsmenOutIds.length} out batsmen, ${currentBowlerStats.length} bowlers with stats ---`);

        // --- 5. Fetch Recent Commentary ---
        const [recentCommentaryData] = await pool.query(`SELECT ball_id, commentary_text FROM ballbyball WHERE match_id = ? ORDER BY ball_id DESC LIMIT 10`, [matchId]);
        const recentBallsSummary = recentCommentaryData.length > 0 ? recentCommentaryData.slice().reverse().map(b => b.commentary_text?.split(':')[0] || '?').join(', ') : '';
        const lastBallCommentary = recentCommentaryData[0]?.commentary_text || (status === 'Setup' ? 'Match setup complete. Select opening players.' : 'No commentary yet.');
        console.log(`--- getLiveMatchState: Last commentary event: ${lastBallCommentary} ---`);

        // --- 6. Construct and Return State ---
        const fullLiveState = {
            matchId: matchId, status: status, inningNumber: inningNumber,
            score: score, wickets: wickets,
            overs: displayOver, balls: displayBall, target: targetScore, superOver: super_over_number,
            battingTeamId: battingTeamId, bowlingTeamId: bowlingTeamId,
            lastBallCommentary: lastBallCommentary, recentBallsSummary: recentBallsSummary,
            bowlerStats: currentBowlerStats, batsmenOutIds: batsmenOutIds,
            playersBattingTeam: battingPlayersList, playersBowlingTeam: bowlingPlayersList,
            seasonId: season_id,
            resultSummary: match.result_summary, winnerTeamId: match.winner_team_id
        };
        console.log(`--- getLiveMatchState: Sending full state for match ${matchId} ---`);
        res.json(fullLiveState);

    } catch (error) {
        console.error(`Error in getLiveMatchState for Match ${matchId}:`, error);
        next(error);
    }
};


// --- submitFinalMatchScore ---
/**
 * @desc    Manually submit final match score and details (optional)
 * @route   POST /api/admin/scoring/matches/:matchId/finalize
 * @access  Admin (Protected)
 */
exports.submitFinalMatchScore = async (req, res, next) => {
    const matchId = parseInt(req.params.matchId);
    const { winner_team_id, result_summary, man_of_the_match_player_id, playerStats } = req.body;

    if (isNaN(matchId)) return res.status(400).json({ message: 'Invalid Match ID.' });

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();
        console.log(`--- Starting Finalize for Match ${matchId} ---`);

        // Recalculate MoM if not provided in request // <<< INSERT/MODIFY THIS BLOCK
        let finalManOfTheMatchPlayerId = man_of_the_match_player_id || null; // Use provided if exists
        if (!finalManOfTheMatchPlayerId) {
            console.log(`--- MoM not provided for finalize, calculating... ---`);
            const [impactStats] = await connection.query(`SELECT player_id, team_id, (batting_impact_points + bowling_impact_points + fielding_impact_points) as total_impact FROM playermatchstats WHERE match_id = ? ORDER BY total_impact DESC`, [matchId]);
            if (impactStats.length > 0) {
                const highestImpact = impactStats[0].total_impact;
                let potentialMoms = impactStats.filter(p => p.total_impact === highestImpact);
                const currentWinnerId = winner_team_id || null; // Use the winner ID from the request
                if (currentWinnerId) {
                    const winningTeamMoms = potentialMoms.filter(p => p.team_id === currentWinnerId);
                    finalManOfTheMatchPlayerId = (winningTeamMoms.length > 0) ? winningTeamMoms[0].player_id : potentialMoms[0].player_id;
                    if(winningTeamMoms.length === 0) console.warn(`MoM Warning: No player from winning team (${currentWinnerId}) had the highest impact score (${highestImpact}). Awarding to highest overall.`);
                } else { // Tie
                    finalManOfTheMatchPlayerId = potentialMoms[0].player_id;
                }
                console.log(`--- Calculated MoM Player ID: ${finalManOfTheMatchPlayerId} ---`);
            } else { console.warn(`--- Could not calculate MoM for Match ${matchId}: No impact stats found. ---`); }
        }

        // 1. Update Match status, winner, result, MoM
        console.log(`--- Updating Match ${matchId} status to Completed ---`);
        await connection.query( 'UPDATE Matches SET status = ?, winner_team_id = ?, result_summary = ?, man_of_the_match_player_id = ? WHERE match_id = ?', ['Completed', winner_team_id || null, result_summary || null, finalManOfTheMatchPlayerId, matchId] ); 

        // 2. Update PlayerMatchStats
        if (playerStats && Array.isArray(playerStats)) {
            console.log(`--- Updating PlayerMatchStats for ${playerStats.length} players ---`);
            const updatePromises = playerStats.map(stat => {
                const { player_id, team_id, ...statsToUpdate } = stat;
                const numericFields = ['runs_scored', 'balls_faced', 'fours', 'sixes', 'wickets_taken', 'runs_conceded', 'overs_bowled', 'maidens', 'wides', 'no_balls', 'catches', 'stumps', 'run_outs'];
                numericFields.forEach(field => { statsToUpdate[field] = statsToUpdate[field] ?? 0; });
                statsToUpdate.is_out = statsToUpdate.is_out ?? false;
                statsToUpdate.how_out = statsToUpdate.how_out || null;
                return connection.query(
                    `INSERT INTO PlayerMatchStats (match_id, player_id, team_id, runs_scored, balls_faced, fours, sixes, is_out, how_out, wickets_taken, runs_conceded, overs_bowled, maidens, wides, no_balls, catches, stumps, run_outs)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                     ON DUPLICATE KEY UPDATE
                     runs_scored = VALUES(runs_scored), balls_faced = VALUES(balls_faced), fours = VALUES(fours), sixes = VALUES(sixes), is_out = VALUES(is_out), how_out = VALUES(how_out), wickets_taken = VALUES(wickets_taken), runs_conceded = VALUES(runs_conceded), overs_bowled = VALUES(overs_bowled), maidens = VALUES(maidens), wides = VALUES(wides), no_balls = VALUES(no_balls), catches = VALUES(catches), stumps = VALUES(stumps), run_outs = VALUES(run_outs)`,
                    [matchId, player_id, team_id, statsToUpdate.runs_scored, statsToUpdate.balls_faced, statsToUpdate.fours, statsToUpdate.sixes, statsToUpdate.is_out, statsToUpdate.how_out, statsToUpdate.wickets_taken, statsToUpdate.runs_conceded, statsToUpdate.overs_bowled, statsToUpdate.maidens, statsToUpdate.wides, statsToUpdate.no_balls, statsToUpdate.catches, statsToUpdate.stumps, statsToUpdate.run_outs]
                );
            });
            await Promise.all(updatePromises);
            console.log(`--- PlayerMatchStats updates complete ---`);
        }

        await connection.commit();
        console.log(`--- Match ${matchId} finalize committed ---`);

        // Emit final state via Socket.IO
        const io = req.app.get('io');
        const roomName = `match_${matchId}`;
        if (io) {
            // Re-fetch the final state to ensure consistency
            const finalState = await exports.getLiveMatchState({ params: { matchId } }, { json: () => { } }, () => { }); // Simulate req/res/next to call internally - needs adjustment if relying on req/res properties
            // A better approach: construct the final state manually here based on committed data
            // For now, just emit a basic ended event
            console.log(`[Backend Emit] Emitting 'matchEnded' to room: ${roomName}`);
            io.to(roomName).emit('matchEnded', { matchId: matchId, status: 'Completed', resultSummary: result_summary });
        }

        res.status(200).json({ message: 'Match finalized successfully.' });

    } catch (error) {
        await connection.rollback();
        console.error(`Error finalizing match ${matchId}:`, error);
        next(error);
    } finally {
        if (connection) connection.release();
    }
};


// --- scoreSingleBall (No changes needed from previous full version) ---
/**
 * @desc    Record details for a single ball bowled & update stats
 * @route   POST /api/admin/scoring/matches/:matchId/ball
 * @access  Admin (Protected)
 */
exports.scoreSingleBall = async (req, res, next) => {
    const matchId = parseInt(req.params.matchId);
    if (isNaN(matchId)) return res.status(400).json({ message: 'Invalid Match ID.' });
        // Batsman Selection Check ---
        if (!req.body.batsmanOnStrikePlayerId || isNaN(parseInt(req.body.batsmanOnStrikePlayerId))) {
            console.warn(`Score attempt for Match ${matchId} without a valid batsman selected.`);
            return res.status(400).json({ message: 'Please select the batsman on strike before recording the ball.' });
        }

    let { inningNumber, bowlerPlayerId, batsmanOnStrikePlayerId, runsScored, isExtra, extraType, extraRuns, isWicket, wicketType, fielderPlayerId, isBye } = req.body;
    console.log(`--- Received scoreSingleBall request for Match ${matchId}:`, req.body); // Log incoming data

    // --- Input Validation & Type Conversion ---
    inningNumber = parseInt(inningNumber); bowlerPlayerId = parseInt(bowlerPlayerId); batsmanOnStrikePlayerId = parseInt(batsmanOnStrikePlayerId);
    runsScored = parseInt(runsScored || 0); extraRuns = parseInt(extraRuns || 0); fielderPlayerId = fielderPlayerId ? parseInt(fielderPlayerId) : null;
    isExtra = !!isExtra; isWicket = !!isWicket; isBye = !!isBye;
    const allowedWicketTypes = ['Bowled', 'Caught', 'Stumped', 'Hit Outside', 'Hit Wicket'];
    if ([inningNumber, bowlerPlayerId, batsmanOnStrikePlayerId].some(val => isNaN(val))) return res.status(400).json({ message: 'Invalid numeric ID.' });
    if (isNaN(runsScored) || isNaN(extraRuns)) return res.status(400).json({ message: 'Invalid numeric runs/extras.' });
    if (isExtra && (!extraType || !['Wide', 'NoBall'].includes(extraType))) return res.status(400).json({ message: 'Valid Extra type required.' });
    if (isWicket && (!wicketType || !allowedWicketTypes.includes(wicketType))) return res.status(400).json({ message: `Wicket type required (${allowedWicketTypes.join(', ')}).` });
    if (wicketType === 'Hit Outside' && runsScored > 0) return res.status(400).json({ message: 'Runs must be 0 if out "Hit Outside".' });
    if ((wicketType === 'Caught' || wicketType === 'Stumped') && isWicket && (fielderPlayerId == null || isNaN(fielderPlayerId))) return res.status(400).json({ message: 'Fielder ID required for Caught/Stumped.' });
    if (isWicket && !['Caught', 'Stumped'].includes(wicketType) && fielderPlayerId != null) return res.status(400).json({ message: `Fielder ID not required for ${wicketType}.` });
    if (isBye && isExtra && extraType === 'Wide' && runsScored !== 1) return res.status(400).json({ message: 'Wide + Bye should have runsScored = 1.' });
    if (isBye && isExtra && extraType === 'NoBall' && runsScored !== 1) return res.status(400).json({ message: 'NoBall + Bye should have runsScored = 1.' });
    if (isBye && !isExtra && runsScored !== 1) return res.status(400).json({ message: 'Legal Bye must have runsScored = 1.' });
    if (isBye && isWicket) return res.status(400).json({ message: 'Cannot score Byes on a wicket.' });

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // --- 1. Fetch Match State & Determine Teams ---
        const [matches] = await connection.query('SELECT status, super_over_number, team1_id, team2_id, toss_winner_team_id, decision, season_id FROM matches WHERE match_id = ? FOR UPDATE', [matchId]);
        if (matches.length === 0) throw new Error('Match not found.');
        const match = matches[0];
        let currentStatus = match.status;
        let updatedStatus = currentStatus; // Will update if status changes
        let targetScore = null;
        let battingTeamId, bowlingTeamId;
        const { team1_id, team2_id, toss_winner_team_id, decision, season_id } = match;
        if (inningNumber == 1) { battingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id); bowlingTeamId = (battingTeamId == team1_id) ? team2_id : team1_id; }
        else { bowlingTeamId = (decision === 'Bat') ? toss_winner_team_id : (toss_winner_team_id == team1_id ? team2_id : team1_id); battingTeamId = (bowlingTeamId == team1_id) ? team2_id : team1_id; const [scoreData] = await connection.query(`SELECT SUM(runs_scored + extra_runs) as score FROM ballbyball WHERE match_id = ? AND inning_number = 1`, [matchId]); targetScore = Number((scoreData[0]?.score || 0)) + 1; }
        console.log(`--- Scoring Ball: Match ${matchId}, Inning ${inningNumber}, Status ${currentStatus}, Batting ${battingTeamId}, Bowling ${bowlingTeamId} ---`);

        // --- 2. Handle Status Transition & Validation ---
        let dbOverNumber = 1; let dbBallNumberInOver = 1; let logicalOver = 0; let logicalBallInOver = 0; let nextInningNumber = inningNumber;
        let previousOverBowlerId = null; // ADDED: Track the bowler of the last ball of the previous over

        if (currentStatus === 'Setup' && inningNumber == 1) { await connection.query("UPDATE Matches SET status = 'Live' WHERE match_id = ?", [matchId]); currentStatus = 'Live'; updatedStatus = 'Live'; console.log(`Match ${matchId}: Status -> Live (Inning 1 Start)`); }
        else if (currentStatus === 'InningsBreak' && inningNumber == 2) { await connection.query("UPDATE Matches SET status = 'Live' WHERE match_id = ?", [matchId]); currentStatus = 'Live'; updatedStatus = 'Live'; console.log(`Match ${matchId}: Status -> Live (Inning 2 Start). Target: ${targetScore}.`); }
        else if (currentStatus === 'Live') {
            const [batsmanOutCheck] = await connection.query(`SELECT 1 FROM playermatchstats WHERE match_id = ? AND player_id = ? AND team_id = ? AND is_out = TRUE`, [matchId, batsmanOnStrikePlayerId, battingTeamId]); if (batsmanOutCheck.length > 0) throw new Error(`Batsman ${batsmanOnStrikePlayerId} is already out.`);

            // --- Determine Over/Ball Sequence FIRST ---
            // We need dbOverNumber before checking bowler eligibility for the *new* over
            const [lastBallInfo] = await connection.query(`SELECT over_number, ball_number_in_over, bowler_player_id FROM ballbyball WHERE match_id = ? AND inning_number = ? ORDER BY ball_id DESC LIMIT 1`, [matchId, inningNumber]); // Fetch bowler_id too
            if (lastBallInfo.length > 0) {
                const lastBall = lastBallInfo[0];
                const [legalBallsData] = await connection.query(`SELECT COUNT(*) as count FROM ballbyball WHERE match_id = ? AND inning_number = ? AND over_number = ? AND (is_extra = false OR extra_type = 'NoBall')`, [matchId, inningNumber, lastBall.over_number]);
                const legalBallsInLastOverCount = legalBallsData[0]?.count || 0;
                dbBallNumberInOver = lastBall.ball_number_in_over + 1;
                if (legalBallsInLastOverCount >= 6) { // If starting a NEW over
                    dbOverNumber = lastBall.over_number + 1;
                    dbBallNumberInOver = 1;
                    logicalOver = lastBall.over_number;
                    logicalBallInOver = 0;
                    previousOverBowlerId = lastBall.bowler_player_id; // Store who bowled the previous over
                } else { // Continuing same over
                    dbOverNumber = lastBall.over_number;
                    logicalOver = lastBall.over_number - 1;
                    logicalBallInOver = legalBallsInLastOverCount;
                    // Keep previousOverBowlerId as null or fetch from the last ball of the *previous* over if needed
                }
            }
            // If no balls bowled yet, dbOverNumber remains 1, previousOverBowlerId remains null
            console.log(`--- Determined Sequence: DB Over=${dbOverNumber}, DB Ball=${dbBallNumberInOver}, Prev Over Bowler=${previousOverBowlerId} ---`);


            // --- Now perform Bowler Eligibility Checks ---
            const [bowlerOversData] = await connection.query(`SELECT player_id, FLOOR(overs_bowled) as completed_overs FROM playermatchstats WHERE match_id = ? AND team_id = ? AND overs_bowled > 0`, [matchId, bowlingTeamId]);
            let twoOverBowlerExists = false; let currentBowlerCompletedOvers = 0;
            let didCurrentBowlerBowlSuperOver = false; // ADDED: Check if current bowler bowled the super over

            bowlerOversData.forEach(b => {
                if (b.completed_overs >= 2) twoOverBowlerExists = true;
                if (b.player_id === bowlerPlayerId) {
                    currentBowlerCompletedOvers = b.completed_overs;
                    // Check if this bowler bowled the designated super over
                    // We need to query ballbyball again for this specific bowler and super over number
                    // This check is done after the loop for clarity
                }
            });

            // Check 1: Max 2 overs
            if (currentBowlerCompletedOvers >= 2) throw new Error(`Bowler ${bowlerPlayerId} has already completed 2 overs.`);
            // Check 2: Only one bowler can bowl 2 overs
            if (currentBowlerCompletedOvers >= 1 && twoOverBowlerExists && !bowlerOversData.find(b => b.player_id === bowlerPlayerId && b.completed_overs >= 2)) throw new Error(`Another bowler bowled 2 overs. Bowler ${bowlerPlayerId} can only bowl 1.`);

            // Check 3: Cannot bowl consecutive overs (only applies if starting a new over)
            if (dbBallNumberInOver === 1 && dbOverNumber > 1 && previousOverBowlerId === bowlerPlayerId) { // ADDED CHECK
                 throw new Error(`Bowler ${bowlerPlayerId} cannot bowl consecutive overs (bowled over ${dbOverNumber - 1}).`);
            }

            // Check 4: Super Over bowler limitation (only applies if they completed at least one over)
            // Fetch if this bowler bowled the super over
            const [superOverCheck] = await connection.query( // ADDED CHECK
                `SELECT 1 FROM ballbyball b
                 JOIN matches m ON b.match_id = m.match_id
                 WHERE b.match_id = ?
                   AND b.inning_number = ?
                   AND b.bowler_player_id = ?
                   AND b.over_number = m.super_over_number
                 LIMIT 1`, [matchId, inningNumber, bowlerPlayerId]
            );
            didCurrentBowlerBowlSuperOver = superOverCheck.length > 0;

            if (didCurrentBowlerBowlSuperOver && currentBowlerCompletedOvers >= 1) { // ADDED CHECK
                 throw new Error(`Bowler ${bowlerPlayerId} bowled the super over (over ${match.super_over_number}) and cannot bowl a second over.`);
            }
            // --- End Bowler Eligibility Checks ---

        } 
        
        else { 
            throw new Error(`Match scoring not allowed. Status: '${currentStatus}'.`); 
        }

        // --- 3. Calculate Runs & Legality ---
        let actualRunsOffBat = (!isBye && !isExtra) ? runsScored : ((!isBye && isExtra && extraType === 'NoBall') ? runsScored : 0); let isLegalDelivery = !(isExtra && extraType === 'Wide');
        let isSuperOverBall = dbOverNumber === match.super_over_number;
        if (isSuperOverBall && !isExtra && !isBye && actualRunsOffBat > 0) actualRunsOffBat *= 2;
        const runsForBowler = actualRunsOffBat + (parseInt(extraRuns) || 0);

        // --- 4. Generate Commentary ---
        let logicalBallDisplay = logicalBallInOver + (isLegalDelivery ? 1 : 0);
        if (logicalBallDisplay > 6) logicalBallDisplay = 1;
        let commentary = `${logicalOver}.${logicalBallDisplay}: Ball. `;
        if (isWicket) commentary += `WICKET! (${wicketType}).${fielderPlayerId ? ` Fielder: ${fielderPlayerId}.` : ''} `;
        if (isExtra) commentary += `${extraType}! +${extraRuns || 0}. `;
        if (!isExtra && !isBye && runsScored > 0) commentary += `${runsScored} run${runsScored !== 1 ? 's' : ''}${isSuperOverBall ? ' (Super Over!) - ' + actualRunsOffBat + ' runs' : ''}. `;
        if (isBye) commentary += `${runsScored} bye${runsScored !== 1 ? 's' : ''}. `;
        if (extraType === 'NoBall' && runsScored > 0 && !isBye) commentary += `(+${runsScored} off bat${isSuperOverBall ? ' Super Over! - ' + actualRunsOffBat + ' runs' : ''}). `;
        if (extraType === 'NoBall' && runsScored > 0 && isBye) commentary += `(+${runsScored} bye). `;
        if (isWicket && wicketType === 'Hit Outside') commentary = `${logicalOver}.${logicalBallDisplay}: Ball. WICKET! (Hit Outside). `;
        commentary = commentary.trim();

        // --- 5. Insert into ballbyball table ---
        const finalFielderId = (isWicket && ['Caught', 'Stumped'].includes(wicketType)) ? fielderPlayerId : null;
        console.log(`--- Inserting Ball: ${commentary} ---`);
        const [ballResult] = await connection.query(`INSERT INTO ballbyball (match_id, inning_number, over_number, ball_number_in_over, bowler_player_id, batsman_on_strike_player_id, runs_scored, is_bye, is_extra, extra_type, extra_runs, is_wicket, wicket_type, fielder_player_id, commentary_text) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`, [matchId, inningNumber, dbOverNumber, dbBallNumberInOver, bowlerPlayerId, batsmanOnStrikePlayerId, actualRunsOffBat, isBye || false, isExtra || false, extraType || null, parseInt(extraRuns || 0), isWicket || false, wicketType || null, finalFielderId, commentary]); const newBallId = ballResult.insertId;

        // --- 6. Calculate Impact Points --- 
        const impactPoints = calculateImpactPoints({ runs_scored: runsScored, is_extra: isExtra, extra_type: extraType, extra_runs: extraRuns, is_wicket: isWicket, wicket_type: wicketType, is_bye: isBye });
        console.log(`--- Impact Points for ball ${newBallId}: Bat=${impactPoints.batsman}, Bowl=${impactPoints.bowler}, Field=${impactPoints.fielder} ---`);

        // --- 7. Update PlayerMatchStats (MODIFIED for Impact Points) ---
        console.log(`--- Updating Stats: Batsman=${batsmanOnStrikePlayerId}, Bowler=${bowlerPlayerId}, Fielder=${finalFielderId || 'N/A'} ---`);
        // Update Batsman: Add batting_impact_points update
        await connection.query(`UPDATE PlayerMatchStats SET runs_scored = runs_scored + ?, balls_faced = balls_faced + ?, fours = fours + ?, sixes = sixes + ?, is_out = IF(? = TRUE, TRUE, is_out), how_out = IF(? = TRUE, ?, how_out), batting_impact_points = batting_impact_points + ? WHERE match_id = ? AND player_id = ?`,
        [actualRunsOffBat, isLegalDelivery ? 1 : 0, (runsScored == 4 && !isExtra && !isBye) ? 1 : 0, (runsScored == 6 && !isExtra && !isBye) ? 1 : 0, isWicket, isWicket, wicketType || null, impactPoints.batsman, matchId, batsmanOnStrikePlayerId]); // Added impactPoints.batsman
        
        // Update Bowler: Add bowling_impact_points update
        const [currentBowlerStatsData] = await connection.query('SELECT overs_bowled FROM playermatchstats WHERE match_id = ? AND player_id = ?', [matchId, bowlerPlayerId]); const currentOversDecimal = currentBowlerStatsData[0]?.overs_bowled || 0.0; const newOversDecimal = calculateNewOversDecimal(currentOversDecimal, isLegalDelivery);
        await connection.query(`UPDATE PlayerMatchStats SET overs_bowled = ?, runs_conceded = runs_conceded + ?, wickets_taken = wickets_taken + ?, wides = wides + ?, no_balls = no_balls + ?, maidens = maidens + ?, bowling_impact_points = bowling_impact_points + ? WHERE match_id = ? AND player_id = ?`,
        [newOversDecimal, runsForBowler, (isWicket && !['Run Out'].includes(wicketType)) ? 1 : 0, extraType === 'Wide' ? 1 : 0, extraType === 'NoBall' ? 1 : 0, 0 /* Maiden TBD */, impactPoints.bowler, matchId, bowlerPlayerId]); // Added impactPoints.bowler
        
        // Update Fielder: Add fielding_impact_points update
        if (finalFielderId && impactPoints.fielder !== 0) {
            await connection.query(`UPDATE PlayerMatchStats SET catches = catches + ?, stumps = stumps + ?, fielding_impact_points = fielding_impact_points + ? WHERE match_id = ? AND player_id = ?`,
            [wicketType === 'Caught' ? 1 : 0, wicketType === 'Stumped' ? 1 : 0, impactPoints.fielder, matchId, finalFielderId]); // Added impactPoints.fielder
        }

        // --- 8. Check for End of Innings/Match & Calculate MoM ---
        let matchCompleted = false; 
        let inningsEnded = false; 
        let resultSummary = null; 
        let winnerTeamId = null; 
        const maxOvers = 5; 
        const maxWickets = 5;
        const [progressInfo] = await connection.query(`SELECT COUNT(*) as wickets_this_inning FROM playermatchstats WHERE match_id = ? AND team_id = ? AND is_out = TRUE`, [matchId, battingTeamId]); const [legalBallsDataCurrent] = await connection.query(`SELECT COUNT(*) as count FROM ballbyball WHERE match_id = ? AND inning_number = ? AND over_number = ? AND (is_extra = false OR extra_type = 'NoBall')`, [matchId, inningNumber, dbOverNumber]);
        const totalWicketsThisInning = progressInfo[0].wickets_this_inning || 0; 
        const legalBallsThisOver = legalBallsDataCurrent[0].count || 0;
        let inningsEndReason = null; 
        if (totalWicketsThisInning >= maxWickets){
            inningsEndReason = `Wickets (${totalWicketsThisInning}/${maxWickets})`;
        }  
        else if (dbOverNumber > maxOvers || (dbOverNumber === maxOvers && legalBallsThisOver >= 6)){
            inningsEndReason = `Overs Completed (${maxOvers}.0)`;
            console.log("inningsEndReason", inningsEndReason)
        }
        let manOfTheMatchPlayerId = null;


        if (inningsEndReason) {
            inningsEnded = true; commentary += ` INNINGS END (${inningsEndReason}).`;
            if (inningNumber === 1) { updatedStatus = 'InningsBreak'; nextInningNumber = 2; console.log(`Match ${matchId}: Innings 1 ended. Status -> InningsBreak`); }
            else { // Innings 2 ended
                matchCompleted = true; updatedStatus = 'Completed';


                // Calculate winner/result
                const [finalScores] = await connection.query(`SELECT inning_number, SUM(runs_scored + extra_runs) as total_score FROM ballbyball WHERE match_id = ? GROUP BY inning_number ORDER BY inning_number`, [matchId]); const inn1Score = finalScores.find(s => s.inning_number === 1)?.total_score || 0; const inn2Score = finalScores.find(s => s.inning_number === 2)?.total_score || 0;
                if (inn2Score >= targetScore) 
                    { 
                        winnerTeamId = battingTeamId; 
                        winnerTeamName = winnerTeamId;
                        try {
                            const [t1] = await connection.query('SELECT name FROM teams WHERE team_id = ?', [winnerTeamId]);
                            if (t1.length > 0) winnerTeamName = t1[0].name;
                            
                        } catch (nameError) {
                            console.error("Error fetching team names for result summary:", nameError);
                            // Continue with IDs if names can't be fetched
                        }
                        resultSummary = `Team ${winnerTeamName} won by ${maxWickets - totalWicketsThisInning} wickets.`; 
                    }
                else if (inn2Score < inn1Score) 
                    { 
                        winnerTeamId = bowlingTeamId; 
                        winnerTeamName = winnerTeamId;
                        try {
                            const [t1] = await connection.query('SELECT name FROM teams WHERE team_id = ?', [winnerTeamId]);
                            if (t1.length > 0) winnerTeamName = t1[0].name;
                            
                        } catch (nameError) {
                            console.error("Error fetching team names for result summary:", nameError);
                            // Continue with IDs if names can't be fetched
                        }
                        resultSummary = `${winnerTeamName} won by ${inn1Score - inn2Score} runs.`; 
                    }
                else 
                { 
                    resultSummary = 'Match Tied.'; winnerTeamId = null; 
                } 
                console.log(`Match ${matchId}: Innings 2 ended. Status -> Completed. Result: ${resultSummary}`);
            }
        } else if (inningNumber === 2 && targetScore !== null) {
            const [currentInningScoreData] = await connection.query(`SELECT SUM(runs_scored + extra_runs) as score FROM ballbyball WHERE match_id = ? AND inning_number = 2`, [matchId]); const currentInningScore = currentInningScoreData[0]?.score || 0;
            if (currentInningScore >= targetScore) { inningsEnded = true; matchCompleted = true; updatedStatus = 'Completed'; winnerTeamId = battingTeamId; resultSummary = `Team ${battingTeamId} won by ${maxWickets - totalWicketsThisInning} wickets.`; commentary += ` TARGET ACHIEVED.`; console.log(`Match ${matchId}: Target achieved. Status -> Completed. Result: ${resultSummary}`); }
        }

        // --- Calculate MoM IF Match Completed --- // <<< INSERT THIS BLOCK
        if (matchCompleted) {
            console.log(`--- Match ${matchId} Completed. Calculating Man of the Match ---`);
            const [impactStats] = await connection.query(`
                SELECT player_id, team_id, (batting_impact_points + bowling_impact_points + fielding_impact_points) as total_impact
                FROM playermatchstats WHERE match_id = ? ORDER BY total_impact DESC
            `, [matchId]);
            if (impactStats.length > 0) {
                const highestImpact = impactStats[0].total_impact;
                let potentialMoms = impactStats.filter(p => p.total_impact === highestImpact);
                if (winnerTeamId) {
                    const winningTeamMoms = potentialMoms.filter(p => p.team_id === winnerTeamId);
                    manOfTheMatchPlayerId = (winningTeamMoms.length > 0) ? winningTeamMoms[0].player_id : potentialMoms[0].player_id;
                    if(winningTeamMoms.length === 0) console.warn(`MoM Warning: No player from winning team (${winnerTeamId}) had highest impact (${highestImpact}). Awarding highest overall.`);
                } else { // Tie
                    manOfTheMatchPlayerId = potentialMoms[0].player_id;
                }
                console.log(`--- Calculated MoM Player ID: ${manOfTheMatchPlayerId} ---`);
            } else { console.warn(`--- Could not calculate MoM for Match ${matchId}: No impact stats found. ---`); }
        }
        // --- End MoM Calculation ---

        // Update Match table (MODIFIED to include MoM)
        if (updatedStatus !== currentStatus || matchCompleted) {
            await connection.query("UPDATE Matches SET status = ?, winner_team_id = ?, result_summary = ?, man_of_the_match_player_id = ? WHERE match_id = ?",
                [updatedStatus, winnerTeamId, resultSummary, manOfTheMatchPlayerId, matchId]); // Added manOfTheMatchPlayerId
        }
        if(inningsEnded || matchCompleted) { await connection.query("UPDATE ballbyball SET commentary_text = ? WHERE ball_id = ?", [commentary.trim(), newBallId]); }
        // --- 8. Commit Transaction ---
        await connection.commit();
        console.log(`--- Ball ${newBallId} scoring committed ---`);

        // --- 9. Prepare FULL State for Socket Emission ---
        // Re-fetch the state after commit to ensure consistency
        const stateResponse = await exports.getLiveMatchState({ params: { matchId } }, { json: (data) => data }, () => { }); // Use internal call or refetch logic
        const fullLiveState = stateResponse; // Assuming getLiveMatchState returns the needed state directly
        if (!fullLiveState || !fullLiveState.status) {
            console.error(`!!! Failed to retrieve consistent state after scoring ball ${newBallId} for match ${matchId} !!!`);
            // Handle error - maybe emit old state or an error state?
            // For now, we'll proceed but log the issue.
        } else {
            console.log(`--- Prepared state for emission after ball ${newBallId} ---`);
        }


        // --- 10. Emit update via Socket.IO ---
        const roomName = `match_${matchId}`;
        const io = req.app.get('io');
        console.log(`[Backend Emit] Attempting to emit 'updateScore' to room: ${roomName}`);
        // console.log('[Backend Emit] State being emitted:', JSON.stringify(fullLiveState, null, 2)); // Already logged in getLiveMatchState if called

        if (io && fullLiveState) { // Check if state was retrieved
            io.to(roomName).emit('updateScore', fullLiveState);
            if (updatedStatus === 'InningsBreak' && currentStatus !== 'InningsBreak') io.to(roomName).emit('inningsBreak', fullLiveState);
            if (updatedStatus === 'Completed' && currentStatus !== 'Completed') io.to(roomName).emit('matchEnded', fullLiveState);
            console.log(`[Backend Emit] Successfully emitted 'updateScore' for match ${matchId}.`);
        } else if (!io) {
            console.error("[Backend Emit] Socket.IO instance not found. Emission failed!");
        } else if (!fullLiveState) {
            console.error(`[Backend Emit] Failed to get consistent state. Emission skipped!`);
        }

        res.status(201).json({ message: 'Ball scored successfully', ballId: newBallId, newState: fullLiveState || {} }); // Return fetched state

    } catch (error) {
        await connection.rollback();
        console.error(`Error scoring ball for Match ${matchId}:`, error);
        const statusCode = error.message.includes('not found') ? 404 : (error.message.includes('invalid') || error.message.includes('allowed') || error.message.includes('required') || error.message.includes('must be') || error.message.includes('quota') || error.message.includes('already out') || error.message.includes('Toss winner ID') || error.message.includes('Decision must be') || error.message.includes('cannot bowl') || error.message.includes('already completed') || error.message.includes('Fielder ID required')) ? 400 : 500;
        const io = req.app.get('io'); const roomName = `match_${matchId}`; if (io) io.to(roomName).emit('scoringError', { message: error.message || 'Scoring error occurred.' });
        res.status(statusCode).json({ message: error.message || 'Database error occurred.' });
    } finally {
        if (connection) connection.release();
    }
};


// --- undoLastBall (No changes needed from previous full version) ---
/**
 * @desc    Undo the last recorded ball event for a match.
 * @route   DELETE /api/admin/scoring/matches/:matchId/ball/last
 * @access  Admin (Protected)
 */
exports.undoLastBall = async (req, res, next) => {
    const matchId = parseInt(req.params.matchId);
    if (isNaN(matchId)) return res.status(400).json({ message: 'Invalid Match ID.' });

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();
        console.log(`--- Starting UNDO for Match ${matchId} ---`);

        // 1. Find the last ball record
        const [lastBallArr] = await connection.query(`SELECT * FROM ballbyball WHERE match_id = ? ORDER BY ball_id DESC LIMIT 1 FOR UPDATE`, [matchId]);
        if (lastBallArr.length === 0) throw new Error('No balls recorded yet to undo.');
        const lastBall = lastBallArr[0];
        const { ball_id, inningNumber, over_number, bowler_player_id, batsman_on_strike_player_id, runs_scored, is_bye, is_extra, extra_type, extra_runs, is_wicket, wicket_type, fielder_player_id } = lastBall;
        const isExtra = is_extra;
        const extraType = extra_type;
        const extraRuns = extra_runs;
        const isWicket = is_wicket;
        const wicketType = wicket_type;
        const isBye = is_bye;
        console.log(`--- Undoing Ball ID: ${ball_id}, Inning: ${inningNumber}, Over: ${over_number} ---`);

        // 2. Fetch Match state & details
        const [matches] = await connection.query('SELECT status, team1_id, team2_id, toss_winner_team_id, decision, season_id, winner_team_id, result_summary, super_over_number FROM matches WHERE match_id = ? FOR UPDATE', [matchId]);
        if (matches.length === 0) throw new Error('Match not found.');
        const match = matches[0];
        let currentStatus = match.status;
        if (!['Live', 'InningsBreak', 'Completed'].includes(currentStatus)) throw new Error(`Cannot undo ball. Match status is '${currentStatus}'.`);

        // Determine batting/bowling team
        let battingTeamId, bowlingTeamId;
        if (inningNumber == 1) { battingTeamId = (match.decision === 'Bat') ? match.toss_winner_team_id : (match.toss_winner_team_id == match.team1_id ? match.team2_id : match.team1_id); bowlingTeamId = (battingTeamId == match.team1_id) ? match.team2_id : match.team1_id; }
        else { bowlingTeamId = (match.decision === 'Bat') ? match.toss_winner_team_id : (match.toss_winner_team_id == match.team1_id ? match.team2_id : match.team1_id); battingTeamId = (bowlingTeamId == match.team1_id) ? match.team2_id : match.team1_id; }
        console.log(`--- Undo Context: Batting=${battingTeamId}, Bowling=${bowlingTeamId} ---`);

        // Calculate Impact Points to Reverse // <<< INSERT THIS BLOCK
        const impactPointsToReverse = calculateImpactPoints({ runs_scored: lastBall.runs_scored, is_extra: lastBall.is_extra, extra_type: lastBall.extra_type, extra_runs: lastBall.extra_runs, is_wicket: lastBall.is_wicket, wicket_type: lastBall.wicket_type, is_bye: lastBall.is_bye });
        console.log(`--- Reversing Impact: Bat=${impactPointsToReverse.batsman}, Bowl=${impactPointsToReverse.bowler}, Field=${impactPointsToReverse.fielder} ---`);

         // Revert Batsman: Subtract batting_impact_points
         await connection.query(`UPDATE PlayerMatchStats SET runs_scored = GREATEST(0, runs_scored - ?), balls_faced = GREATEST(0, balls_faced - ?), fours = GREATEST(0, fours - ?), sixes = GREATEST(0, sixes - ?), is_out = IF(? = TRUE AND how_out = ?, FALSE, is_out), how_out = IF(? = TRUE AND how_out = ?, NULL, how_out), batting_impact_points = batting_impact_points - ? WHERE match_id = ? AND player_id = ?`,
             [actualRunsOffBat, isLegalDelivery ? 1 : 0, (lastBall.runs_scored == 4 && !lastBall.is_extra && !lastBall.is_bye) ? 1 : 0, (lastBall.runs_scored == 6 && !lastBall.is_extra && !lastBall.is_bye) ? 1 : 0, lastBall.is_wicket, lastBall.wicket_type, lastBall.is_wicket, lastBall.wicket_type, impactPointsToReverse.batsman, matchId, lastBall.batsman_on_strike_player_id ]); // Subtracted impact

         // Revert Bowler: Subtract bowling_impact_points
         // ... (calculate previousOversDecimal as before) ...
         await connection.query(`UPDATE PlayerMatchStats SET overs_bowled = ?, runs_conceded = GREATEST(0, runs_conceded - ?), wickets_taken = GREATEST(0, wickets_taken - ?), wides = GREATEST(0, wides - ?), no_balls = GREATEST(0, no_balls - ?), bowling_impact_points = bowling_impact_points - ? WHERE match_id = ? AND player_id = ?`,
             [Math.max(0, previousOversDecimal), runsForBowler, (lastBall.is_wicket && !['Run Out'].includes(lastBall.wicket_type)) ? 1 : 0, lastBall.extra_type === 'Wide' ? 1 : 0, lastBall.extra_type === 'NoBall' ? 1 : 0, impactPointsToReverse.bowler, matchId, lastBall.bowler_player_id]); // Subtracted impact

         // Revert Fielder: Subtract fielding_impact_points
         if (lastBall.is_wicket && fielder_player_id && impactPointsToReverse.fielder !== 0) {
             await connection.query(`UPDATE PlayerMatchStats SET catches = GREATEST(0, catches - ?), stumps = GREATEST(0, stumps - ?), fielding_impact_points = fielding_impact_points - ? WHERE match_id = ? AND player_id = ?`,
                [lastBall.wicket_type === 'Caught' ? 1 : 0, lastBall.wicket_type === 'Stumped' ? 1 : 0, impactPointsToReverse.fielder, matchId, fielder_player_id]); // Subtracted impact
         }

        // --- 3. Reverse PlayerMatchStats changes ---
        console.log(`--- Reverting Player Stats ---`);
        let isLegalDelivery = !(isExtra && extraType === 'Wide');
        let actualRunsOffBat = (!isBye && !isExtra) ? runs_scored : ((!isBye && isExtra && extraType === 'NoBall') ? runs_scored : 0);
        let isSuperOverBall = over_number === match.super_over_number;
        if (isSuperOverBall && !isExtra && !isBye && actualRunsOffBat > 0) actualRunsOffBat /= 2; // Revert double runs
        const runsForBowler = actualRunsOffBat + (parseInt(extraRuns) || 0);
        // Revert Batsman
        await connection.query(`UPDATE PlayerMatchStats SET runs_scored = GREATEST(0, runs_scored - ?), balls_faced = GREATEST(0, balls_faced - ?), fours = GREATEST(0, fours - ?), sixes = GREATEST(0, sixes - ?), is_out = IF(? = TRUE AND how_out = ?, FALSE, is_out), how_out = IF(? = TRUE AND how_out = ?, NULL, how_out) WHERE match_id = ? AND player_id = ?`, [actualRunsOffBat, isLegalDelivery ? 1 : 0, (runs_scored == 4 && !isExtra && !isBye) ? 1 : 0, (runs_scored == 6 && !isExtra && !isBye) ? 1 : 0, isWicket, wicketType, isWicket, wicketType, matchId, batsman_on_strike_player_id]);
        // Revert Bowler (using accurate reversal logic)
        const [bowlerStatsData] = await connection.query('SELECT overs_bowled FROM playermatchstats WHERE match_id = ? AND player_id = ?', [matchId, bowler_player_id]);
        const currentOversDecimal = bowlerStatsData.length > 0 ? (bowlerStatsData[0].overs_bowled || 0) : 0;
        let previousOversDecimal = currentOversDecimal; if (isLegalDelivery && currentOversDecimal > 0) { const currentOvers = Math.floor(currentOversDecimal); const currentBalls = Math.round((currentOversDecimal - currentOvers) * 10); if (currentBalls === 1 && currentOvers > 0) { previousOversDecimal = parseFloat(`${currentOvers - 1}.5`); } else if (currentBalls > 0) { previousOversDecimal = parseFloat(`${currentOvers}.${currentBalls - 1}`); } else { /* Edge case 0.0 remains 0.0 */ previousOversDecimal = 0.0; } }
        await connection.query(`UPDATE PlayerMatchStats SET overs_bowled = ?, runs_conceded = GREATEST(0, runs_conceded - ?), wickets_taken = GREATEST(0, wickets_taken - ?), wides = GREATEST(0, wides - ?), no_balls = GREATEST(0, no_balls - ?) WHERE match_id = ? AND player_id = ?`, [Math.max(0, previousOversDecimal), runsForBowler, (isWicket && !['Run Out'].includes(wicketType)) ? 1 : 0, extraType === 'Wide' ? 1 : 0, extraType === 'NoBall' ? 1 : 0, matchId, bowler_player_id]);
        // Revert Fielder
        if (isWicket && fielder_player_id) { await connection.query(`UPDATE PlayerMatchStats SET catches = GREATEST(0, catches - ?), stumps = GREATEST(0, stumps - ?) WHERE match_id = ? AND player_id = ?`, [wicketType === 'Caught' ? 1 : 0, wicketType === 'Stumped' ? 1 : 0, matchId, fielder_player_id]); }
        console.log(`--- Player Stats Reverted ---`);

        // --- 4. Delete the last ballbyball record ---
        console.log(`--- Deleting Ball ID: ${ball_id} ---`);
        await connection.query("DELETE FROM ballbyball WHERE ball_id = ?", [ball_id]);

        // --- 5. Revert Match Status if necessary ---
        let newStatus = currentStatus; let revertStatus = false; const maxOvers = 5; const maxWickets = 5;
        const [prevProgressInfo] = await connection.query(`SELECT COUNT(*) as wickets_this_inning FROM playermatchstats WHERE match_id = ? AND team_id = ? AND is_out = TRUE`, [matchId, battingTeamId]);
        const [prevOverProgress] = await pool.query(`SELECT over_number, COUNT(*) as legal_balls FROM ballbyball WHERE match_id = ? AND inning_number = ? AND (is_extra = false OR extra_type = 'NoBall') GROUP BY over_number ORDER BY over_number DESC LIMIT 1`, [matchId, inningNumber]);
        const prevLastLegalOverNum = prevOverProgress[0]?.over_number || 0;
        const ballsInPrevLastLegalOver = prevOverProgress[0]?.legal_balls || 0;

        let prevInningsEndReason = null;
        if ((prevProgressInfo[0].wickets_this_inning || 0) >= maxWickets) prevInningsEndReason = 'Wickets';
        else if (prevLastLegalOverNum > maxOvers || (prevLastLegalOverNum === maxOvers && ballsInPrevLastLegalOver >= 6)) prevInningsEndReason = 'Overs Completed';

        if (currentStatus === 'InningsBreak' && inningNumber === 1 && !prevInningsEndReason) { revertStatus = true; }
        else if (currentStatus === 'Completed' && inningNumber === 2) {
            let wasTargetAchievedBefore = false;
            if (!prevInningsEndReason) { // Check target achievement only if innings didn't end for other reasons
                const [prevInn2ScoreData] = await connection.query(`SELECT SUM(runs_scored + extra_runs) as score FROM ballbyball WHERE match_id = ? AND inning_number = 2`, [matchId]); // Score AFTER deleting ball
                const prevInn2Score = prevInn2ScoreData[0]?.score || 0;
                const [inn1ScoreData] = await connection.query(`SELECT SUM(runs_scored + extra_runs) as score FROM ballbyball WHERE match_id = ? AND inning_number = 1`, [matchId]);
                const targetScore = Number((inn1ScoreData[0]?.score || 0)) + 1;
                wasTargetAchievedBefore = prevInn2Score >= targetScore;
            }
            if (!prevInningsEndReason && !wasTargetAchievedBefore) { revertStatus = true; }
        }

        //if (revertStatus) { newStatus = 'Live'; console.log(`--- Reverting Match Status from ${currentStatus} to Live ---`); await connection.query("UPDATE Matches SET status = 'Live', winner_team_id = NULL, result_summary = NULL, man_of_the_match_player_id = NULL WHERE match_id = ?", [matchId]); }

        if (revertStatus) {
            newStatus = 'Live'; console.log(`--- Reverting Match Status from ${currentStatus} to Live ---`);
            // set MoM to NULL as well
            await connection.query("UPDATE Matches SET status = 'Live', winner_team_id = NULL, result_summary = NULL, man_of_the_match_player_id = NULL WHERE match_id = ?", [matchId]);
        }

        
        // --- 6. Commit Transaction ---
        await connection.commit();
        console.log(`--- Undo for Ball ID ${ball_id} committed ---`);

        // --- 7. Fetch and Emit the NEW Corrected State ---
        console.log(`--- Fetching corrected state after undo ---`);
        // Use internal call/refetch logic
        const stateResponse = await exports.getLiveMatchState({ params: { matchId } }, { json: (data) => data }, () => { });
        const correctedState = stateResponse;

        if (!correctedState || !correctedState.status) {
            console.error(`!!! Failed to retrieve consistent state after undoing ball ${ball_id} for match ${matchId} !!!`);
        }

        const io = req.app.get('io');
        if (io && correctedState) { const roomName = `match_${matchId}`; io.to(roomName).emit('updateScore', correctedState); console.log(`[Backend Emit] Emitted corrected state for match ${matchId} after undo.`); }
        else if (!io) { console.error("[Backend Emit] Socket.IO instance not found after undo. Emission failed!"); }
        else if (!correctedState) { console.error(`[Backend Emit] Failed to get consistent state after undo. Emission skipped!`); }


        res.status(200).json({ message: 'Last ball undone successfully.', newState: correctedState || {} });

    } catch (error) {
        await connection.rollback();
        console.error(`Error undoing last ball for Match ${matchId}:`, error);
        const statusCode = error.message.includes('not found') ? 404 : (error.message.includes('Cannot undo') ? 400 : 500);
        res.status(statusCode).json({ message: error.message || 'Database error occurred while undoing ball.' });
    } finally {
        if (connection) connection.release();
    }
};




--- File: mpl-backend\controllers\admin\seasonController.js ---


// mpl-project/mpl-backend/controllers/admin/seasonController.js
const pool = require('../../config/db');

/**
 * @desc    Create a new season
 * @route   POST /api/admin/seasons
 * @access  Admin (Protected)
 */
exports.createSeason = async (req, res, next) => {
    const { year, name, start_date, end_date, status } = req.body;

    // Basic validation
    if (!year || !name) {
        return res.status(400).json({ message: 'Year and Name are required for a season.' });
    }
    if (isNaN(parseInt(year))) {
        return res.status(400).json({ message: 'Year must be a valid number.' });
    }
    // Optional: Validate date formats if provided

    try {
        const [result] = await pool.query(
            'INSERT INTO Seasons (year, name, start_date, end_date, status) VALUES (?, ?, ?, ?, ?)',
            // Provide null for optional fields if they are empty strings or undefined
            [year, name, start_date || null, end_date || null, status || 'Planned']
        );
        const seasonId = result.insertId;
        // Fetch the newly created season to return it in the response
        const [newSeason] = await pool.query('SELECT * FROM seasons WHERE season_id = ?', [seasonId]);

        if (newSeason.length === 0) {
            // Should not happen if insert was successful
            throw new Error('Failed to retrieve newly created season.');
        }

        res.status(201).json({ message: 'Season created successfully', season: newSeason[0] });
    } catch (error) {
        console.error("Create Season Error:", error);
         if (error.code === 'ER_DUP_ENTRY' && error.message.includes('year')) {
             // Handle unique constraint violation on 'year'
             return res.status(400).json({ message: `Season with year ${year} already exists.` });
        }
        next(error); // Pass other errors to global handler
    }
};

/**
 * @desc    Get all seasons
 * @route   GET /api/admin/seasons
 * @access  Admin (Protected)
 */
exports.getSeasons = async (req, res, next) => {
    try {
        // Order by year descending to show most recent first
        const [seasons] = await pool.query('SELECT * FROM seasons ORDER BY year DESC');
        res.json(seasons);
    } catch (error) {
        console.error("Get Seasons Error:", error);
        next(error);
    }
};

/**
 * @desc    Get a single season by its ID
 * @route   GET /api/admin/seasons/:id
 * @access  Admin (Protected)
 */
exports.getSeasonById = async (req, res, next) => {
    const { id } = req.params;
    if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Season ID.' });
    }

    try {
        const [seasons] = await pool.query('SELECT * FROM seasons WHERE season_id = ?', [id]);
        if (seasons.length === 0) {
            return res.status(404).json({ message: 'Season not found.' });
        }
        res.json(seasons[0]);
    } catch (error) {
        console.error("Get Season By ID Error:", error);
        next(error);
    }
};

/**
 * @desc    Update an existing season's details
 * @route   PUT /api/admin/seasons/:id
 * @access  Admin (Protected)
 */
exports.updateSeason = async (req, res, next) => {
    const { id } = req.params;
    // Only allow updating specific fields, year usually shouldn't change once set.
    const { name, start_date, end_date, status } = req.body;

    if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Season ID.' });
    }

    // Check if at least one valid field is provided for update
    if (!name && start_date === undefined && end_date === undefined && !status) {
         return res.status(400).json({ message: 'No update data provided (name, start_date, end_date, status).' });
    }

    // Optional: Validate status enum value if provided
    const validStatuses = ['Planned', 'RegistrationOpen', 'Auction', 'Ongoing', 'Completed'];
    if (status && !validStatuses.includes(status)) {
        return res.status(400).json({ message: `Invalid status value. Must be one of: ${validStatuses.join(', ')}` });
    }

    try {
        // Check if the season exists before attempting to update
        const [existing] = await pool.query('SELECT season_id FROM seasons WHERE season_id = ?', [id]);
        if (existing.length === 0) {
            return res.status(404).json({ message: 'Season not found.' });
        }

        // Build the SET part of the query dynamically based on provided fields
        const fieldsToUpdate = {};
        if (name) fieldsToUpdate.name = name;
        // Allow setting dates to null
        if (start_date !== undefined) fieldsToUpdate.start_date = start_date || null;
        if (end_date !== undefined) fieldsToUpdate.end_date = end_date || null;
        if (status) fieldsToUpdate.status = status;

        // Perform the update query
        const [result] = await pool.query('UPDATE Seasons SET ? WHERE season_id = ?', [fieldsToUpdate, id]);

         if (result.affectedRows === 0) {
             // This might happen if the data submitted was the same as existing data
             console.warn(`Update Season ${id}: Affected rows was 0. Data might be unchanged.`);
              // Fetch current data to confirm if it matches request or if ID was wrong despite check
             const [currentSeason] = await pool.query('SELECT * FROM seasons WHERE season_id = ?', [id]);
             return res.json({ message: 'Season data unchanged.', season: currentSeason[0] });

         }

        // Fetch the updated season data to return in the response
        const [updatedSeason] = await pool.query('SELECT * FROM seasons WHERE season_id = ?', [id]);
        res.json({ message: 'Season updated successfully', season: updatedSeason[0] });

    } catch (error) {
        console.error("Update Season Error:", error);
        next(error);
    }
};


/**
 * @desc    Delete a season (Use with caution!)
 * @route   DELETE /api/admin/seasons/:id
 * @access  Admin (Protected)
 */
// exports.deleteSeason = async (req, res, next) => {
//     const { id } = req.params;
//     if (isNaN(parseInt(id))) {
//         return res.status(400).json({ message: 'Invalid Season ID.' });
//     }
//     // WARNING: Deleting a season might cascade and delete related teams, matches, stats etc.
//     // depending on your FOREIGN KEY constraints (ON DELETE CASCADE). Double-check schema.
//     // Consider logical deletion (setting an 'is_deleted' flag) instead of physical deletion.
//     try {
//          const [existing] = await pool.query('SELECT season_id FROM seasons WHERE season_id = ?', [id]);
//         if (existing.length === 0) {
//             return res.status(404).json({ message: 'Season not found.' });
//         }

//         // Perform deletion
//         const [result] = await pool.query('DELETE FROM seasons WHERE season_id = ?', [id]);

//          if (result.affectedRows === 0) {
//              return res.status(404).json({ message: 'Season not found or already deleted.' });
//          }

//         res.status(200).json({ message: 'Season deleted successfully.' }); // Or 204 No Content

//     } catch (error) {
//         console.error("Delete Season Error:", error);
//         // Handle potential foreign key constraint errors if cascade is not set up correctly
//         next(error);
//     }
// };




--- File: mpl-backend\controllers\admin\teamController.js ---


// mpl-project/mpl-backend/controllers/admin/teamController.js
const pool = require('../../config/db');

/**
 * @desc    Add a new team to a specific season
 * @route   POST /api/admin/teams
 * @access  Admin (Protected)
 */
exports.addTeamToSeason = async (req, res, next) => {
    const { season_id, name, captain_player_id, budget } = req.body;

    // Validation
    if (!season_id || !name) {
        return res.status(400).json({ message: 'Season ID and Team Name are required.' });
    }
    if (isNaN(parseInt(season_id))) {
        return res.status(400).json({ message: 'Invalid Season ID.' });
    }
    // Optional: Validate budget format, captain_player_id if provided

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();

        // Check if season exists
        const [seasonCheck] = await connection.query('SELECT 1 FROM seasons WHERE season_id = ?', [season_id]);
        if (seasonCheck.length === 0) {
            await connection.rollback();
            return res.status(400).json({ message: `Season with ID ${season_id} does not exist.` });
        }

        // Optional: Check if captain player exists if ID is provided
        if (captain_player_id) {
             const [playerCheck] = await connection.query('SELECT 1 FROM players WHERE player_id = ?', [captain_player_id]);
             if (playerCheck.length === 0) {
                await connection.rollback();
                return res.status(400).json({ message: `Captain Player with ID ${captain_player_id} does not exist.` });
             }
             // More complex: Check if captain player is already in another team for this season? Handled later when adding player.
        }

        // Insert the new team
        const [result] = await connection.query(
            'INSERT INTO Teams (season_id, name, captain_player_id, budget) VALUES (?, ?, ?, ?)',
            [season_id, name, captain_player_id || null, budget === undefined || budget === null ? 10000.00 : budget] // Default budget if not provided
        );
        const teamId = result.insertId;

        // Fetch the newly created team to return
        const [newTeam] = await connection.query('SELECT * FROM teams WHERE team_id = ?', [teamId]);

        await connection.commit();
        res.status(201).json({ message: 'Team added successfully', team: newTeam[0] });

    } catch (error) {
        await connection.rollback(); // Rollback transaction on any error
        console.error("Add Team Error:", error);
        // Handle specific FK errors if checks above missed something
        if (error.code === 'ER_NO_REFERENCED_ROW_2') {
            return res.status(400).json({ message: 'Invalid Season ID or Captain Player ID provided.' });
        }
        next(error);
    } finally {
        connection.release(); // Always release the connection
    }
};

/**
 * @desc    Get teams, requires filtering by season_id query parameter
 * @route   GET /api/admin/teams?season_id=X
 * @access  Admin (Protected)
 */
exports.getTeamsForSeason = async (req, res, next) => {
    const { season_id } = req.query; // Get season_id if provided

    try {
        // Base query including season and captain info
        let query = `
          SELECT t.*, s.name as season_name, p.name as captain_name
          FROM teams t
          JOIN seasons s ON t.season_id = s.season_id
          LEFT JOIN players p ON t.captain_player_id = p.player_id
          `;
        const params = [];

        // --- MODIFICATION START ---
        // Only add the WHERE clause if season_id IS provided
        if (season_id) {
            if (isNaN(parseInt(season_id))) {
                return res.status(400).json({ message: 'Invalid Season ID format provided in query.' });
            }
            query += ' WHERE t.season_id = ?';
            params.push(season_id);
        }
        // --- MODIFICATION END ---

        query += ' ORDER BY s.year DESC, t.name ASC'; // Order by season then team name

        const [teams] = await pool.query(query, params);
        res.json(teams);
    } catch (error) {
        console.error("Get Teams Error:", error);
        next(error);
    }
};

/**
 * @desc    Get full details of a single team AND its players for a specific season
 * @route   GET /api/admin/teams/:id?season_id=X
 * @access  Admin (Protected)
 */
exports.getTeamDetails = async (req, res, next) => {
     const { id } = req.params; // Team ID
     const { season_id } = req.query; // Season context is crucial

     if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Team ID.' });
     }
     if (!season_id || isNaN(parseInt(season_id))) {
         return res.status(400).json({ message: 'Valid Season ID query parameter is required.' });
     }

    try {
        // Fetch team details
        const [teams] = await pool.query(
            `SELECT t.*, p.name as captain_name
             FROM teams t
             LEFT JOIN players p ON t.captain_player_id = p.player_id
             WHERE t.team_id = ? AND t.season_id = ?`, // Ensure team belongs to the requested season
            [id, season_id]
        );

        if (teams.length === 0) {
            // Team might exist but not for this season, or doesn't exist at all
            return res.status(404).json({ message: `Team with ID ${id} not found for season ${season_id}.` });
        }
        const teamDetails = teams[0];

        // Fetch players associated with this team FOR THIS SPECIFIC SEASON from TeamPlayers
        const [players] = await pool.query(
            `SELECT
                p.player_id, p.name, p.role,
                tp.team_player_id, tp.purchase_price, tp.is_captain
             FROM players p
             JOIN teamplayers tp ON p.player_id = tp.player_id
             WHERE tp.team_id = ? AND tp.season_id = ?
             ORDER BY p.name`,
            [id, season_id]
        );

        // Combine team details and player list
        res.json({ ...teamDetails, players: players });

    } catch (error) {
        console.error("Get Team Details Error:", error);
        next(error);
    }
};


/**
 * @desc    Update team's basic details (name, captain, budget)
 * @route   PUT /api/admin/teams/:id
 * @access  Admin (Protected)
 */
exports.updateTeam = async (req, res, next) => {
     const { id } = req.params; // Team ID
     const { name, captain_player_id, budget } = req.body; // Fields that can be updated

     if (isNaN(parseInt(id))) {
        return res.status(400).json({ message: 'Invalid Team ID.' });
     }
     // Check if at least one field is provided
     if (name === undefined && captain_player_id === undefined && budget === undefined) {
         return res.status(400).json({ message: 'No update data provided (name, captain_player_id, budget).' });
     }
     // Optional: Validate budget format if provided

     const connection = await pool.getConnection();
     try {
         await connection.beginTransaction();

         // Get current team info, especially season_id
         const [existingTeamArr] = await connection.query('SELECT team_id, season_id FROM teams WHERE team_id = ?', [id]);
         if (existingTeamArr.length === 0) {
             await connection.rollback();
             return res.status(404).json({ message: 'Team not found.' });
         }
         const teamSeasonId = existingTeamArr[0].season_id;

         // Prepare fields for the main Teams table update
         const teamFieldsToUpdate = {};
         if (name !== undefined) teamFieldsToUpdate.name = name;
         if (budget !== undefined) teamFieldsToUpdate.budget = budget;
         // Captain update needs special handling below

         // Handle Captain Change
         if (captain_player_id !== undefined) {
             const newCaptainId = captain_player_id === null || captain_player_id === '' ? null : parseInt(captain_player_id);

             // If setting a new captain (not null)
             if (newCaptainId !== null) {
                 // 1. Check if the new captain player exists
                 const [playerCheck] = await connection.query('SELECT 1 FROM players WHERE player_id = ?', [newCaptainId]);
                 if (playerCheck.length === 0) {
                     await connection.rollback();
                     return res.status(400).json({ message: `Player ID ${newCaptainId} does not exist.` });
                 }
                 // 2. Check if the new captain is actually ON THIS TEAM for THIS SEASON
                 const [teamPlayerCheck] = await connection.query(
                     'SELECT 1 FROM teamplayers WHERE team_id = ? AND player_id = ? AND season_id = ?',
                     [id, newCaptainId, teamSeasonId]
                 );
                 if (teamPlayerCheck.length === 0) {
                     await connection.rollback();
                     return res.status(400).json({ message: `Player ID ${newCaptainId} is not assigned to this team (ID ${id}) for season ${teamSeasonId}. Cannot set as captain.` });
                 }
                 // 3. Update the captain_player_id in the Teams table
                 teamFieldsToUpdate.captain_player_id = newCaptainId;
                 // 4. Update the is_captain flag in TeamPlayers (set new captain, unset old)
                 await connection.query('UPDATE TeamPlayers SET is_captain = FALSE WHERE team_id = ? AND season_id = ?', [id, teamSeasonId]);
                 await connection.query('UPDATE TeamPlayers SET is_captain = TRUE WHERE team_id = ? AND player_id = ? AND season_id = ?', [id, newCaptainId, teamSeasonId]);
             } else {
                 // Setting captain to NULL
                 teamFieldsToUpdate.captain_player_id = null;
                  // 4. Ensure no player is marked as captain in TeamPlayers
                 await connection.query('UPDATE TeamPlayers SET is_captain = FALSE WHERE team_id = ? AND season_id = ?', [id, teamSeasonId]);
             }
         } // End of captain handling


         // Update the Teams table if there are fields to update
         if (Object.keys(teamFieldsToUpdate).length > 0) {
             const [updateResult] = await connection.query('UPDATE Teams SET ? WHERE team_id = ?', [teamFieldsToUpdate, id]);
             if (updateResult.affectedRows === 0) {
                 // This might happen if only captain was changed (as it doesn't affect Teams row directly if already set)
                 // Or if data was identical. Log a warning.
                 console.warn(`Update Team ${id}: Affected rows was 0 for Teams table update.`);
             }
         }

         await connection.commit();

         // Fetch the final updated team details to return
         const [finalTeam] = await connection.query(
             `SELECT t.*, p.name as captain_name
              FROM teams t
              LEFT JOIN players p ON t.captain_player_id = p.player_id
              WHERE t.team_id = ?`, [id]
          );

         res.json({ message: 'Team updated successfully', team: finalTeam[0] });

    } catch (error) {
        await connection.rollback();
        console.error("Update Team Error:", error);
        if (error.code === 'ER_NO_REFERENCED_ROW_2') { // Can happen if invalid player ID is somehow used
            return res.status(400).json({ message: 'Invalid data reference (e.g., non-existent Player ID).' });
        }
        next(error);
    } finally {
        connection.release();
    }
};


/**
 * @desc    Add a player to a team for a specific season (creates TeamPlayers entry)
 * @route   POST /api/admin/teams/players
 * @access  Admin (Protected)
 */
exports.addPlayerToTeam = async (req, res, next) => {
    const { team_id, player_id, season_id, purchase_price, is_captain } = req.body;

    if (!team_id || !player_id || !season_id) { return res.status(400).json({ message: 'Team ID, Player ID, and Season ID are required.' }); }
    if (isNaN(parseInt(team_id)) || isNaN(parseInt(player_id)) || isNaN(parseInt(season_id))) { return res.status(400).json({ message: 'Invalid ID format provided.' }); }

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();
        // Pre-checks (team exists, player exists, player not already assigned) - Keep as before
        const [teamCheck] = await connection.query('SELECT 1 FROM teams WHERE team_id = ? AND season_id = ?', [team_id, season_id]); if (teamCheck.length === 0) { await connection.rollback(); return res.status(400).json({ message: `Team ID ${team_id} not found for season ${season_id}.` }); }
        const [playerCheck] = await connection.query('SELECT 1 FROM players WHERE player_id = ?', [player_id]); if (playerCheck.length === 0) { await connection.rollback(); return res.status(400).json({ message: `Player ID ${player_id} does not exist.` }); }
        const [existingAssignment] = await connection.query('SELECT team_id FROM teamplayers WHERE player_id = ? AND season_id = ?', [player_id, season_id]); if (existingAssignment.length > 0) { await connection.rollback(); return res.status(400).json({ message: `Player ${player_id} is already assigned to team ${existingAssignment[0].team_id} for season ${season_id}. Remove them first.` }); }

        // Captain handling (Keep as before)
        if (is_captain) { await connection.query('UPDATE TeamPlayers SET is_captain = FALSE WHERE team_id = ? AND season_id = ?', [team_id, season_id]); await connection.query('UPDATE Teams SET captain_player_id = ? WHERE team_id = ?', [player_id, team_id]); }

        // Insert into TeamPlayers (Keep as before)
        const [result] = await connection.query( 'INSERT INTO TeamPlayers (team_id, player_id, season_id, purchase_price, is_captain) VALUES (?, ?, ?, ?, ?)', [team_id, player_id, season_id, purchase_price === undefined ? null : purchase_price, is_captain || false] );
        const teamPlayerId = result.insertId;

        // MODIFIED: Update the player's current_team_id
        // Consider if you only want the *latest* season's team assignment to set this.
        // This logic sets it regardless of season order. Adjust if needed.
        await connection.query('UPDATE Players SET current_team_id = ? WHERE player_id = ?', [team_id, player_id]);
        console.log(`Updated player ${player_id}'s current_team_id to ${team_id}`);

        await connection.commit();
        res.status(201).json({ message: 'Player added to team successfully', teamPlayerId: teamPlayerId });

    } catch (error) { await connection.rollback(); /* ... error handling ... */ }
    finally { connection.release(); }
};

/**
 * @desc    Remove a player from a team for a specific season (deletes TeamPlayers entry)
 * @route   DELETE /api/admin/teams/players/:teamPlayerId
 * @access  Admin (Protected)
 */
exports.removePlayerFromTeam = async (req, res, next) => {
    const { teamPlayerId } = req.params;

    if (isNaN(parseInt(teamPlayerId))) { return res.status(400).json({ message: 'Invalid Team Player Assignment ID.' }); }

    const connection = await pool.getConnection();
    try {
        await connection.beginTransaction();
        // Get assignment details (Keep as before)
        const [assignmentInfo] = await connection.query(`SELECT tp.player_id, tp.team_id, t.captain_player_id FROM teamplayers tp JOIN teams t ON tp.team_id = t.team_id WHERE tp.team_player_id = ?`, [teamPlayerId]);
        if (assignmentInfo.length === 0) { await connection.rollback(); return res.status(404).json({ message: 'Team player assignment not found.' }); }
        const { player_id, team_id, captain_player_id } = assignmentInfo[0];

        // Delete assignment (Keep as before)
        const [deleteResult] = await connection.query('DELETE FROM teamplayers WHERE team_player_id = ?', [teamPlayerId]);
        if (deleteResult.affectedRows === 0) { await connection.rollback(); return res.status(404).json({ message: 'Team player assignment could not be deleted (not found?).' }); }

        // Handle captain (Keep as before)
        if (player_id === captain_player_id) { await connection.query('UPDATE Teams SET captain_player_id = NULL WHERE team_id = ?', [team_id]); }

        // MODIFIED: Clear player's current_team_id ONLY if it matched the team they were removed from
        await connection.query('UPDATE Players SET current_team_id = NULL WHERE player_id = ? AND current_team_id = ?', [player_id, team_id]);
        console.log(`Cleared current_team_id for player ${player_id} if it was ${team_id}`);

        await connection.commit();
        res.status(200).json({ message: 'Player removed from team successfully.' });

    } catch (error) { await connection.rollback(); console.error("Remove Player from Team Error:", error); next(error); }
    finally { connection.release(); }
};

/**
 * @desc    Delete a team (Use with caution!)
 * @route   DELETE /api/admin/teams/:id
 * @access  Admin (Protected)
 */
// exports.deleteTeam = async (req, res, next) => {
//     const { id } = req.params;
//     if (isNaN(parseInt(id))) {
//         return res.status(400).json({ message: 'Invalid Team ID.' });
//     }
//     // WARNING: Deleting a team will likely cascade delete TeamPlayers,
//     // and might fail if the team is involved in Matches unless those have ON DELETE SET NULL/CASCADE.
//     // CHECK YOUR SCHEMA CONSTRAINTS CAREFULLY!
//     try {
//         // Check existence first
//         const [existing] = await pool.query('SELECT team_id FROM teams WHERE team_id = ?', [id]);
//         if (existing.length === 0) {
//             return res.status(404).json({ message: 'Team not found.' });
//         }
//         // Perform delete
//         const [result] = await pool.query('DELETE FROM teams WHERE team_id = ?', [id]);
//         if (result.affectedRows === 0) {
//              return res.status(404).json({ message: 'Team not found or could not be deleted.' });
//         }
//         res.status(200).json({ message: 'Team deleted successfully.' });
//     } catch (error) {
//         console.error("Delete Team Error:", error);
//         // Handle FK constraint errors (e.g., if team is in use in Matches table)
//         if (error.code === 'ER_ROW_IS_REFERENCED_2') {
//             return res.status(400).json({ message: 'Cannot delete team. It is referenced in existing matches or other records.' });
//         }
//         next(error);
//     }
// };





--- File: mpl-backend\middleware\authMiddleware.js ---


// mpl-project/mpl-backend/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');
const pool = require('../config/db');
require('dotenv').config();

// Middleware to protect routes requiring ADMIN login
exports.protect = async (req, res, next) => {
    let token;

    // Check for token in Authorization header (Bearer scheme)
    if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
        try {
            // Extract token from header
            token = req.headers.authorization.split(' ')[1];

            // Verify the token using the secret key
            const decoded = jwt.verify(token, process.env.JWT_SECRET);

            // Fetch admin user details from DB using ID from token payload
            // Exclude password hash for security
            const [admins] = await pool.query('SELECT admin_id, username, email FROM admins WHERE admin_id = ?', [decoded.id]);

            if (admins.length === 0) {
                 // If user associated with token no longer exists
                 return res.status(401).json({ message: 'Not authorized, user not found' });
            }

            // Attach admin user information to the request object for later use
            req.admin = admins[0];
            next(); // Proceed to the next middleware or route handler

        } catch (error) {
            // Handle different JWT errors
            console.error('Authentication Error:', error.message);
            if (error.name === 'JsonWebTokenError') {
                 return res.status(401).json({ message: 'Not authorized, invalid token' });
            }
             if (error.name === 'TokenExpiredError') {
                return res.status(401).json({ message: 'Not authorized, token expired' });
            }
            // Generic failure
            return res.status(401).json({ message: 'Not authorized, token validation failed' });
        }
    }

    // If no token is found in the header
    if (!token) {
        return res.status(401).json({ message: 'Not authorized, no token provided' });
    }
};

// Placeholder for Player Authentication (if needed later for features like player rating)
// exports.protectPlayer = async (req, res, next) => {
//     // Similar logic, but verify player token and fetch player details
//     // from the Players table instead of Admins table.
// };




--- File: mpl-backend\routes\leaderboard.js ---


// mpl-project/mpl-backend/routes/leaderboard.js
const express = require('express');
const { getLeaderboards } = require('../controllers/leaderboardController');

const router = express.Router();

// GET /api/leaderboard?season_id=X
// Get batting, bowling, and impact leaderboards for a specific season
router.get('/', getLeaderboards);

module.exports = router;




--- File: mpl-backend\routes\matches.js ---


// mpl-project/mpl-backend/routes/matches.js
const express = require('express');
//const { getFixtures, getMatchDetails } = require('../controllers/matchController');
const { getFixtures, getMatchDetails, getMatchCommentary } = require('../controllers/matchController')
// const { protect } = require('../middleware/authMiddleware'); // Maybe needed if creating matches via API

const router = express.Router();

// --- Public Routes ---

// GET /api/matches
// Get list of fixtures (can filter by query params like ?season_id=X&status=Scheduled)
router.get('/', getFixtures);

// GET /api/matches/:id
// Get details for a single match (for viewer page)
router.get('/:id', getMatchDetails);

// Route to get ball-by-ball commentary
router.get('/:id/commentary', getMatchCommentary);

// --- Admin Routes (Example - if creating matches via API) ---
// POST /api/matches
// Create a new match fixture (needs protection)
// router.post('/', protect, createMatch);

// PUT /api/matches/:id
// Update match details (e.g., date/time, venue - needs protection)
// router.put('/:id', protect, updateMatch);

// DELETE /api/matches/:id
// Delete a match fixture (needs protection)
// router.delete('/:id', protect, deleteMatch);


module.exports = router;




--- File: mpl-backend\routes\players.js ---


// mpl-project/mpl-backend/routes/players.js
const express = require('express');
const {
    registerPlayer,
    getAllPlayers,
    getPlayerById,
    getPlayerStats,
    updatePlayer, // Assuming implementation exists
    deletePlayer // Assuming implementation exists
} = require('../controllers/playerController');
const { protect } = require('../middleware/authMiddleware'); // For admin-only actions

const router = express.Router();

// --- Public Routes ---

// GET /api/players - Get a list of all registered players
router.get('/', getAllPlayers);

// GET /api/players/:id - Get details of a specific player by ID
router.get('/:id', getPlayerById);

// GET /api/players/:id/stats?season_id=X - Get stats for a player (career or specific season)
router.get('/:id/stats', getPlayerStats);


// --- Potentially Public or Protected Routes ---

// POST /api/players - Register a new player
// Access Control Decision: Should this be public self-registration or admin-only?
// If admin-only, add 'protect' middleware here.
router.post('/', protect, registerPlayer); 


// --- Admin Only Routes (Protected) ---

// PUT /api/players/:id - Update player details
router.put('/:id', protect, updatePlayer);

// DELETE /api/players/:id - Delete a player (Use with caution!)
router.delete('/:id', protect, deletePlayer);


module.exports = router;




--- File: mpl-backend\routes\seasons.js ---


// mpl-backend/routes/seasons.js
const express = require('express');
// Correctly import from the new controller file
const { getPublicSeasons } = require('../controllers/publicSeasonController');

const router = express.Router();

// Public route to get basic season list
// The path here is relative to where it's mounted in server.js (/api/seasons)
// So this handles GET /api/seasons/public
router.get('/public', getPublicSeasons);

module.exports = router;




--- File: mpl-backend\routes\standings.js ---


// mpl-project/mpl-backend/routes/standings.js
const express = require('express');
const { getStandings } = require('../controllers/standingsController');

const router = express.Router();

// GET /api/standings?season_id=X
router.get('/', getStandings);

module.exports = router;




--- File: mpl-backend\routes\admin\auth.js ---


// mpl-project/mpl-backend/routes/admin/auth.js
const express = require('express');
const { loginAdmin, registerAdmin } = require('../../controllers/admin/authController');
// const { protect } = require('../../middleware/authMiddleware'); // Only if registration needs protection

const router = express.Router();

// @route   POST /api/admin/auth/login
// @desc    Authenticate admin user and return JWT token
// @access  Public
router.post('/login', loginAdmin);

// @route   POST /api/admin/auth/register
// @desc    Register a new admin user (Use with extreme caution!)
// @access  Public / Potentially Admin Only (Add 'protect' middleware if needed)
// WARNING: Exposing admin registration publicly is a security risk.
// Consider creating admins via a command-line script or securing this endpoint.
// router.post('/register', registerAdmin);


module.exports = router;




--- File: mpl-backend\routes\admin\matchesAdmin.js ---


// mpl-project/mpl-backend/routes/admin/matchesAdmin.js
const express = require('express');
const {
    createMatch,
    getAllMatches, // Can reuse logic from public controller if desired
    getMatchById,
    updateMatch,
    deleteMatch,
    resolveMatch
} = require('../../controllers/admin/matchAdminController'); // Point to the new controller

const router = express.Router();

// These routes will be protected by the 'protect' middleware in server.js

router.route('/')
    .post(createMatch)
    .get(getAllMatches); // List matches with filters for admin view

router.route('/:id')
    .get(getMatchById) // Get specific match details for editing
    .put(updateMatch)  // Update scheduled match details
    .delete(deleteMatch); // Delete a scheduled match

router.route('/:id/resolve')
    .put(resolveMatch);
module.exports = router;




--- File: mpl-backend\routes\admin\scoring.js ---


// mpl-project/mpl-backend/routes/admin/scoring.js
const express = require('express');
const {
    getMatchesForSetup,
    submitMatchSetup,
    scoreSingleBall,
    submitFinalMatchScore, // Keep if manual final entry/correction is needed
    getLiveMatchState, // <-- NEW CONTROLLER FUNCTION
    undoLastBall // <-- Endpoint from previous step
} = require('../../controllers/admin/scoringController');

const router = express.Router();

// Note: 'protect' middleware is applied in server.js

// GET /api/admin/scoring/setup-list
// Get matches in 'Scheduled' state, ready for toss/setup
router.get('/setup-list', getMatchesForSetup);

// POST /api/admin/scoring/matches/:matchId/setup
// Submit toss winner, decision (Bat/Bowl), and Super Over number.
// Transitions match status from 'Scheduled' to 'Setup'.
router.post('/matches/:matchId/setup', submitMatchSetup);

// GET /api/admin/scoring/matches/:matchId/state  <-- NEW ROUTE
// Fetch the current detailed state of a live/in-progress/completed match
router.get('/matches/:matchId/state', getLiveMatchState);

// POST /api/admin/scoring/matches/:matchId/ball
// Route to score a single ball
router.post('/matches/:matchId/ball', scoreSingleBall);

// DELETE /api/admin/scoring/matches/:matchId/ball/last <-- Route from previous step
// Undo the last recorded ball event
router.delete('/matches/:matchId/ball/last', undoLastBall);

// POST /api/admin/scoring/matches/:matchId/finalize
// Optional endpoint for admin to manually submit final scores and detailed player stats after a match.
// Useful if live scoring fails, for corrections, or if live scoring isn't used.
// Transitions match status to 'Completed'.
router.post('/matches/:matchId/finalize', submitFinalMatchScore);


module.exports = router;




--- File: mpl-backend\routes\admin\seasons.js ---


// mpl-project/mpl-backend/routes/admin/seasons.js
const express = require('express');
const {
    createSeason,
    getSeasons,
    getSeasonById,
    updateSeason,
    // deleteSeason // Uncomment if implemented
} = require('../../controllers/admin/seasonController');

const router = express.Router();

// Note: The 'protect' middleware is applied in server.js for all routes in this file.

// Base route: /api/admin/seasons
router.route('/')
    .post(createSeason) // POST /api/admin/seasons - Create a new season
    .get(getSeasons);   // GET /api/admin/seasons - Get all seasons

// Route for specific season by ID: /api/admin/seasons/:id
router.route('/:id')
    .get(getSeasonById) // GET /api/admin/seasons/:id - Get details of one season
    .put(updateSeason)  // PUT /api/admin/seasons/:id - Update a season's details
    // .delete(deleteSeason); // DELETE /api/admin/seasons/:id - Delete a season (implement controller logic first)

module.exports = router;




--- File: mpl-backend\routes\admin\teams.js ---


// mpl-project/mpl-backend/routes/admin/teams.js
const express = require('express');
const {
    addTeamToSeason,
    getTeamsForSeason,
    updateTeam,
    getTeamDetails,
    addPlayerToTeam,
    removePlayerFromTeam,
    // deleteTeam // Implement if needed
} = require('../../controllers/admin/teamController');

const router = express.Router();

// Note: 'protect' middleware is applied in server.js

// --- Team Management ---

// POST /api/admin/teams
// Add a new team to a specific season (expects season_id in body)
router.post('/', addTeamToSeason);

// GET /api/admin/teams?season_id=X
// Get teams, requires filtering by season_id query parameter
router.get('/', getTeamsForSeason);

// GET /api/admin/teams/:id?season_id=X
// Get details of a specific team AND its players for a specific season
router.get('/:id', getTeamDetails);

// PUT /api/admin/teams/:id
// Update basic team details (name, captain, budget)
router.put('/:id', updateTeam);

// DELETE /api/admin/teams/:id
// Delete a team (implement controller logic, consider implications)
// router.delete('/:id', deleteTeam);


// --- Team Player Management (within a team/season) ---

// POST /api/admin/teams/players
// Add a player to a team for a specific season (expects team_id, player_id, season_id in body)
router.post('/players', addPlayerToTeam);

// DELETE /api/admin/teams/players/:teamPlayerId
// Remove a player assignment using the unique ID from the TeamPlayers table
router.delete('/players/:teamPlayerId', removePlayerFromTeam);


module.exports = router;




--- File: mpl-backend\socket\socketHandler.js ---


// mpl-project/mpl-backend/socket/socketHandler.js
const pool = require('../config/db');

// WARNING: In-memory store is simple for development but NOT suitable for production.
// Consider Redis or another external store for managing live match states.
let liveMatchesState = {};
// Structure Example (Will be updated by backend API emits now):
// liveMatchesState = {
//   "match_1": { // Keyed by matchId
//     matchId: 1, seasonId: 1, status: 'Live', innings: 1, score: 45, wickets: 1, overs: 4, balls: 6, // Note: overs/balls represent *completed*
//     battingTeamId: 1, bowlingTeamId: 2, superOver: 3, target: null,
//     playersBattingTeam: [{player_id: 101, name: 'Rohit Sharma'}, ...],
//     playersBowlingTeam: [{player_id: 102, name: 'Virat Kohli'}, ...],
//     batsmanStrike: { id: 101, name: 'Rohit Sharma', runs: 35, balls: 20 }, // Might be simplified or part of players list
//     bowler: { id: 110, name: 'Yuzvendra Chahal', oversDecimal: 0.0, runs: 8, wickets: 0 }, // Simplified
//     lastEvent: "Ball 4.6: WICKET! Caught (Hit Six). Innings End.",
//     lastBallCommentary: "Over 4.6: Chahal to Rohit Sharma, WICKET! Caught by Kohli (Hit Six!)", // From ballbyball table via backend emit
//     recentCommentary: ["Over 4.6: ...", "Over 4.5: ..."] // Array of recent commentary strings
//   },
//   ...
// }


function initializeSocket(io) {
    console.log('[Socket Handler] Initialized and Ready for connections.');

    io.on('connection', (socket) => {
        console.log(`[Socket Connect] New connection. ID: ${socket.id}`);

        // --- Room Management ---
        socket.on('joinMatchRoom', (matchId) => {
            if (!matchId) {
                console.warn(`[Socket Join] Invalid matchId received from ${socket.id}`);
                return;
            }
            const roomName = `match_${matchId}`;
            socket.join(roomName);
            console.log(`[Socket Join] ${socket.id} joined room: ${roomName}`);

            // Send the current cached state of the match *to the user who just joined*
            if (liveMatchesState[matchId]) {
                socket.emit('updateScore', liveMatchesState[matchId]); // Send the last known full state
                console.log(`[Socket State] Sent cached state of match ${matchId} to ${socket.id}`);
            } else {
                 console.log(`[Socket State] No cached state found for match ${matchId} to send on join.`);
                 // The client might fetch initial state via HTTP if needed
                 // socket.emit('matchStateUnavailable', { matchId: matchId, message: "Match is not currently live or state unavailable." });
            }
        });

        socket.on('leaveMatchRoom', (matchId) => {
             if (!matchId) {
                 console.warn(`[Socket Leave] Invalid matchId received from ${socket.id}`);
                 return;
             }
            const roomName = `match_${matchId}`;
            socket.leave(roomName);
            console.log(`[Socket Leave] ${socket.id} left room: ${roomName}`);
        });


        // --- Match Lifecycle Actions ---

        // Event triggered by admin scorer UI when Match Setup is confirmed and scoring should begin
        // The 'initialState' comes from the successful response of the '/setup' API call
        socket.on('startMatchScoring', (matchId, initialState) => {
            if (!matchId || !initialState) {
                console.error(`[Socket Start] Invalid startMatchScoring event data received from ${socket.id}`);
                socket.emit('scoringError', { message: 'Invalid data for starting match.' });
                return;
            }
            // Basic validation of initialState structure
            if (!initialState.playersBattingTeam || !initialState.playersBowlingTeam || initialState.superOver == null) {
                 console.error(`[Socket Start] Incomplete initialState received for match ${matchId}`);
                 socket.emit('scoringError', { message: 'Incomplete initial state received.' });
                 return;
            }

            console.log(`[Socket Start] Initializing live state for Match ${matchId} requested by ${socket.id}`);

            // Initialize or overwrite the live state in memory
            // This state will be updated by 'updateScore' events triggered by the backend API
            liveMatchesState[matchId] = {
                ...initialState, // Contains teams, players, superOver etc. from setup API response
                status: 'Live', // Explicitly set status to Live
                score: 0,
                wickets: 0,
                overs: 0, // Completed overs
                balls: 0, // Balls in current over (starts at 0 before first ball)
                inningNumber: 1, // Assume starting first innings
                target: null, // Target will be set after first innings if applicable
                batsmanStrike: null, // Needs assignment via Admin UI
                batsmanNonStrike: null, // N/A for single batsman format
                bowler: null, // Needs assignment via Admin UI
                lastEvent: 'Match scoring started! Select opening players.',
                lastBallCommentary: null, // Will be updated by backend
                recentCommentary: [], // Initialize empty array for recent commentary
            };

            // Broadcast to everyone in the room that the match is now live with its initial state
            const roomName = `match_${matchId}`;
            io.to(roomName).emit('matchLive', liveMatchesState[matchId]); // Signal the match is officially live
            io.to(roomName).emit('updateScore', liveMatchesState[matchId]); // Send the initial full state
            console.log(`[Socket Start] Match ${matchId} initialized to Live state. State broadcasted.`);
        });


        // --- IMPORTANT: 'scoreBall' listener is REMOVED ---
        // The logic for processing a ball, updating the database (ballbyball, PlayerMatchStats),
        // calculating the new state, and determining end of over/innings/match
        // now resides in the backend HTTP endpoint controller: `controllers/admin/scoringController.js -> scoreSingleBall`.
        // That controller function, AFTER successfully committing database changes,
        // should retrieve the updated state and emit an 'updateScore' event using `req.app.get('io')`.
        // This socket handler now primarily *listens* for those 'updateScore' events broadcasted by the backend API.

        // Optional: You might add listeners here for *other* events emitted by the backend controller,
        // for example, if you wanted a specific 'inningsEnded' or 'matchEnded' event.
        // socket.on('inningsEnded', (data) => { ... });
        // socket.on('matchEnded', (data) => { ... });


        // --- Disconnect Handling ---
        socket.on('disconnect', (reason) => {
            console.log(`[Socket Disconnect] ID: ${socket.id}, Reason: ${reason}`);
            // No specific cleanup needed for liveMatchesState here unless tracking individual user sessions
        });

        // --- Connection Error Handling ---
        socket.on('connect_error', (err) => {
            console.error(`[Socket Connect Error] ID: ${socket.id}, Error: ${err.message}`);
        });

    }); // End of io.on('connection')
}

// This function is called from server.js to attach the handler to the Socket.IO server instance
module.exports = initializeSocket;




--- File: mpl-backend\utils\statsCalculations.js ---


// mpl-backend/utils/statsCalculations.js

const calculateSR = (runs, balls) => {
    if (balls == null || balls === 0 || isNaN(runs) || isNaN(balls)) return null;
    return parseFloat(((parseInt(runs) / parseInt(balls)) * 100).toFixed(2));
};

const calculateAvg = (runs, outs) => {
    if (outs == null || isNaN(runs) || isNaN(outs)) return null;
    if (outs === 0) return (runs > 0 ? Infinity : null); // Handle division by zero (Infinity for Not Out)
    return parseFloat((parseInt(runs) / parseInt(outs)).toFixed(2));
};

const calculateEcon = (runs, oversDecimal) => {
    if (oversDecimal == null || oversDecimal <= 0 || isNaN(runs) || isNaN(oversDecimal)) return null;
    const completedOvers = Math.floor(oversDecimal);
    const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
    const totalBalls = (completedOvers * 6) + ballsInPartialOver;
    if (totalBalls === 0) return null;
    const properOvers = totalBalls / 6;
    return parseFloat((parseInt(runs) / properOvers).toFixed(2));
};


const formatOversDisplay = (oversDecimal) => {
    if (oversDecimal == null || isNaN(oversDecimal) || oversDecimal < 0) return "0.0"; // Return 0.0 for invalid/negative
    const completedOvers = Math.floor(oversDecimal);
    const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
    // Ensure it shows X.0 for completed overs if calculation resulted in integer
    if (ballsInPartialOver === 0 && oversDecimal === completedOvers) {
        return `${completedOvers}.0`;
    }
     // Cap balls at 5 for display, e.g. 4.6 should show as 5.0
     if (ballsInPartialOver >= 6) {
        return `${completedOvers + 1}.0`;
     }
    return `${completedOvers}.${ballsInPartialOver}`;
};

// Function to convert total balls into decimal overs format (e.g., 27 balls -> 4.3)
const ballsToOversDecimal = (balls) => {
    if (balls == null || isNaN(balls) || balls < 0) return 0.0;
    const overs = Math.floor(balls / 6);
    const remainingBalls = balls % 6;
    // Represent as decimal: 4 overs, 3 balls = 4 + (3/10) = 4.3
    return parseFloat(`${overs}.${remainingBalls}`);
};


module.exports = {
    calculateSR,
    calculateAvg,
    calculateEcon,
    formatOversDisplay,
    ballsToOversDecimal // Export the new helper
};





--- File: mpl-frontend\eslint.config.js ---


import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]





--- File: mpl-frontend\index.html ---


<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MPL - Metalworks Premier League</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>





--- File: mpl-frontend\package-lock.json ---


{
  "name": "mpl-frontend",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "mpl-frontend",
      "version": "0.0.0",
      "dependencies": {
        "axios": "^1.8.4",
        "react": "^19.0.0",
        "react-dom": "^19.0.0",
        "react-router-dom": "^6.30.0",
        "socket.io-client": "^4.8.1"
      },
      "devDependencies": {
        "@eslint/js": "^9.21.0",
        "@types/react": "^19.0.10",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "eslint": "^9.21.0",
        "eslint-plugin-react-hooks": "^5.1.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^15.15.0",
        "vite": "^6.2.0"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.26.2",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.9",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.26.8",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.26.10",
        "@babel/helper-compilation-targets": "^7.26.5",
        "@babel/helper-module-transforms": "^7.26.0",
        "@babel/helpers": "^7.26.10",
        "@babel/parser": "^7.26.10",
        "@babel/template": "^7.26.9",
        "@babel/traverse": "^7.26.10",
        "@babel/types": "^7.26.10",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.0.tgz",
      "integrity": "sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.0.tgz",
      "integrity": "sha512-LVk7fbXml0H2xH34dFzKQ7TDZ2G4/rVTOrq9V+icbbadjbVxxeFeDsNHv2SrZeWoA+6ZiTyWYWtScEIW07EAcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.26.8",
        "@babel/helper-validator-option": "^7.25.9",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.25.9",
        "@babel/types": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.26.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9",
        "@babel/traverse": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.26.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.0.tgz",
      "integrity": "sha512-U5eyP/CTFPuNE3qk+WZMxFkp/4zUzdceQlfzf7DdGdhp+Fezd7HD+i8Y24ZuTMKX3wQBld449jijbGq6OdGNQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.0.tgz",
      "integrity": "sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.9.tgz",
      "integrity": "sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.9.tgz",
      "integrity": "sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.0.tgz",
      "integrity": "sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.0.tgz",
      "integrity": "sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.27.0",
        "@babel/parser": "^7.27.0",
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.0.tgz",
      "integrity": "sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.2.tgz",
      "integrity": "sha512-wCIboOL2yXZym2cgm6mlA742s9QeJ8DjGVaL39dLN4rRwrOgOyYSnOaFPhKZGLb2ngj4EyfAFjsNJwPXZvseag==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.2.tgz",
      "integrity": "sha512-NQhH7jFstVY5x8CKbcfa166GoV0EFkaPkCKBQkdPJFvo5u+nGXLEH/ooniLb3QI8Fk58YAx7nsPLozUWfCBOJA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.2.tgz",
      "integrity": "sha512-5ZAX5xOmTligeBaeNEPnPaeEuah53Id2tX4c2CVP3JaROTH+j4fnfHCkr1PjXMd78hMst+TlkfKcW/DlTq0i4w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.2.tgz",
      "integrity": "sha512-Ffcx+nnma8Sge4jzddPHCZVRvIfQ0kMsUsCMcJRHkGJ1cDmhe4SsrYIjLUKn1xpHZybmOqCWwB0zQvsjdEHtkg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.2.tgz",
      "integrity": "sha512-MpM6LUVTXAzOvN4KbjzU/q5smzryuoNjlriAIx+06RpecwCkL9JpenNzpKd2YMzLJFOdPqBpuub6eVRP5IgiSA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.2.tgz",
      "integrity": "sha512-5eRPrTX7wFyuWe8FqEFPG2cU0+butQQVNcT4sVipqjLYQjjh8a8+vUTfgBKM88ObB85ahsnTwF7PSIt6PG+QkA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.2.tgz",
      "integrity": "sha512-mLwm4vXKiQ2UTSX4+ImyiPdiHjiZhIaE9QvC7sw0tZ6HoNMjYAqQpGyui5VRIi5sGd+uWq940gdCbY3VLvsO1w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.2.tgz",
      "integrity": "sha512-6qyyn6TjayJSwGpm8J9QYYGQcRgc90nmfdUb0O7pp1s4lTY+9D0H9O02v5JqGApUyiHOtkz6+1hZNvNtEhbwRQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.2.tgz",
      "integrity": "sha512-UHBRgJcmjJv5oeQF8EpTRZs/1knq6loLxTsjc3nxO9eXAPDLcWW55flrMVc97qFPbmZP31ta1AZVUKQzKTzb0g==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.2.tgz",
      "integrity": "sha512-gq/sjLsOyMT19I8obBISvhoYiZIAaGF8JpeXu1u8yPv8BE5HlWYobmlsfijFIZ9hIVGYkbdFhEqC0NvM4kNO0g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.2.tgz",
      "integrity": "sha512-bBYCv9obgW2cBP+2ZWfjYTU+f5cxRoGGQ5SeDbYdFCAZpYWrfjjfYwvUpP8MlKbP0nwZ5gyOU/0aUzZ5HWPuvQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.2.tgz",
      "integrity": "sha512-SHNGiKtvnU2dBlM5D8CXRFdd+6etgZ9dXfaPCeJtz+37PIUlixvlIhI23L5khKXs3DIzAn9V8v+qb1TRKrgT5w==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.2.tgz",
      "integrity": "sha512-hDDRlzE6rPeoj+5fsADqdUZl1OzqDYow4TB4Y/3PlKBD0ph1e6uPHzIQcv2Z65u2K0kpeByIyAjCmjn1hJgG0Q==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.2.tgz",
      "integrity": "sha512-tsHu2RRSWzipmUi9UBDEzc0nLc4HtpZEI5Ba+Omms5456x5WaNuiG3u7xh5AO6sipnJ9r4cRWQB2tUjPyIkc6g==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.2.tgz",
      "integrity": "sha512-k4LtpgV7NJQOml/10uPU0s4SAXGnowi5qBSjaLWMojNCUICNu7TshqHLAEbkBdAszL5TabfvQ48kK84hyFzjnw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.2.tgz",
      "integrity": "sha512-GRa4IshOdvKY7M/rDpRR3gkiTNp34M0eLTaC1a08gNrh4u488aPhuZOCpkF6+2wl3zAN7L7XIpOFBhnaE3/Q8Q==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.2.tgz",
      "integrity": "sha512-QInHERlqpTTZ4FRB0fROQWXcYRD64lAoiegezDunLpalZMjcUcld3YzZmVJ2H/Cp0wJRZ8Xtjtj0cEHhYc/uUg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.2.tgz",
      "integrity": "sha512-talAIBoY5M8vHc6EeI2WW9d/CkiO9MQJ0IOWX8hrLhxGbro/vBXJvaQXefW2cP0z0nQVTdQ/eNyGFV1GSKrxfw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.2.tgz",
      "integrity": "sha512-voZT9Z+tpOxrvfKFyfDYPc4DO4rk06qamv1a/fkuzHpiVBMOhpjK+vBmWM8J1eiB3OLSMFYNaOaBNLXGChf5tg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.2.tgz",
      "integrity": "sha512-dcXYOC6NXOqcykeDlwId9kB6OkPUxOEqU+rkrYVqJbK2hagWOMrsTGsMr8+rW02M+d5Op5NNlgMmjzecaRf7Tg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.2.tgz",
      "integrity": "sha512-t/TkWwahkH0Tsgoq1Ju7QfgGhArkGLkF1uYz8nQS/PPFlXbP5YgRpqQR3ARRiC2iXoLTWFxc6DJMSK10dVXluw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.2.tgz",
      "integrity": "sha512-cfZH1co2+imVdWCjd+D1gf9NjkchVhhdpgb1q5y6Hcv9TP6Zi9ZG/beI3ig8TvwT9lH9dlxLq5MQBBgwuj4xvA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.2.tgz",
      "integrity": "sha512-7Loyjh+D/Nx/sOTzV8vfbB3GJuHdOQyrOryFdZvPHLf42Tk9ivBU5Aedi7iyX+x6rbn2Mh68T4qq1SDqJBQO5Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.2.tgz",
      "integrity": "sha512-WRJgsz9un0nqZJ4MfhabxaD9Ft8KioqU3JMinOTvobbX6MOSUigSBlogP8QB3uxpJDsFS6yN+3FDBdqE5lg9kg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.2.tgz",
      "integrity": "sha512-kM3HKb16VIXZyIeVrM1ygYmZBKybX8N4p754bw390wGO3Tf2j4L2/WYL+4suWujpgf6GBYs3jv7TyUivdd05JA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.6.0.tgz",
      "integrity": "sha512-WhCn7Z7TauhBtmzhvKpoQs0Wwb/kBcy4CwpuI0/eEIr2Lx2auxmulAzLr91wVZJaz47iUZdkXOK7WlAfxGKCnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.20.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
      "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.1.tgz",
      "integrity": "sha512-RI17tsD2frtDu/3dmI7QRrD4bedNKPM08ziRYaC5AhkGrzIAJelm9kJU1TznK+apx6V+cqRz8tfpEeG3oIyjxw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.24.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.24.0.tgz",
      "integrity": "sha512-uIY/y3z0uvOGX8cp1C2fiC4+ZmBhp6yZWkojtHL1YEMnRt1Y63HB9TM17proGEmeG7HeUY+UP36F0aknKYTpYA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.8",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.8.tgz",
      "integrity": "sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.13.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit/node_modules/@eslint/core": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.13.0.tgz",
      "integrity": "sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.0.tgz",
      "integrity": "sha512-+Fbls/diZ0RDerhE8kyC6hjADCXA1K4yVNlH0EYfd2XjyH0UGgzaQ8MlT0pCXAThfxv3QUAczHaL+qSv1E4/Cg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.0.tgz",
      "integrity": "sha512-PPA6aEEsTPRz+/4xxAmaoWDqh67N7wFbgFUJGMnanCFs0TV99M0M8QhhaSCks+n6EbQoFvLQgYOGXxlMGQe/6w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.0.tgz",
      "integrity": "sha512-GwYOcOakYHdfnjjKwqpTGgn5a6cUX7+Ra2HeNj/GdXvO2VJOOXCiYYlRFU4CubFM67EhbmzLOmACKEfvp3J1kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.0.tgz",
      "integrity": "sha512-CoLEGJ+2eheqD9KBSxmma6ld01czS52Iw0e2qMZNpPDlf7Z9mj8xmMemxEucinev4LgHalDPczMyxzbq+Q+EtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.0.tgz",
      "integrity": "sha512-r7yGiS4HN/kibvESzmrOB/PxKMhPTlz+FcGvoUIKYoTyGd5toHp48g1uZy1o1xQvybwwpqpe010JrcGG2s5nkg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.0.tgz",
      "integrity": "sha512-mVDxzlf0oLzV3oZOr0SMJ0lSDd3xC4CmnWJ8Val8isp9jRGl5Dq//LLDSPFrasS7pSm6m5xAcKaw3sHXhBjoRw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.0.tgz",
      "integrity": "sha512-y/qUMOpJxBMy8xCXD++jeu8t7kzjlOCkoxxajL58G62PJGBZVl/Gwpm7JK9+YvlB701rcQTzjUZ1JgUoPTnoQA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.0.tgz",
      "integrity": "sha512-GoCsPibtVdJFPv/BOIvBKO/XmwZLwaNWdyD8TKlXuqp0veo2sHE+A/vpMQ5iSArRUz/uaoj4h5S6Pn0+PdhRjg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.0.tgz",
      "integrity": "sha512-L5ZLphTjjAD9leJzSLI7rr8fNqJMlGDKlazW2tX4IUF9P7R5TMQPElpH82Q7eNIDQnQlAyiNVfRPfP2vM5Avvg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.0.tgz",
      "integrity": "sha512-ATZvCRGCDtv1Y4gpDIXsS+wfFeFuLwVxyUBSLawjgXK2tRE6fnsQEkE4csQQYWlBlsFztRzCnBvWVfcae/1qxQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.0.tgz",
      "integrity": "sha512-wG9e2XtIhd++QugU5MD9i7OnpaVb08ji3P1y/hNbxrQ3sYEelKJOq1UJ5dXczeo6Hj2rfDEL5GdtkMSVLa/AOg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.0.tgz",
      "integrity": "sha512-vgXfWmj0f3jAUvC7TZSU/m/cOE558ILWDzS7jBhiCAFpY2WEBn5jqgbqvmzlMjtp8KlLcBlXVD2mkTSEQE6Ixw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.0.tgz",
      "integrity": "sha512-uJkYTugqtPZBS3Z136arevt/FsKTF/J9dEMTX/cwR7lsAW4bShzI2R0pJVw+hcBTWF4dxVckYh72Hk3/hWNKvA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.0.tgz",
      "integrity": "sha512-rKmSj6EXQRnhSkE22+WvrqOqRtk733x3p5sWpZilhmjnkHkpeCgWsFFo0dGnUGeA+OZjRl3+VYq+HyCOEuwcxQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.0.tgz",
      "integrity": "sha512-SpnYlAfKPOoVsQqmTFJ0usx0z84bzGOS9anAC0AZ3rdSo3snecihbhFTlJZ8XMwzqAcodjFU4+/SM311dqE5Sw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.0.tgz",
      "integrity": "sha512-RcDGMtqF9EFN8i2RYN2W+64CdHruJ5rPqrlYw+cgM3uOVPSsnAQps7cpjXe9be/yDp8UC7VLoCoKC8J3Kn2FkQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.0.tgz",
      "integrity": "sha512-HZvjpiUmSNx5zFgwtQAV1GaGazT2RWvqeDi0hV+AtC8unqqDSsaFjPxfsO6qPtKRRg25SisACWnJ37Yio8ttaw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.0.tgz",
      "integrity": "sha512-UtZQQI5k/b8d7d3i9AZmA/t+Q4tk3hOC0tMOMSq2GlMYOfxbesxG4mJSeDp0EHs30N9bsfwUvs3zF4v/RzOeTQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.0.tgz",
      "integrity": "sha512-+m03kvI2f5syIqHXCZLPVYplP8pQch9JHyXKZ3AGMKlg8dCyr2PKHjwRLiW53LTrN/Nc3EqHOKxUxzoSPdKddA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.0.tgz",
      "integrity": "sha512-lpPE1cLfP5oPzVjKMx10pgBmKELQnFJXHgvtHCtuJWOv8MxqdEIMNtgHgBFf7Ea2/7EuVwa9fodWUfXAlXZLZQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.1.tgz",
      "integrity": "sha512-ePapxDL7qrgqSF67s0h9m412d9DbXyC1n59O2st+9rjuuamWsZuD2w55rqY12CbzsZ7uVXb5Nw0gEp9Z8MMutQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.2",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.2.tgz",
      "integrity": "sha512-XGJkWF41Qq305SKWEILa1O8vzhb3aOo3ogBlSmiqNko/WmRb6QIaweuZCXjKygVDXpzXb5wyxKTSOsmkuqj+Qw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.3.4.tgz",
      "integrity": "sha512-SCCPBJtYLdE8PX/7ZQAs1QAZ8Jqwih+0VBLum1EGqmCCQal+MIUqLCzj3ZUy8ufbC0cAM4LRlSTm7IQJwWT4ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.26.0",
        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.14.2"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.8.4",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.8.4.tgz",
      "integrity": "sha512-eBSYY4Y68NNlHbHBMdeDmKNtDgXWhQsJcGqzO3iLUM0GraQFSS9cVgPX5I9b3lbdFKyYoAEGAZF1DwhTaljNAw==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001688",
        "electron-to-chromium": "^1.5.73",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.1"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001713",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001713.tgz",
      "integrity": "sha512-wCIWIg+A4Xr7NfhTuHdX+/FKh3+Op3LBbSp2N5Pfx6T/LhdQy3GTyoTg48BReaW/MyMNZAkTadsBtai3ldWK0Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.136",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.136.tgz",
      "integrity": "sha512-kL4+wUTD7RSA5FHx5YwWtjDnEEkIIikFgWHR4P6fqjw1PPLlqYkxeOb++wAauAssat0YClCy8Y3C5SxgSkjibQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/engine.io-client": {
      "version": "6.6.3",
      "resolved": "https://registry.npmjs.org/engine.io-client/-/engine.io-client-6.6.3.tgz",
      "integrity": "sha512-T0iLjnyNWahNyv/lcjS2y4oE358tVS/SYQNxYXGAJ9/GLgH4VCvOQ/mhTjqU88mLZCQgiG8RIegFHYCdVC+j5w==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1",
        "xmlhttprequest-ssl": "~2.1.1"
      }
    },
    "node_modules/engine.io-client/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.2.tgz",
      "integrity": "sha512-16854zccKPnC+toMywC+uKNeYSv+/eXkevRAfwRD/G9Cleq66m8XFIrigkbvauLLlCfDL45Q2cWegSg53gGBnQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.2",
        "@esbuild/android-arm": "0.25.2",
        "@esbuild/android-arm64": "0.25.2",
        "@esbuild/android-x64": "0.25.2",
        "@esbuild/darwin-arm64": "0.25.2",
        "@esbuild/darwin-x64": "0.25.2",
        "@esbuild/freebsd-arm64": "0.25.2",
        "@esbuild/freebsd-x64": "0.25.2",
        "@esbuild/linux-arm": "0.25.2",
        "@esbuild/linux-arm64": "0.25.2",
        "@esbuild/linux-ia32": "0.25.2",
        "@esbuild/linux-loong64": "0.25.2",
        "@esbuild/linux-mips64el": "0.25.2",
        "@esbuild/linux-ppc64": "0.25.2",
        "@esbuild/linux-riscv64": "0.25.2",
        "@esbuild/linux-s390x": "0.25.2",
        "@esbuild/linux-x64": "0.25.2",
        "@esbuild/netbsd-arm64": "0.25.2",
        "@esbuild/netbsd-x64": "0.25.2",
        "@esbuild/openbsd-arm64": "0.25.2",
        "@esbuild/openbsd-x64": "0.25.2",
        "@esbuild/sunos-x64": "0.25.2",
        "@esbuild/win32-arm64": "0.25.2",
        "@esbuild/win32-ia32": "0.25.2",
        "@esbuild/win32-x64": "0.25.2"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.24.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.24.0.tgz",
      "integrity": "sha512-eh/jxIEJyZrvbWRe4XuVclLPDYSYYYgLy5zXGGxD6j8zjSAxFEzI2fL/8xNq6O2yKqVt+eF2YhV+hxjV6UKXwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.20.0",
        "@eslint/config-helpers": "^0.2.0",
        "@eslint/core": "^0.12.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.24.0",
        "@eslint/plugin-kit": "^0.2.7",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.3.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.19",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.19.tgz",
      "integrity": "sha512-eyy8pcr/YxSYjBoqIFSrlbn9i/xvxUFa8CjzAYo9cFjgGXqq1hyjihcpZvxRLalpaWmueWR81xn7vuKmAFijDQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.2.tgz",
      "integrity": "sha512-hGfm/slu0ZabnNt4oaRZ6uREyfCj6P4fT/n6A1rGV+Z0VdGXjfOhVUpkn6qVQONHGIFwmveGXyDs75+nr6FM8w==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "15.15.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-15.15.0.tgz",
      "integrity": "sha512-7ACyT3wmyp3I61S4fG682L0VA2RGD9otkqGJIwNUMF1SWUombIIk+af1unuDYgMm082aHYwD+mzJvv9Iu8dsgg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.14.2",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.14.2.tgz",
      "integrity": "sha512-jCvmsr+1IUSMUyzOkRcvnVbX3ZYC6g9TDrDbFuFmRDq7PD4yaGbLKNQL6k2jnArV8hjYxh7hVhAZB6s9HDGpZA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.0",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.0.tgz",
      "integrity": "sha512-D3X8FyH9nBcTSHGdEKurK7r8OYE1kKFn3d/CF+CoxbSHkxU7o37+Uh7eAHRXr6k2tSExXYO++07PeXJtA/dEhQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.0",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.0.tgz",
      "integrity": "sha512-x30B78HV5tFk8ex0ITwzC9TTZMua4jGyA9IUlH1JLQYQTFyxr/ZxwOJq7evg1JX1qGVUcvhsmQSKdPncQrjTgA==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/rollup": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.0.tgz",
      "integrity": "sha512-Noe455xmA96nnqH5piFtLobsGbCij7Tu+tb3c1vYjNbTkfzGqXqQXG3wJaYXkRZuQ0vEYN4bhwg7QnIrqB5B+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.7"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.40.0",
        "@rollup/rollup-android-arm64": "4.40.0",
        "@rollup/rollup-darwin-arm64": "4.40.0",
        "@rollup/rollup-darwin-x64": "4.40.0",
        "@rollup/rollup-freebsd-arm64": "4.40.0",
        "@rollup/rollup-freebsd-x64": "4.40.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.40.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.40.0",
        "@rollup/rollup-linux-arm64-gnu": "4.40.0",
        "@rollup/rollup-linux-arm64-musl": "4.40.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.40.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-musl": "4.40.0",
        "@rollup/rollup-linux-s390x-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-musl": "4.40.0",
        "@rollup/rollup-win32-arm64-msvc": "4.40.0",
        "@rollup/rollup-win32-ia32-msvc": "4.40.0",
        "@rollup/rollup-win32-x64-msvc": "4.40.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/socket.io-client": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-4.8.1.tgz",
      "integrity": "sha512-hJVXfu3E28NmzGk8o1sHhN3om52tRvwYeidbj7xKy2eIIse5IoKX3USlS6Tqt3BHAtflLIkCQBkzVrEEfWUyYQ==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.2",
        "engine.io-client": "~6.6.1",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-client/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/vite": {
      "version": "6.2.6",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.2.6.tgz",
      "integrity": "sha512-9xpjNl3kR4rVDZgPNdTL0/c6ao4km69a/2ihNQbcANz8RuCOK3hQBmLSJf3bRKVQjVMda+YvizNE8AwvogcPbw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "postcss": "^8.5.3",
        "rollup": "^4.30.1"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xmlhttprequest-ssl": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-2.1.2.tgz",
      "integrity": "sha512-TEU+nJVUUnA4CYJFLvK5X9AOeH4KvDvhIfm0vV1GaQRtchnG0hgK5p8hw/xjv8cunWYCsiPCSDzObPyhEwq3KQ==",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}





--- File: mpl-frontend\package.json ---


{
  "name": "mpl-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^6.30.0",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.21.0",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.21.0",
    "eslint-plugin-react-hooks": "^5.1.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^15.15.0",
    "vite": "^6.2.0"
  }
}





--- File: mpl-frontend\README.md ---


# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript and enable type-aware lint rules. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.





--- File: mpl-frontend\vite.config.js ---


import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})





--- File: mpl-frontend\src\App.css ---


#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}





--- File: mpl-frontend\src\App.jsx ---


// mpl-project/mpl-frontend/src/App.jsx
import React, { Suspense, lazy } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';

// --- Core Components ---
import Navbar from './components/Navbar';
import PrivateRoute from './components/PrivateRoute'; // Component to protect admin routes
import LoadingFallback from './components/LoadingFallback'; // Loading indicator for lazy loading

// --- Lazy Load Pages (improves initial load time) ---
// Public Pages
const HomePage = lazy(() => import('./pages/HomePage'));
const PlayersPage = lazy(() => import('./pages/PlayersPage'));
const PlayerDetailPage = lazy(() => import('./pages/PlayerDetailPage'));
const SchedulePage = lazy(() => import('./pages/SchedulePage'));
const StandingsPage = lazy(() => import('./pages/StandingsPage'));
const MatchDetailPage = lazy(() => import('./pages/MatchDetailPage')); // Live match viewer
const AdminSchedulePage = lazy(() => import('./pages/admin/AdminSchedulePage'));
const LeaderboardPage = lazy(() => import('./pages/LeaderboardPage'));
// Admin Pages
const AdminLoginPage = lazy(() => import('./pages/admin/AdminLoginPage'));
const AdminDashboardPage = lazy(() => import('./pages/admin/AdminDashboardPage'));
const AdminSeasonsPage = lazy(() => import('./pages/admin/AdminSeasonsPage'));
const AdminTeamsPage = lazy(() => import('./pages/admin/AdminTeamsPage'));
const AdminMatchSetupPage = lazy(() => import('./pages/admin/AdminMatchSetupPage'));
const AdminLiveScoringPage = lazy(() => import('./pages/admin/AdminLiveScoringPage'));
const AdminPlayersPage = lazy(() => import('./pages/admin/AdminPlayersPage'));
const AdminResolveMatchPage = lazy(() => import('./pages/admin/AdminResolveMatchPage'));
// TODO: Import other admin pages (e.g., AdminPaymentsPage, AdminPlayerManagementPage) when created

// Not Found Page
const NotFoundPage = lazy(() => import('./pages/NotFoundPage'));


function App() {
    return (
        <Router> {/* BrowserRouter provides routing context */}
            <Navbar /> {/* Navigation bar present on all pages */}
            <main> {/* Main content area */}
                 {/* Suspense provides a fallback UI while lazy-loaded components are loading */}
                <Suspense fallback={<LoadingFallback />}>
                    <Routes> {/* Defines the available routes */}

                        {/* --- Public Routes --- */}
                        <Route path="/" element={<HomePage />} />
                        <Route path="/players" element={<PlayersPage />} />
                        <Route path="/players/:id" element={<PlayerDetailPage />} />
                        <Route path="/schedule" element={<SchedulePage />} />
                        <Route path="/standings" element={<StandingsPage />} />
                        <Route path="/matches/:matchId" element={<MatchDetailPage />} />
                        <Route path="/leaderboard" element={<LeaderboardPage />} />

                        {/* --- Admin Routes --- */}
                        {/* Admin Login Page (Publicly accessible) */}
                        <Route path="/admin/login" element={<AdminLoginPage />} />

                        {/* Protected Admin Area - uses PrivateRoute component */}
                        <Route path="/admin" element={<PrivateRoute />}>
                            {/* Nested routes accessible only if authenticated */}
                            {/* Redirect /admin to /admin/dashboard */}
                            <Route index element={<Navigate to="dashboard" replace />} />
                            <Route path="dashboard" element={<AdminDashboardPage />} />
                            <Route path="seasons" element={<AdminSeasonsPage />} />
                            {/* TODO: Define routes for managing teams within a season?
                                Maybe '/admin/seasons/:seasonId/teams' or handle season selection within AdminTeamsPage */}
                            <Route path="teams" element={<AdminTeamsPage />} />
                            <Route path="schedule" element={<AdminSchedulePage />} />
                            <Route path="players" element={<AdminPlayersPage />} />
                            <Route path="scoring/setup" element={<AdminMatchSetupPage />} />
                            <Route path="scoring/live/:matchId" element={<AdminLiveScoringPage />} />
                            <Route path="resolve" element={<AdminResolveMatchPage />} />
                            {/* Add other protected admin routes here */}
                            {/* Example: <Route path="payments" element={<AdminPaymentsPage />} /> */}
                        </Route>

                        {/* --- Catch-all 404 Not Found Route --- */}
                        {/* This route matches any path not defined above */}
                         <Route path="*" element={<NotFoundPage />} />

                    </Routes>
                 </Suspense>
            </main>
            {/* Optional: Footer component */}
        </Router>
    );
}

export default App;




--- File: mpl-frontend\src\index.css ---


/* mpl-project/mpl-frontend/src/index.css */

/* Basic Reset / Defaults */
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
  width: 100%;
}

/* Basic Layout */
main {
    max-width: 1200px;
    margin: 1rem auto; /* Add margin below nav */
    padding: 1rem;
    text-align: left; /* Override centered text for main content */
    background-color: #2f2f2f; /* Slightly lighter background for content area */
    border-radius: 8px;
    min-height: 70vh; /* Ensure content area takes up space */
}


/* Links */
a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}


/* Buttons */
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
  margin: 0.25em; /* Add some margin */
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}
button:disabled {
    background-color: #444;
    color: #888;
    cursor: not-allowed;
    border-color: #555;
}


/* Forms */
form {
    display: flex;
    flex-direction: column;
    gap: 0.8rem; /* Spacing between form elements */
    margin-top: 1rem;
    padding: 1rem;
    background-color: #333;
    border-radius: 5px;
}

form div {
    display: flex;
    flex-direction: column; /* Stack label and input */
}

form label {
    margin-bottom: 0.3rem;
    font-weight: bold;
    text-align: left;
}

form input[type="text"],
form input[type="email"],
form input[type="password"],
form input[type="number"],
form input[type="date"],
form select,
form textarea {
    padding: 0.6rem;
    border: 1px solid #555;
    background-color: #fcffe3;
    color: inherit; /* Inherit text color */
    border-radius: 4px;
    box-sizing: border-box; /* Include padding in width */
    width: 100%; /* Make inputs take full width of container */
    max-width: 400px; /* Limit max width */
}
form textarea {
    min-height: 80px;
}


/* Tables */
table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    margin-bottom: 1rem;
    background-color: #333; /* Table background */
}

th, td {
    border: 1px solid #555; /* Darker borders */
    padding: 0.6rem 0.8rem;
    text-align: left;
}

th {
    background-color: #444; /* Header background */
    font-weight: bold;
}

tr:nth-child(even) {
    background-color: #3a3a3a; /* Slightly different row color */
}

/* Navigation */
nav {
    display: flex;
    align-items: center; /* Vertically align items */
    background: #1a1a1a;
    padding: 0.8rem 1.5rem;
    margin-bottom: 1.5rem;
    border-bottom: 2px solid #444;
    flex-wrap: wrap; /* Allow items to wrap on smaller screens */
    gap: 0.5rem 1rem; /* Spacing between nav items */
}

nav a {
    color: #a0a0ff; /* Lighter blue for links */
    padding: 0.3rem 0; /* Add some padding */
    border-bottom: 2px solid transparent; /* For active style indication */
    transition: color 0.2s, border-color 0.2s;
}
nav a:hover {
    color: #c0c0ff;
}

nav .active { /* Class added by NavLink */
    font-weight: bold;
    color: #fff;
    border-bottom-color: #646cff;
}

/* Utility class for pushing items to the right */
.nav-right {
    margin-left: auto;
    display: flex; /* Keep items inside aligned */
    align-items: center;
    gap: 0.5rem 1rem; /* Spacing for right-aligned items */
}

/* Error Messages */
.error-message {
    color: #ff8080; /* Lighter red for dark mode */
    background-color: #402020;
    border: 1px solid #804040;
    padding: 0.8rem;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
    border-radius: 4px;
    text-align: left;
}

/* Loading Fallback */
.loading-fallback {
    text-align: center;
    padding: 3rem;
    font-size: 1.2em;
    color: #aaa;
}


/* Dark mode specific overrides (if needed, :root handles basic dark mode) */
@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
  main { background-color: #f0f0f0; }
  form { background-color: #e8e8e8; }
  form input, form select, form textarea { background-color: #fff; border-color: #ccc; color: #333; }
  table { background-color: #f9f9f9; }
  th, td { border-color: #ccc; }
  th { background-color: #e8e8e8; }
  tr:nth-child(even) { background-color: #f2f2f2; }
  nav { background-color: #e8e8e8; border-color: #ccc; }
  nav a { color: #0000d0; }
  nav a:hover { color: #0000ff; }
  nav .active { color: #000; border-color: #0000ff; }
  .error-message { color: #a00; background-color: #fdd; border-color: #fbb; }
  .loading-fallback { color: #555; }

}

/* ================================== */
/* Responsive Adjustments (Tablets & Phones) */
/* ================================== */

@media (max-width: 768px) {
  :root {
      /* Optional: Slightly reduce base font size for smaller screens */
      /* font-size: 15px; */
  }

  #root {
      padding: 1rem; /* Reduce overall padding */
  }

  main {
      padding: 0.8rem; /* Reduce padding within main content area */
      margin: 0.8rem auto;
  }

  h1 { font-size: 1.8em; }
  h2 { font-size: 1.5em; }
  h3 { font-size: 1.25em; }

  nav {
      padding: 0.6rem 1rem; /* Reduce navbar padding */
      gap: 0.4rem 0.8rem; /* Slightly reduce gap */
      justify-content: space-between; /* Ensure items spread out */
  }

  /* Make nav items slightly smaller */
  nav a {
      font-size: 0.95em;
  }
  .nav-right {
       margin-left: 0; /* Remove auto margin when wrapping */
       gap: 0.4rem 0.8rem;
  }
  .nav-right button {
      padding: 0.4em 0.8em;
      font-size: 0.9em;
  }

  /* General table adjustments */
  table {
      font-size: 0.9em; /* Slightly smaller table text */
  }
  th, td {
      padding: 0.4rem 0.5rem; /* Reduce cell padding */
  }

  /* Form adjustments */
  form {
      gap: 0.6rem;
      padding: 0.8rem;
  }
  form input[type="text"],
  form input[type="email"],
  form input[type="password"],
  form input[type="number"],
  form input[type="date"],
  form input[type="datetime-local"],
  form select,
  form textarea {
      padding: 0.5rem;
      max-width: none; /* Allow inputs to take full width */
  }

  button {
      padding: 0.5em 1em; /* Slightly smaller buttons */
      font-size: 0.95em;
  }
}

@media (max-width: 480px) {
   #root {
      padding: 0.5rem;
   }
   main {
      padding: 0.5rem;
      margin: 0.5rem auto;
      border-radius: 4px; /* Less rounding on small screens */
   }
   h1 { font-size: 1.6em; }
   h2 { font-size: 1.3em; }
   h3 { font-size: 1.15em; }

   nav {
      flex-direction: column; /* Stack nav items vertically */
      align-items: flex-start; /* Align items to the start */
      gap: 0.5rem;
   }
    .nav-right {
      width: 100%; /* Make admin section take full width */
      justify-content: flex-start; /* Align to start */
      margin-top: 0.5rem;
   }
}




--- File: mpl-frontend\src\main.jsx ---


// mpl-project/mpl-frontend/src/main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx' // Your main App component
import { SocketProvider } from './context/SocketContext.jsx'; // Import the SocketProvider
import './index.css' // Import global styles

// Get the root element from index.html
const rootElement = document.getElementById('root');

// Create a React root
const root = ReactDOM.createRoot(rootElement);

// Render the application
root.render(
  <React.StrictMode> {/* Enables checks and warnings during development */}
    <SocketProvider> {/* Wrap the entire App with SocketProvider so context is available everywhere */}
      <App />
    </SocketProvider>
  </React.StrictMode>,
)




--- File: mpl-frontend\src\components\BowlingScorecard.jsx ---


// src/components/BowlingScorecard.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import './Scorecard.css'; // Reuse scorecard styles

const BowlingScorecard = ({ stats, teamName, inningsNumber }) => {
    // ** Placeholder Check: Remove or modify when backend provides data **
    if (!stats || stats.length === 0) {
        console.warn(`Bowling stats prop missing or empty for ${teamName} Innings ${inningsNumber}. Backend needs to provide this.`);
        // Return null or a message, depending on desired behavior
        return <p>Bowling scorecard data not available for {teamName} (Innings {inningsNumber}).</p>;
    }

    // Helper to calculate Economy Rate safely
    const calculateEcon = (runs, oversDecimal) => {
        if (oversDecimal == null || oversDecimal <= 0 || isNaN(runs) || isNaN(oversDecimal)) return "-";
        // Convert decimal overs to balls, then back to overs for calculation
        const completedOvers = Math.floor(oversDecimal);
        const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
        const totalBalls = (completedOvers * 6) + ballsInPartialOver;
        if (totalBalls === 0) return "-";
        const properOvers = totalBalls / 6;
        const econ = parseInt(runs) / properOvers;
        return econ.toFixed(2); // Format to 2 decimal places
    };

    // Format Overs
    const formatOvers = (oversDecimal) => {
        if (oversDecimal == null || isNaN(oversDecimal)) return "-";
        const completedOvers = Math.floor(oversDecimal);
        const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
        return `${completedOvers}.${ballsInPartialOver}`;
    };


    return (
        <div className="scorecard-container">
            <h4>{teamName} - Innings {inningsNumber} Bowling</h4>
            <div className="table-responsive">
                <table className="scorecard-table bowling-scorecard">
                    <thead>
                        <tr>
                            <th>Bowler</th>
                            <th>Overs</th>
                            <th>Maidens</th>
                            <th>Runs</th>
                            <th>Wkts</th>
                            <th>Econ</th>
                            <th>Wd</th>
                            <th>NB</th>
                        </tr>
                    </thead>
                    <tbody>
                        {stats.map((stat) => (
                            // Make sure backend provides unique key, like player_id for this bowler
                            <tr key={`${inningsNumber}-bowl-${stat.player_id}`}>
                                <td className="player-name">
                                    <Link to={`/players/${stat.player_id}`}>{stat.player_name}</Link>
                                </td>
                                <td className="overs">{formatOvers(stat.overs_bowled)}</td>
                                <td className="maidens">{stat.maidens ?? 0}</td>
                                <td className="runs-conceded">{stat.runs_conceded ?? 0}</td>
                                <td className="wickets">{stat.wickets_taken ?? 0}</td>
                                <td className="economy">{calculateEcon(stat.runs_conceded, stat.overs_bowled)}</td>
                                <td className="wides">{stat.wides ?? 0}</td>
                                <td className="noballs">{stat.no_balls ?? 0}</td>
                            </tr>
                        ))}
                        {/* TODO: Add Totals row */}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default BowlingScorecard;




--- File: mpl-frontend\src\components\InningsScorecard.jsx ---


// src/components/InningsScorecard.jsx
import React from 'react';
import { Link } from 'react-router-dom'; // Import Link
import './Scorecard.css'; // Import specific CSS for scorecards

const InningsScorecard = ({ stats, teamName, inningsNumber }) => {
    if (!stats || stats.length === 0) {
        return <p>Batting scorecard data not available for {teamName} (Innings {inningsNumber}).</p>;
    }

    // Helper to calculate Strike Rate safely
    const calculateSR = (runs, balls) => {
        if (!balls || balls === 0 || isNaN(runs) || isNaN(balls)) return "-";
        const rate = (parseInt(runs) / parseInt(balls)) * 100;
        return rate.toFixed(1); // Format to 1 decimal place
    };

    // Helper to format dismissal
    const formatDismissal = (stat) => {
        if (!stat.is_out) return <span className="not-out">Not Out</span>; // Style 'Not Out' differently
        let dismissal = stat.how_out || "Out";
        // Example: Add links if backend provides bowler/fielder names/IDs linked to dismissal
        // if (stat.bowler_id) dismissal += ` b ${stat.bowler_name || stat.bowler_id}`;
        // if (stat.fielder_id) dismissal += ` c ${stat.fielder_name || stat.fielder_id}`;
        return dismissal;
    };

    return (
        <div className="scorecard-container">
            <h4>{teamName} - Innings {inningsNumber} Batting</h4>
            <div className="table-responsive"> {/* Wrapper for horizontal scroll */}
                <table className="scorecard-table batting-scorecard">
                    <thead>
                        <tr>
                            <th>Batsman</th>
                            <th>Dismissal</th>
                            <th>Runs</th>
                            <th>Balls</th>
                            <th>4s</th>
                            <th>6s</th>
                            <th>SR</th>
                        </tr>
                    </thead>
                    <tbody>
                        {stats.map((stat) => (
                            <tr key={`${inningsNumber}-bat-${stat.player_id}`}>
                                {/* Add Link to player name */}
                                <td className="player-name">
                                    <Link to={`/players/${stat.player_id}`}>{stat.player_name}</Link>
                                </td>
                                <td className="dismissal">{formatDismissal(stat)}</td>
                                <td className="runs">{stat.runs_scored ?? 0}</td>
                                <td className="balls">{stat.balls_faced ?? 0}</td>
                                <td className="fours">{stat.fours ?? 0}</td>
                                <td className="sixes">{stat.sixes ?? 0}</td>
                                <td className="strike-rate">{calculateSR(stat.runs_scored, stat.balls_faced)}</td>
                            </tr>
                        ))}
                        {/* TODO: Add Totals row */}
                    </tbody>
                </table>
            </div>
            {/* TODO: Add Extras breakdown */}
        </div>
    );
};

export default InningsScorecard;




--- File: mpl-frontend\src\components\LoadingFallback.jsx ---


// mpl-project/mpl-frontend/src/components/LoadingFallback.jsx
import React from 'react';

// Simple loading indicator component to use with React.Suspense
const LoadingFallback = () => (
    <div className="loading-fallback"> {/* Use class for styling */}
        Loading...
        {/* Optional: Add a spinner animation here */}
    </div>
);

export default LoadingFallback;




--- File: mpl-frontend\src\components\Navbar.jsx ---


// mpl-project/mpl-frontend/src/components/Navbar.jsx
import React, { useState, useEffect } from 'react';
import { NavLink, useNavigate } from 'react-router-dom'; // Use NavLink for active styling

function Navbar() {
    const navigate = useNavigate();
    // State to track login status for immediate UI updates
    const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);

    // Function to check login status from localStorage
    const checkLoginStatus = () => {
       let loggedIn = false;
       try {
           const adminInfoString = localStorage.getItem('adminInfo');
           if (adminInfoString) {
               const adminInfo = JSON.parse(adminInfoString);
               // Basic check: Does a token exist?
               // Optional: Add more robust check (e.g., decode token, check expiry)
               loggedIn = !!adminInfo?.token;
           }
       } catch (error) {
            console.error("Error reading admin login status:", error);
            // Ensure logged out state if storage is corrupted
            localStorage.removeItem('adminInfo');
       }
       setIsAdminLoggedIn(loggedIn);
    };


    // Check login status on initial component mount
    useEffect(() => {
       checkLoginStatus();

       // Optional: Listen for storage events to sync login status across tabs/windows
       // This helps if the user logs in/out in another tab.
       const handleStorageChange = (event) => {
            if (event.key === 'adminInfo') {
                console.log("Storage changed for adminInfo, re-checking login status.");
                checkLoginStatus();
           }
       };
       window.addEventListener('storage', handleStorageChange);

       // Cleanup listener on component unmount
       return () => {
           window.removeEventListener('storage', handleStorageChange);
       };
    }, []); // Empty dependency array ensures this runs only once on mount


    // Handler for the logout button
    const logoutHandler = () => {
        console.log("Admin logging out.");
        localStorage.removeItem('adminInfo'); // Clear authentication info
        setIsAdminLoggedIn(false); // Update UI state immediately
        navigate('/admin/login'); // Redirect to the login page
    };

    return (
        <nav>
           {/* Use NavLink for automatic 'active' class */}
            <NavLink to="/" className={({ isActive }) => isActive ? 'active' : ''}>Home</NavLink>
            <NavLink to="/players" className={({ isActive }) => isActive ? 'active' : ''}>Players</NavLink>
            <NavLink to="/schedule" className={({ isActive }) => isActive ? 'active' : ''}>Schedule</NavLink>
            <NavLink to="/standings" className={({ isActive }) => isActive ? 'active' : ''}>Standings</NavLink> 
            <NavLink to="/leaderboard" className={({ isActive }) => isActive ? 'active' : ''}>Leaderboard</NavLink> 
            {/* Add other public navigation links here */}

            {/* Right-aligned section for admin links/button */}
            <div className="nav-right"> {/* Use CSS class for alignment */}
                {isAdminLoggedIn ? (
                    <>
                        <NavLink to="/admin/dashboard" className={({ isActive }) => isActive ? 'active' : ''}>Admin</NavLink>
                        <button onClick={logoutHandler}>Logout</button>
                    </>
                ) : (
                    <NavLink to="/admin/login" className={({ isActive }) => isActive ? 'active' : ''}>Admin Login</NavLink>
                )}
            </div>
        </nav>
    );
}
export default Navbar;




--- File: mpl-frontend\src\components\PrivateRoute.jsx ---


// mpl-project/mpl-frontend/src/components/PrivateRoute.jsx
import React, { useState, useEffect } from 'react';
import { Navigate, Outlet, useLocation } from 'react-router-dom';
import LoadingFallback from './LoadingFallback'; // Import loading indicator

/**
 * A component that wraps routes requiring admin authentication.
 * It checks for a valid token in localStorage.
 * If authenticated, it renders the child routes (using <Outlet />).
 * If not authenticated, it redirects the user to the admin login page,
 * preserving the original intended destination for redirection after login.
 */
const PrivateRoute = () => {
    const location = useLocation(); // Get current location object
    // State to manage authentication check status: null (checking), true (auth), false (not auth)
    const [isAuthenticated, setIsAuthenticated] = useState(null);

    // Effect to check authentication status when the component mounts or location changes
    useEffect(() => {
        console.log("PrivateRoute: Checking authentication status...");
        let isAdminAuthenticated = false;
        try {
            const adminInfoString = localStorage.getItem('adminInfo');
            if (adminInfoString) {
                const adminInfo = JSON.parse(adminInfoString);
                // Basic check for token existence.
                // TODO: Implement more robust validation if needed (e.g., token expiry check using jwt-decode library)
                if (adminInfo?.token) {
                    isAdminAuthenticated = true;
                    // Example using jwt-decode (install `jwt-decode` package first):
                    // import jwt_decode from 'jwt-decode';
                    // try {
                    //   const decodedToken = jwt_decode(adminInfo.token);
                    //   const currentTime = Date.now() / 1000; // Convert to seconds
                    //   if (decodedToken.exp > currentTime) {
                    //     isAdminAuthenticated = true; // Token exists and is not expired
                    //     console.log("PrivateRoute: Token valid.");
                    //   } else {
                    //     console.warn("PrivateRoute: Token expired.");
                    //     localStorage.removeItem('adminInfo'); // Remove expired token
                    //   }
                    // } catch (decodeError) {
                    //   console.error("PrivateRoute: Error decoding token:", decodeError);
                    //   localStorage.removeItem('adminInfo'); // Remove invalid token
                    // }
                }
            }
        } catch (error) {
             console.error("PrivateRoute: Error reading auth status from storage:", error);
             localStorage.removeItem('adminInfo'); // Clear potentially corrupted item
        }
        setIsAuthenticated(isAdminAuthenticated);
        console.log(`PrivateRoute: Authentication status set to ${isAdminAuthenticated}`);

    }, [location]); // Re-check if the location changes (might not be strictly necessary)

    // While checking authentication, show a loading indicator
    if (isAuthenticated === null) {
        return <LoadingFallback />;
    }

    // If not authenticated, redirect to the login page
    if (!isAuthenticated) {
        console.log(`PrivateRoute: Not authenticated. Redirecting from ${location.pathname} to /admin/login.`);
        // Pass the current location via state so the login page can redirect back after success.
        // `replace` prevents the current (protected) route from being added to history.
        return <Navigate to="/admin/login" state={{ from: location }} replace />;
    }

    // If authenticated, render the nested child routes defined within this PrivateRoute in App.jsx
    return <Outlet />;
};

export default PrivateRoute;




--- File: mpl-frontend\src\components\Scorecard.css ---


/* src/components/Scorecard.css */

.scorecard-container {
    margin-bottom: 2rem; /* Space between scorecards */
    padding: 1rem;
    border: 1px solid #444; /* Slightly visible border */
    border-radius: 8px;
    background-color: #383838; /* Slightly different background */
}

.scorecard-container h4 {
    margin-top: 0;
    margin-bottom: 1rem;
    border-bottom: 1px solid #555;
    padding-bottom: 0.5rem;
    color: #eee;
}

/* Make table scroll horizontally on small screens */
.table-responsive {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
}

.scorecard-table {
    width: 100%;
    min-width: 600px; /* Ensure table has minimum width before scrolling */
    border-collapse: collapse;
    font-size: 0.95em;
}

.scorecard-table th,
.scorecard-table td {
    border: 1px solid #555;
    padding: 0.5rem 0.7rem; /* Slightly adjust padding */
    text-align: left;
    vertical-align: middle;
}

.scorecard-table th {
    background-color: #4a4a4a; /* Darker header */
    font-weight: bold;
    white-space: nowrap; /* Prevent headers from wrapping */
}

.scorecard-table tbody tr:nth-child(even) {
    background-color: #404040; /* Subtle alternating row */
}

.scorecard-table tbody tr:hover {
    background-color: #4f4f4f; /* Hover effect */
}

/* Specific column styles */
.scorecard-table .player-name {
    font-weight: 500;
    min-width: 150px;
}
.scorecard-table .player-name a {
    color: #a0a0ff;
    text-decoration: none;
}
.scorecard-table .player-name a:hover {
    text-decoration: underline;
    color: #c0c0ff;
}

.scorecard-table .dismissal {
    font-size: 0.9em;
    color: #ccc;
    min-width: 120px;
}
.scorecard-table .dismissal .not-out {
    color: #a0ffa0; /* Greenish for Not Out */
    font-style: italic;
}

/* Align numeric columns to the right */
.scorecard-table .runs,
.scorecard-table .balls,
.scorecard-table .fours,
.scorecard-table .sixes,
.scorecard-table .strike-rate,
.scorecard-table .overs,
.scorecard-table .maidens,
.scorecard-table .runs-conceded,
.scorecard-table .wickets,
.scorecard-table .economy,
.scorecard-table .wides,
.scorecard-table .noballs {
    text-align: right;
    font-variant-numeric: tabular-nums; /* Ensures numbers align well */
}

/* Light mode adjustments */
@media (prefers-color-scheme: light) {
  .scorecard-container {
    border-color: #ddd;
    background-color: #f9f9f9;
  }
  .scorecard-container h4 {
    border-color: #ddd;
    color: #333;
  }
  .scorecard-table th,
  .scorecard-table td {
    border-color: #ddd;
  }
  .scorecard-table th {
    background-color: #e8e8e8;
  }
  .scorecard-table tbody tr:nth-child(even) {
    background-color: #f2f2f2;
  }
  .scorecard-table tbody tr:hover {
    background-color: #e9e9e9;
  }
   .scorecard-table .player-name a {
    color: #0000d0;
   }
    .scorecard-table .player-name a:hover {
    color: #0000ff;
   }
   .scorecard-table .dismissal {
    color: #555;
   }
   .scorecard-table .dismissal .not-out {
    color: #008000; /* Darker green */
   }
}

/* Add these styles AT THE END of src/components/Scorecard.css */

@media (max-width: 768px) {
    .scorecard-table {
        font-size: 0.9em;
    }
    .scorecard-table th,
    .scorecard-table td {
        padding: 0.4rem 0.6rem;
    }
     .scorecard-container h4 {
        font-size: 1.1em; /* Slightly smaller heading */
    }
}

@media (max-width: 480px) {
    .scorecard-table {
        font-size: 0.85em;
    }
     .scorecard-table th,
    .scorecard-table td {
        padding: 0.3rem 0.4rem;
    }
     .scorecard-container h4 {
        font-size: 1em;
    }
     /* Optional: Hide columns if needed */
}




--- File: mpl-frontend\src\context\SocketContext.jsx ---


// mpl-project/mpl-frontend/src/context/SocketContext.jsx
import React, { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react';
import { io } from 'socket.io-client';

// Determine the base URL for the Socket.IO server from environment variables or use a default
const SOCKET_URL = import.meta.env.VITE_SOCKET_URL || 'http://localhost:5000';
console.log(`Socket Context configured for URL: ${SOCKET_URL}`);

// Create the React Context object
const SocketContext = createContext(null);

// Custom hook to easily consume the Socket context in components
export const useSocket = () => {
    const context = useContext(SocketContext);
    if (!context) {
        // Ensure the hook is used within a component wrapped by SocketProvider
        throw new Error('useSocket must be used within a SocketProvider');
    }
    return context;
};

// The Provider component that wraps parts of the application needing socket access
export const SocketProvider = ({ children }) => {
    // useMemo ensures the socket instance is created only once during the component's lifecycle.
    // This prevents creating new connections on every re-render.
    const socket = useMemo(() => io(SOCKET_URL, {
        autoConnect: false, // Prevents automatically connecting on initialization. We'll connect manually.
        reconnectionAttempts: 5, // Number of times to try reconnecting after a disconnect.
        reconnectionDelay: 3000, // Time (in ms) to wait before attempting reconnection.
        // Optional: Add authentication details if your socket server requires it on connection.
        // auth: (cb) => {
        //   // Example: Get token from local storage for authentication
        //   const token = localStorage.getItem('adminToken'); // Adjust storage key as needed
        //   cb({ token });
        // }
    }), []); // Empty dependency array means this runs only once on mount

    // State to track the connection status
    const [isConnected, setIsConnected] = useState(socket.connected);

    // Effect hook to manage socket event listeners and connection lifecycle
    useEffect(() => {
        // Define event handlers
        const onConnect = () => {
            console.log(`Socket connected: ${socket.id}`);
            setIsConnected(true);
        };
        const onDisconnect = (reason) => {
            console.log(`Socket disconnected: ${reason}`);
            setIsConnected(false);
            // Handle specific disconnect reasons if needed
            if (reason === 'io server disconnect') {
                // The server explicitly disconnected the socket (e.g., auth failure?)
                // You might want to prevent automatic reconnection attempts here if it's an auth issue.
                console.warn("Disconnected by server.");
            }
            // else: the socket will automatically try to reconnect based on settings
        };
        const onConnectError = (err) => {
            console.error(`Socket connection error: ${err.message}`);
            // Example: Handle authentication errors during connection
            // if (err.message === 'Authentication error') { ... redirect to login ... }
        };

        // Register event listeners
        socket.on('connect', onConnect);
        socket.on('disconnect', onDisconnect);
        socket.on('connect_error', onConnectError);

        // Attempt to connect the socket when the provider mounts
        // If connection depends on user login, you might call connectSocket() after successful login instead.
        console.log("SocketProvider Mounted: Attempting to connect socket...");
        socket.connect();

        // Cleanup function: Runs when the component unmounts
        return () => {
            console.log("SocketProvider Unmounting: Cleaning up socket listeners and disconnecting.");
            // Remove event listeners to prevent memory leaks
            socket.off('connect', onConnect);
            socket.off('disconnect', onDisconnect);
            socket.off('connect_error', onConnectError);
            // Disconnect the socket when the provider is unmounted (e.g., user logs out or app closes)
             if (socket.connected) {
                 socket.disconnect();
             }
        };
    }, [socket]); // The effect depends only on the socket instance itself


    // --- Memoized Socket Action Functions ---
    // useCallback ensures these functions have stable identities across re-renders,
    // preventing unnecessary re-renders in consuming components if passed as props/context.

    const connectSocket = useCallback(() => {
        if (!socket.connected) {
             console.log("Manual socket connect initiated.");
            socket.connect();
        }
    }, [socket]);

    const disconnectSocket = useCallback(() => {
        if (socket.connected) {
             console.log("Manual socket disconnect initiated.");
            socket.disconnect();
        }
    }, [socket]);

    // Function to join a specific match room
    const joinMatchRoom = useCallback((matchId) => {
        if (socket?.connected && matchId) {
            console.log(`Socket emitting [joinMatchRoom] for match: ${matchId}`);
            socket.emit('joinMatchRoom', matchId);
        } else {
            console.warn(`Cannot join room ${matchId}: Socket not connected or matchId missing.`);
        }
    }, [socket]); // Depends on socket instance

    // Function to leave a specific match room
    const leaveMatchRoom = useCallback((matchId) => {
        if (socket?.connected && matchId) {
            console.log(`Socket emitting [leaveMatchRoom] for match: ${matchId}`);
            socket.emit('leaveMatchRoom', matchId);
        }
         // No warning if not connected, leaving is less critical
    }, [socket]);

    // Function for admin scorer to send ball-by-ball data
    const scoreBallAction = useCallback((scoreData) => {
        if (socket?.connected && scoreData) {
            console.log('Socket emitting [scoreBall]:', scoreData);
            socket.emit('scoreBall', scoreData);
        } else {
            console.warn('Cannot emit [scoreBall]: Socket not connected or scoreData missing.');
        }
    }, [socket]);

    // Function for admin scorer to signal the start of live scoring
    const startMatchScoringAction = useCallback((matchId, initialState) => {
        if (socket?.connected && matchId && initialState) {
            console.log(`Socket emitting [startMatchScoring] for match: ${matchId}`);
            socket.emit('startMatchScoring', matchId, initialState);
        } else {
             console.warn('Cannot emit [startMatchScoring]: Socket not connected or required data missing.');
        }
    }, [socket]);


    // --- Context Value ---
    // useMemo creates a stable context value object. Only updates if dependencies change.
    const contextValue = useMemo(() => ({
        socket, // The raw socket instance (use with care)
        isConnected, // Boolean connection status
        // Helper functions for common actions:
        connectSocket,
        disconnectSocket,
        joinMatchRoom,
        leaveMatchRoom,
        scoreBallAction,
        startMatchScoringAction
    }), [socket, isConnected, connectSocket, disconnectSocket, joinMatchRoom, leaveMatchRoom, scoreBallAction, startMatchScoringAction]); // Dependencies that trigger context update

    // Provide the context value to child components
    return (
        <SocketContext.Provider value={contextValue}>
            {children}
        </SocketContext.Provider>
    );
};




--- File: mpl-frontend\src\pages\HomePage.css ---


/* src/pages/HomePage.css */

.home-page {
    padding: 1rem 0; /* Adjust padding as needed */
}

.home-page section {
    margin-bottom: 2.5rem;
    padding: 1.5rem;
    background-color: #3a3a3a; /* Slightly different background for sections */
    border-radius: 8px;
}

.welcome-section {
    text-align: center;
    background-color: transparent; /* Make welcome blend more */
    padding-top: 0;
    padding-bottom: 0;
}

.welcome-section h1 {
    margin-bottom: 0.5rem;
    color: #e0e0ff; /* Lighter title color */
}

.welcome-section .tagline {
    font-style: italic;
    color: #ccc;
    margin-bottom: 1rem;
}

.logo-container {
    margin-bottom: 1.5rem;
}

.home-logo {
    max-height: 100px; /* Adjust size as needed */
    width: auto;
}

.home-divider {
    border: none;
    border-top: 1px solid #555;
    margin: 2.5rem 0;
}

.next-match-section h2,
.quick-links-section h2 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    text-align: center;
    color: #eee;
    border-bottom: 1px solid #555;
    padding-bottom: 0.5rem;
}

.match-card {
    background-color: #444;
    padding: 1.5rem;
    border-radius: 6px;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

.match-card .match-teams {
    font-size: 1.3em;
    font-weight: bold;
    margin: 0 0 0.5rem 0;
}

.match-card .match-time {
    font-size: 1.1em;
    color: #f0e68c; /* Highlight time */
    margin-bottom: 0.5rem;
}
.match-card .match-venue {
    font-size: 0.95em;
    color: #ccc;
    margin-bottom: 1.2rem;
}

.match-card .details-button {
    background-color: #646cff;
    color: white;
    border: none;
    padding: 0.7em 1.5em;
}
.match-card .details-button:hover {
    background-color: #535bf2;
    border-color: #535bf2;
}


.quick-links-section ul {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
}

.quick-links-section li a {
    display: inline-block;
    padding: 0.8rem 1.2rem;
    background-color: #444;
    border-radius: 5px;
    text-decoration: none;
    color: #a0a0ff;
    transition: background-color 0.2s, color 0.2s;
    box-shadow: 0 1px 3px rgba(0,0,0,0.2);
}

.quick-links-section li a:hover {
    background-color: #505050;
    color: #fff;
}

/* Light mode adjustments */
@media (prefers-color-scheme: light) {
    .home-page section {
        background-color: #f8f9fa; /* Lighter section background */
    }
    .welcome-section { background-color: transparent;}
    .welcome-section h1 { color: #213547; }
    .welcome-section .tagline { color: #555; }
    .home-divider { border-color: #ddd; }

    .next-match-section h2,
    .quick-links-section h2 {
        color: #333;
        border-color: #eee;
    }

    .match-card { background-color: #fff; border: 1px solid #eee; box-shadow: 0 1px 3px rgba(0,0,0,0.1);}
    .match-card .match-teams { color: #213547; }
    .match-card .match-time { color: #b8860b; }
    .match-card .match-venue { color: #666; }
    .match-card .details-button { background-color: #007bff; }
    .match-card .details-button:hover { background-color: #0056b3; }

    .quick-links-section li a { background-color: #e9ecef; color: #0000d0; box-shadow: none; border: 1px solid #ddd; }
    .quick-links-section li a:hover { background-color: #dde2e7; color: #0000ff; }
}

@media (max-width: 768px) {
    .home-page section {
        padding: 1rem;
        margin-bottom: 1.5rem;
    }
    .welcome-section h1 {
        font-size: 2em; /* Adjust heading sizes */
    }
    .next-match-section h2,
    .quick-links-section h2 {
        font-size: 1.4em;
        margin-bottom: 1rem;
    }
    .match-card .match-teams { font-size: 1.2em; }
    .match-card .match-time { font-size: 1em; }
    .match-card .details-button { padding: 0.6em 1.2em; font-size: 0.9em;}

    .quick-links-section ul {
        gap: 0.8rem;
    }
     .quick-links-section li a {
        padding: 0.6rem 1rem;
        font-size: 0.9em;
    }
}

@media (max-width: 480px) {
     .welcome-section h1 {
        font-size: 1.8em;
     }
     .next-match-section h2,
    .quick-links-section h2 {
        font-size: 1.2em;
    }
    .home-logo {
        max-height: 80px;
    }
     .quick-links-section li {
        width: calc(50% - 0.4rem); /* Two links per row */
        text-align: center;
     }
      .quick-links-section li a {
        display: block; /* Make link take full width of li */
     }
}




--- File: mpl-frontend\src\pages\HomePage.jsx ---


// src/pages/HomePage.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';
import './HomePage.css'; // Import CSS for styling
// import mplLogo from '../assets/mpl-logo.png'; // <-- Import your logo here (adjust path)

function HomePage() {
    const [nextMatch, setNextMatch] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        let isMounted = true;
        // Defined the function to fetch the match
        const fetchNextMatch = async () => {
            setLoading(true);
            setError('');
            try {
                const { data } = await api.get('/matches?status=Scheduled');

                if (isMounted) {
                    if (data && data.length > 0) {
                        const sortedMatches = data.sort((a, b) => new Date(a.match_datetime) - new Date(b.match_datetime));
                        setNextMatch(sortedMatches[0]);
                    } else {
                        setNextMatch(null);
                    }
                }
            } catch (err) {
                console.error("Failed to fetch next match:", err);
                if (isMounted) setError('Could not load upcoming match info.');
            } finally {
                if (isMounted) setLoading(false);
            }
        };

        // Correctly call the defined function
        fetchNextMatch();

        return () => { isMounted = false; };
    }, []); // Empty dependency array ensures this runs only once on mount

    return (
        <div className="home-page">

            {/* Section 1: Welcome & Logo */}
            <section className="welcome-section">
                 {/* Uncomment and adjust path when you have a logo */}
                 {/* <div className="logo-container">
                     <img src={mplLogo} alt="MPL Logo" className="home-logo" />
                 </div> */}
                 <h1>Welcome to the Metalworks Premier League (MPL)!</h1>
                 <p className="tagline">Fostering Community Spirit Through Box Cricket.</p>
                 <p>The MPL aims to organize an engaging and competitive Box Cricket tournament each summer for the residents of Metalworks and nearby apartments.</p>
            </section>

            <hr className="home-divider" />

            {/* Section 2: Upcoming Match / Live Match Indicator */}
            <section className="next-match-section">
                <h2>Next Match</h2>
                {loading && <LoadingFallback />}
                {error && <p className="error-message">{error}</p>}
                {!loading && !error && nextMatch ? (
                    <div className="match-card">
                        <p className="match-teams">{nextMatch.team1_name} vs {nextMatch.team2_name}</p>
                        <p className="match-time">{new Date(nextMatch.match_datetime).toLocaleString([], {dateStyle: 'medium', timeStyle: 'short'})}</p>
                        <p className="match-venue">Venue: {nextMatch.venue}</p>
                        <Link to={`/matches/${nextMatch.match_id}`}>
                            <button className="details-button">View Details</button>
                        </Link>
                    </div>
                ) : (
                    !loading && !error && <p>No upcoming matches scheduled currently.</p>
                )}
                 {/* TODO: Add logic here to check for LIVE matches and display a link/indicator */}
            </section>

            <hr className="home-divider" />

            {/* Section 3: Quick Links */}
            <section className="quick-links-section">
                 <h2>Quick Links</h2>
                 <ul>
                     <li><Link to="/schedule">View Full Schedule & Results</Link></li>
                     <li><Link to="/standings">View Team Standings</Link></li>
                     <li><Link to="/leaderboard">View Player Leaderboards</Link></li>
                     <li><Link to="/players">Browse Players</Link></li>
                     {/* Add link to rules page if you create one */}
                 </ul>
            </section>

        </div>
    );
}
export default HomePage;




--- File: mpl-frontend\src\pages\LeaderboardPage.css ---


/* src/pages/LeaderboardPage.css */

.leaderboard-page h2 {
    text-align: center;
    margin-bottom: 1.5rem;
}

.filter-section {
    margin-bottom: 2rem;
    text-align: center;
}

.filter-section label {
    margin-right: 0.5rem;
    font-weight: 500;
}

.tabs {
    display: flex;
    justify-content: center;
    margin-bottom: 1.5rem;
    border-bottom: 2px solid #444;
}

.tabs button {
    padding: 0.8rem 1.5rem;
    cursor: pointer;
    border: none;
    border-bottom: 3px solid transparent; /* Indicator for active tab */
    background-color: transparent;
    color: #ccc;
    font-size: 1.1em;
    margin: 0 5px -2px 5px; /* Overlap border */
    transition: color 0.2s, border-color 0.2s;
}

.tabs button:hover {
    color: #fff;
}

.tabs button.active {
    color: #646cff;
    border-bottom-color: #646cff;
    font-weight: bold;
}

.leaderboard-category {
    margin-bottom: 2.5rem;
}

.leaderboard-category h3 {
    margin-bottom: 1rem;
    color: #eee;
}

.leaderboard-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95em;
    background-color: #383838;
    border-radius: 5px;
    overflow: hidden; /* For rounded corners */
}

.leaderboard-table th,
.leaderboard-table td {
    border: 1px solid #555;
    padding: 0.6rem 0.8rem;
    text-align: left;
    vertical-align: middle;
}

.leaderboard-table th {
    background-color: #4a4a4a;
    font-weight: bold;
    white-space: nowrap;
}

.leaderboard-table tbody tr:nth-child(even) {
    background-color: #404040;
}

.leaderboard-table tbody tr:hover {
    background-color: #4f4f4f;
}

.leaderboard-table td:first-child, /* Rank column */
.leaderboard-table th:first-child {
    text-align: center;
    width: 50px;
}

.leaderboard-table td a {
    color: #a0a0ff;
    text-decoration: none;
}
.leaderboard-table td a:hover {
    text-decoration: underline;
    color: #c0c0ff;
}

/* Right align numeric data */
.leaderboard-table td:not(:nth-child(2)):not(:first-child),
.leaderboard-table th:not(:nth-child(2)):not(:first-child) {
     text-align: right;
     font-variant-numeric: tabular-nums;
}

/* Light mode */
@media (prefers-color-scheme: light) {
    .leaderboard-table { background-color: #f9f9f9; }
    .leaderboard-table th, .leaderboard-table td { border-color: #ddd; }
    .leaderboard-table th { background-color: #e8e8e8; }
    .leaderboard-table tbody tr:nth-child(even) { background-color: #f2f2f2; }
    .leaderboard-table tbody tr:hover { background-color: #e9e9e9; }
    .leaderboard-table td a { color: #0000d0; }
    .leaderboard-table td a:hover { color: #0000ff; }
    .tabs { border-color: #ccc; }
    .tabs button { color: #555; }
    .tabs button:hover { color: #000; }
    .tabs button.active { color: #0000ff; border-color: #0000ff;}
}

/* Add these styles AT THE END of StandingsPage.css AND LeaderboardPage.css */

@media (max-width: 768px) {
    .standings-table th, .standings-table td,
    .leaderboard-table th, .leaderboard-table td {
        padding: 0.5rem 0.6rem;
        font-size: 0.9em;
    }
    .tabs button { /* Adjust tab size if needed */
        padding: 0.6rem 1rem;
        font-size: 1em;
    }
     .filter-section select {
        padding: 0.5rem; /* Adjust dropdown size */
    }
}

@media (max-width: 480px) {
    .standings-table th, .standings-table td,
    .leaderboard-table th, .leaderboard-table td {
        padding: 0.4rem 0.4rem;
        font-size: 0.85em;
    }
     /* Optional: Hide less critical columns */
     /* Example for Standings: Hide Played/Lost */
     /*
     .standings-table th:nth-child(3), .standings-table td:nth-child(3),
     .standings-table th:nth-child(5), .standings-table td:nth-child(5) {
        display: none;
     }
     */
      .tabs button {
        padding: 0.5rem 0.8rem;
        font-size: 0.9em;
    }
}




--- File: mpl-frontend\src\pages\LeaderboardPage.jsx ---


// src/pages/LeaderboardPage.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';
import './LeaderboardPage.css'; // Create this CSS file

const LeaderboardTable = ({ title, data, columns }) => {
    if (!data) return <p>Loading {title}...</p>;
    if (data.length === 0) return <p>No data available for {title}.</p>;

    return (
        <div className="leaderboard-category">
            <h3>{title}</h3>
            <div className="table-responsive">
                <table className="leaderboard-table">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            {columns.map((col) => <th key={col.key}>{col.header}</th>)}
                        </tr>
                    </thead>
                    <tbody>
                        {data.map((player, index) => (
                            <tr key={player.player_id}>
                                <td>{index + 1}</td>
                                {columns.map((col) => (
                                    <td key={col.key}>
                                        {col.key === 'player_name' ? (
                                            <Link to={`/players/${player.player_id}`}>{player[col.key]}</Link>
                                        ) : col.key === 'avg' ? (
                                            player[col.key] === Infinity ? "Not Out" : (player[col.key]?.toFixed(2) ?? '-')
                                        ) : col.key === 'sr' || col.key === 'econ' ? (
                                            player[col.key]?.toFixed(2) ?? '-'
                                         ) : (
                                             player[col.key] ?? '-'
                                         )}
                                    </td>
                                ))}
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

function LeaderboardPage() {
    const [seasons, setSeasons] = useState([]);
    const [selectedSeason, setSelectedSeason] = useState('');
    const [leaderboardData, setLeaderboardData] = useState({ batting: null, bowling: null, impact: null });
    const [loadingSeasons, setLoadingSeasons] = useState(true);
    const [loadingData, setLoadingData] = useState(false);
    const [error, setError] = useState('');
    const [activeTab, setActiveTab] = useState('batting'); // 'batting', 'bowling', 'impact'

    // Fetch Seasons
    useEffect(() => {
        const fetchSeasons = async () => {
            setLoadingSeasons(true);
            try {
                const { data } = await api.get('/seasons/public'); // Use admin route to get all seasons
                setSeasons(data);
                if (data.length > 0) {
                    setSelectedSeason(data[0].season_id); // Default to first/latest season
                }
            } catch (err) { setError('Failed to load seasons.'); }
            finally { setLoadingSeasons(false); }
        };
        fetchSeasons();
    }, []);

    // Fetch Leaderboard Data when season changes
    useEffect(() => {
        if (!selectedSeason) return;

        const fetchLeaderboards = async () => {
            setLoadingData(true);
            setError('');
            setLeaderboardData({ batting: null, bowling: null, impact: null }); // Clear old data
            try {
                const { data } = await api.get(`/leaderboard?season_id=${selectedSeason}`);
                setLeaderboardData({
                    batting: data.batting || [],
                    bowling: data.bowling || [],
                    impact: data.impact || []
                });
            } catch (err) {
                setError(typeof err === 'string' ? err : `Failed to load leaderboards for season ${selectedSeason}.`);
                setLeaderboardData({ batting: [], bowling: [], impact: [] }); // Set empty on error
            } finally {
                setLoadingData(false);
            }
        };
        fetchLeaderboards();
    }, [selectedSeason]);

    const battingColumns = [
        { key: 'player_name', header: 'Player' },
        { key: 'matches', header: 'Mat' },
        { key: 'runs', header: 'Runs' },
        { key: 'hs', header: 'HS' },
        { key: 'avg', header: 'Avg' },
        { key: 'sr', header: 'SR' },
        { key: 'fours', header: '4s' },
        { key: 'sixes', header: '6s' },
    ];

    const bowlingColumns = [
        { key: 'player_name', header: 'Player' },
        { key: 'matches', header: 'Mat' },
        { key: 'overs', header: 'Overs' },
        { key: 'wickets', header: 'Wkts' },
        { key: 'runs', header: 'Runs' },
        { key: 'econ', header: 'Econ' },
        // Add Avg, SR if calculated
    ];

    const impactColumns = [
         { key: 'player_name', header: 'Player' },
         { key: 'matches', header: 'Mat' },
         { key: 'total_impact', header: 'Total Impact' },
         { key: 'bat_impact', header: 'Batting' },
         { key: 'bowl_impact', header: 'Bowling' },
         { key: 'field_impact', header: 'Fielding' },
    ];


    return (
        <div className="leaderboard-page">
            <h2>Season Leaderboards</h2>

            {loadingSeasons ? <LoadingFallback /> : (
                <div className="filter-section">
                    <label htmlFor="season-select-leaderboard">Select Season:</label>
                    <select
                        id="season-select-leaderboard"
                        value={selectedSeason}
                        onChange={(e) => setSelectedSeason(e.target.value)}
                        disabled={loadingData}
                    >
                        <option value="" disabled>-- Select --</option>
                        {seasons.map(s => (
                            <option key={s.season_id} value={s.season_id}>
                                {s.name} ({s.year})
                            </option>
                        ))}
                    </select>
                </div>
            )}

            {error && <p className="error-message">{error}</p>}

            {selectedSeason && (
                 <>
                    <div className="tabs">
                        <button onClick={() => setActiveTab('batting')} className={activeTab === 'batting' ? 'active' : ''}>Top Batters</button>
                        <button onClick={() => setActiveTab('bowling')} className={activeTab === 'bowling' ? 'active' : ''}>Top Bowlers</button>
                        <button onClick={() => setActiveTab('impact')} className={activeTab === 'impact' ? 'active' : ''}>Impact Leaders</button>
                    </div>

                    <div className="leaderboard-content">
                        {loadingData ? <LoadingFallback message="Loading leaderboard data..." /> : (
                            <>
                                {activeTab === 'batting' && <LeaderboardTable title="Top Run Scorers" data={leaderboardData.batting} columns={battingColumns} />}
                                {activeTab === 'bowling' && <LeaderboardTable title="Top Wicket Takers" data={leaderboardData.bowling} columns={bowlingColumns} />}
                                {activeTab === 'impact' && <LeaderboardTable title="Top Impact Players" data={leaderboardData.impact} columns={impactColumns} />}
                            </>
                        )}
                    </div>
                </>
            )}
        </div>
    );
}

export default LeaderboardPage;




--- File: mpl-frontend\src\pages\MatchDetailPage.css ---


/* src/pages/MatchDetailPage.css */

.match-detail-page {
    /* Max width inherited from main potentially */
}

.match-header {
    background-color: #3a3a3a; /* Darker background for header */
    padding: 1rem 1.5rem;
    border-radius: 8px 8px 0 0; /* Rounded top corners */
    margin-bottom: 0; /* Remove bottom margin if using divider */
}

.match-header h2 {
    margin-top: 0;
    margin-bottom: 0.5rem;
    color: #fff;
}

.match-header p {
    margin: 0.3rem 0;
    font-size: 0.95em;
    color: #ccc;
}

.match-header .status-live {
    color: #ff6b6b; /* Reddish for live */
    font-weight: bold;
}
.match-header .status-completed {
    color: #a0ffa0; /* Greenish for completed */
}
.match-header .status-scheduled,
.match-header .status-setup,
.match-header .status-inningsbreak {
    color: #f0e68c; /* Khaki/Yellow */
}
.match-header .status-abandoned {
    color: #aaa; /* Grey */
}


/* Score Summary Styling */
.score-summary-section {
    margin-top: 1.5rem;
}
.score-summary-section h3 {
    margin-bottom: 1rem;
}

.score-summary-box {
    border: 1px solid #444;
    padding: 1rem 1.5rem; /* More padding */
    margin-bottom: 1rem;
    background-color: #333; /* Slightly different shade */
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Subtle shadow */
}
.score-summary-box .batting-bowling-info {
    font-size: 0.9em;
    color: #bbb;
    margin-bottom: 0.8rem;
}
.score-summary-box .main-score {
    font-size: 2.2em; /* Larger score */
    font-weight: bold;
    margin: 0.5rem 0;
    color: #fff;
}
.score-summary-box .overs-info {
    font-size: 1.1em;
    color: #ddd;
}
.score-summary-box .target-info {
    font-size: 1.1em;
    color: #f0e68c; /* Highlight target */
    margin-top: 0.8rem;
}
.score-summary-box .result-summary {
    margin-top: 1rem;
    font-weight: bold;
    border-top: 1px dashed #555;
    padding-top: 1rem;
    color: #a0ffa0; /* Greenish for result */
}
.score-summary-box .last-ball-commentary {
    margin-top: 1rem;
    font-style: italic;
    border-top: 1px dashed #555;
    padding-top: 1rem;
    color: #ccc;
}

.mom-info {
    margin-top: 1rem;
    font-weight: 500;
    color: #f0e68c;
}

/* Commentary Section */
.commentary-section {
    margin-top: 2rem;
}
.commentary-section h3 {
    margin-bottom: 1rem;
}
.commentary-box {
    height: 350px; /* Increased height */
    overflow-y: auto;
    border: 1px solid #444;
    padding: 0.8rem 1.2rem;
    background-color: #303030; /* Slightly darker box */
    border-radius: 5px;
}
.commentary-item {
    border-bottom: 1px solid #484848;
    padding: 0.5rem 0;
    margin: 0 0 0.5rem 0;
    font-size: 0.9em;
    line-height: 1.4;
}
.commentary-item:last-child {
    border-bottom: none;
    margin-bottom: 0;
}
/* Optional: Alternating commentary item background */
/* .commentary-item:nth-child(even) { background-color: #353535; } */


/* Scorecards Section */
.detailed-scorecards-section {
    margin-top: 2rem;
}
.detailed-scorecards-section h3 {
    text-align: center;
    margin-bottom: 1.5rem;
}

/* Dividers */
.section-divider {
    border: none;
    border-top: 1px solid #555;
    margin: 2rem 0;
}
.innings-divider {
     border: none;
    border-top: 1px dashed #666;
    margin: 2.5rem 0;
}

/* Back Link */
.back-link-container {
    margin-top: 2rem;
    text-align: center; /* Center the button */
}


/* Light Mode Adjustments */
@media (prefers-color-scheme: light) {
    .match-header { background-color: #f0f0f0; }
    .match-header h2 { color: #333; }
    .match-header p { color: #555; }
    .match-header .status-live { color: #dc3545; }
    .match-header .status-completed { color: #28a745; }
    .match-header .status-scheduled,
    .match-header .status-setup,
    .match-header .status-inningsbreak { color: #b8860b; /* DarkGoldenrod */ }
    .match-header .status-abandoned { color: #888; }

    .score-summary-box { border-color: #ddd; background-color: #fff; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
    .score-summary-box .batting-bowling-info { color: #666; }
    .score-summary-box .main-score { color: #213547; }
    .score-summary-box .overs-info { color: #444; }
    .score-summary-box .target-info { color: #b8860b; }
    .score-summary-box .result-summary { border-color: #ddd; color: #28a745; }
    .score-summary-box .last-ball-commentary { border-color: #ddd; color: #555; }

    .mom-info { color: #b8860b; }

    .commentary-section h3 {}
    .commentary-box { border-color: #ddd; background-color: #fdfdfd; }
    .commentary-item { border-color: #eee; }
    /* .commentary-item:nth-child(even) { background-color: #f7f7f7; } */

    .section-divider { border-color: #ccc; }
    .innings-divider { border-color: #ddd; }
}

/* Add to src/pages/MatchDetailPage.css */

.score-summary-box.completed {
    /* Styles for the completed summary box */
    padding-top: 1.5rem; /* More space */
    padding-bottom: 0.5rem;
}

.score-summary-box .final-innings-score {
    font-size: 1.1em;
    margin: 0.4rem 0;
    color: #eee;
}
.score-summary-box .final-innings-score strong {
    display: inline-block;
    min-width: 120px; /* Align team names */
    color: #fff;
}

.score-summary-box .result-summary {
    margin-top: 1.5rem; /* More space above result */
    font-weight: bold;
    border-top: 1px dashed #555;
    padding-top: 1rem;
    color: #a0ffa0; /* Greenish for result */
}

/* Light Mode */
@media (prefers-color-scheme: light) {
    .score-summary-box.completed {
        padding-top: 1.5rem;
        padding-bottom: 0.5rem;
    }
    .score-summary-box .final-innings-score {
         color: #333;
    }
    .score-summary-box .final-innings-score strong {
        color: #000;
    }
    .score-summary-box .result-summary {
        border-color: #ddd; color: #28a745;
    }
}




--- File: mpl-frontend\src\pages\MatchDetailPage.jsx ---


// mpl-project/mpl-frontend/src/pages/MatchDetailPage.jsx
import React, { useState, useEffect, useRef } from 'react';
import { useParams, Link } from 'react-router-dom';
import { useSocket } from '../context/SocketContext';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';
import InningsScorecard from '../components/InningsScorecard';
import BowlingScorecard from '../components/BowlingScorecard';
import './MatchDetailPage.css'; // Import the specific CSS file

// --- ScoreDisplay Component (Handles Live and Completed States, uses correct names) ---
const ScoreDisplay = ({ state, matchDetails, innings1Data, innings2Data }) => {
    if (!matchDetails) return <p>Loading score display...</p>;

    const status = (state && state.status !== 'Completed') ? state.status : matchDetails.status;
    const displayData = (state && status !== 'Completed') ? state : matchDetails;

    // *** USE matchDetails FOR NAMES when available ***
    const team1Name = matchDetails?.team1_name || `Team ${matchDetails?.team1_id || '1'}`;
    const team2Name = matchDetails?.team2_name || `Team ${matchDetails?.team2_id || '2'}`;

    let battingTeamName = `Team ${displayData?.battingTeamId || '?'}`;
    let bowlingTeamName = `Team ${displayData?.bowlingTeamId || '?'}`;

    // Determine names based on IDs present in the displayData (live or completed)
    if (displayData?.battingTeamId) {
         battingTeamName = displayData.battingTeamId == matchDetails.team1_id ? team1Name : team2Name;
    }
    if (displayData?.bowlingTeamId) {
         bowlingTeamName = displayData.bowlingTeamId == matchDetails.team1_id ? team1Name : team2Name;
    }
    // For completed state specifically (where live state is null)
    if (status === 'Completed') {
        battingTeamName = innings1Data?.teamName; // Use calculated name for first innings
    }


    // --- Live/In-Progress Display ---
    if (status === 'Live' || status === 'InningsBreak') {
        return (
            <div className="score-summary-box">
                {/* Now uses the determined names */}
                {battingTeamName && bowlingTeamName && (
                    <p className="batting-bowling-info">
                        <strong>Batting:</strong> {battingTeamName} | <strong>Bowling:</strong> {bowlingTeamName}
                    </p>
                )}
                <p className="main-score">Score: {displayData?.score ?? 'N/A'} / {displayData?.wickets ?? 'N/A'}</p>
                <p className="overs-info">Overs: {displayData?.overs ?? 'N/A'}.{displayData?.balls ?? 'N/A'} / 5.0</p>
                {displayData?.target && displayData?.inningNumber === 2 && <p className="target-info"><strong>Target: {displayData.target}</strong></p>}
                {displayData?.lastBallCommentary && <p className="last-ball-commentary">{displayData.lastBallCommentary}</p>}
            </div>
        );
    }
    // --- Completed Match Display ---
    else if (status === 'Completed') {
        return (
            <div className="score-summary-box completed">
                <p className="final-innings-score">
                    <strong>{innings1Data?.teamName || 'Innings 1'}:</strong> {innings1Data?.score ?? 'N/A'} / {innings1Data?.wickets ?? 'N/A'} ({innings1Data?.oversDisplay || '5.0'} ov)
                </p>
                <p className="final-innings-score">
                    <strong>{innings2Data?.teamName || 'Innings 2'}:</strong> {innings2Data?.score ?? 'N/A'} / {innings2Data?.wickets ?? 'N/A'} ({innings2Data?.oversDisplay || '?'} ov)
                </p>
                {matchDetails.result_summary && (
                    <p className="result-summary">{matchDetails.result_summary}</p>
                )}
            </div>
        );
    }
    // --- Fallback/Other Statuses ---
    else {
        return (
             <div className="score-summary-box other-status">
                 <p>Status: {status}</p>
                 {status === 'Scheduled' && <p>Match has not started yet.</p>}
                 {status === 'Abandoned' && <p>Match was abandoned.</p>}
                 {status === 'Setup' && <p>Match setup in progress.</p>}
            </div>
        );
    }
};


// --- Main Component ---
const MatchDetailPage = () => {
    const { matchId } = useParams();
    const { socket, isConnected, connectSocket, joinMatchRoom, leaveMatchRoom } = useSocket();

    const [matchDetails, setMatchDetails] = useState(null);
    const [liveScoreState, setLiveScoreState] = useState(null);
    const [commentary, setCommentary] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const hasJoinedRoom = useRef(false);
    const commentaryContainerRef = useRef(null);

    // --- Fetch initial data useEffect ---
    useEffect(() => {
        let isMounted = true;
        const fetchMatchData = async () => {
            if (!matchId) return; setLoading(true); setError(''); setLiveScoreState(null); setCommentary([]); hasJoinedRoom.current = false;
            console.log(`Fetching initial data for match ${matchId}`);
            try {
                const [detailsRes, commentaryRes] = await Promise.all([
                    api.get(`/matches/${matchId}`),
                    api.get(`/matches/${matchId}/commentary`).catch(() => ({ data: [] }))
                ]);
                if (isMounted) {
                    const matchData = detailsRes.data; setMatchDetails(matchData); setCommentary(commentaryRes.data?.reverse() || []);
                    if (matchData.status === 'Completed') { setLiveScoreState(null); console.log("Match completed. Displaying final data."); }
                    else if (['Live', 'Setup', 'InningsBreak'].includes(matchData.status)) {
                        console.log(`Match status: ${matchData.status}`);
                        try { const { data: currentState } = await api.get(`/admin/scoring/matches/${matchId}/state`); if (isMounted && currentState?.status) { setLiveScoreState(currentState); } else { setLiveScoreState({ status: matchData.status, matchId: parseInt(matchId), lastBallCommentary: 'Waiting for live updates...' }); }
                        } catch (stateErr) { setLiveScoreState({ status: matchData.status, matchId: parseInt(matchId), lastBallCommentary: 'Waiting for live updates...' }); }
                    } else { setLiveScoreState({ status: matchData.status }); }
                }
            } catch (err) { if (isMounted) setError('Failed to load match data.'); }
            finally { if (isMounted) setLoading(false); }
        }; fetchMatchData(); return () => { isMounted = false; };
    }, [matchId]);

    // --- Socket Connection useEffect ---
    useEffect(() => {
        const scoreableStatuses = ['Setup', 'Live', 'InningsBreak'];
        if (!socket || !matchId || loading || !matchDetails || !scoreableStatuses.includes(matchDetails.status)) { return () => { if (socket && hasJoinedRoom.current) { leaveMatchRoom(matchId); hasJoinedRoom.current = false; } }; }
        const attemptJoinRoom = () => { if (isConnected && !hasJoinedRoom.current) { joinMatchRoom(matchId); hasJoinedRoom.current = true; } };
        if (isConnected) { attemptJoinRoom(); } else { connectSocket(); }
        const handleConnect = () => attemptJoinRoom();
        const handleUpdateScore = (newState) => { if (newState && newState.matchId === parseInt(matchId)) { setLiveScoreState(newState); if (newState.lastBallCommentary && (!commentary.length || commentary[0]?.commentary_text !== newState.lastBallCommentary)) { setCommentary((prevComm) => [{ ball_id: `live-${Date.now()}-${Math.random()}`, commentary_text: newState.lastBallCommentary }, ...prevComm].slice(0, 100)); } } };
        const handleInningsBreak = (breakState) => { if (breakState && breakState.matchId === parseInt(matchId)) { setLiveScoreState((prev) => ({ ...prev, ...breakState })); } };
        const handleMatchEnded = (endState) => { if (endState && endState.matchId === parseInt(matchId)) { setLiveScoreState((prev) => ({ ...prev, ...endState })); /* Optionally refetch */ } };
        socket.on('connect', handleConnect); socket.on('updateScore', handleUpdateScore); socket.on('inningsBreak', handleInningsBreak); socket.on('matchEnded', handleMatchEnded);
        return () => { if (socket && hasJoinedRoom.current) { leaveMatchRoom(matchId); } hasJoinedRoom.current = false; if (socket) { socket.off('connect', handleConnect); socket.off('updateScore', handleUpdateScore); socket.off('inningsBreak', handleInningsBreak); socket.off('matchEnded', handleMatchEnded); } };
    }, [socket, isConnected, matchId, loading, matchDetails, connectSocket, joinMatchRoom, leaveMatchRoom, commentary]);

    // --- Auto-scroll Commentary ---
    useEffect(() => { if (commentaryContainerRef.current) { commentaryContainerRef.current.scrollTop = 0; } }, [commentary]);

    // --- Calculate Innings Data (Added Overs Calculation) ---
    let innings1BatStats = []; let innings2BatStats = [];
    let innings1BowlStats = []; let innings2BowlStats = [];
    let innings1TeamName = ''; let innings2TeamName = '';
    let finalInnings1Data = null; let finalInnings2Data = null;

    const formatOversDisplay = (oversDecimal) => {
        if (oversDecimal == null || isNaN(oversDecimal)) return "?";
        const completedOvers = Math.floor(oversDecimal);
        const ballsInPartialOver = Math.round((oversDecimal - completedOvers) * 10);
        if (ballsInPartialOver === 0 && oversDecimal === completedOvers) return `${completedOvers}.0`;
        if (ballsInPartialOver >= 6) return `${completedOvers + 1}.0`;
        return `${completedOvers}.${ballsInPartialOver}`;
    };

    if (matchDetails?.status === 'Completed' && matchDetails?.playerStats?.length > 0) {
        const inn1BatTeamId = (matchDetails.decision === 'Bat') ? matchDetails.toss_winner_team_id : (matchDetails.toss_winner_team_id === matchDetails.team1_id ? matchDetails.team2_id : matchDetails.team1_id);
        const inn2BatTeamId = (inn1BatTeamId === matchDetails.team1_id) ? matchDetails.team2_id : matchDetails.team1_id;
        innings1TeamName = inn1BatTeamId === matchDetails.team1_id ? matchDetails.team1_name : matchDetails.team2_name;
        innings2TeamName = inn2BatTeamId === matchDetails.team1_id ? matchDetails.team1_name : matchDetails.team2_name;
        innings1BatStats = matchDetails.playerStats.filter(stat => stat.team_id === inn1BatTeamId);
        innings2BatStats = matchDetails.playerStats.filter(stat => stat.team_id === inn2BatTeamId);
        innings1BowlStats = matchDetails.playerStats.filter(stat => stat.team_id === inn2BatTeamId && stat.overs_bowled > 0);
        innings2BowlStats = matchDetails.playerStats.filter(stat => stat.team_id === inn1BatTeamId && stat.overs_bowled > 0);
        const calculateInningsSummary = (batStats) => { let score = 0; let wickets = 0; batStats.forEach(stat => { score += stat.runs_scored ?? 0; if (stat.is_out) wickets += 1; }); return { score, wickets }; };
        const summary1 = calculateInningsSummary(innings1BatStats);
        const summary2 = calculateInningsSummary(innings2BatStats);
        const finalOversInn1 = "5.0"; // Assume Innings 1 is always 5 overs if completed
        let totalOversInn2Decimal = innings2BowlStats.reduce((sum, bowler) => sum + (bowler.overs_bowled || 0), 0);
        totalOversInn2Decimal = Math.min(5.0, totalOversInn2Decimal);
        const finalOversInn2 = formatOversDisplay(totalOversInn2Decimal);
        finalInnings1Data = { teamName: innings1TeamName, score: summary1.score, wickets: summary1.wickets, oversDisplay: finalOversInn1 };
        finalInnings2Data = { teamName: innings2TeamName, score: summary2.score, wickets: summary2.wickets, oversDisplay: finalOversInn2 };
    }

    // --- Render Logic ---
    if (loading) return <LoadingFallback />;
    if (error && !matchDetails) return <p className="error-message">Error: {error}</p>;
    if (!matchDetails) return <div>Match details could not be loaded.</div>;

    const displayState = (liveScoreState && matchDetails.status !== 'Completed') ? liveScoreState : matchDetails;
    const displayStatus = displayState?.status || matchDetails.status;

    return (
        <div className="match-detail-page">
            <div className="match-header">
                <h2>{matchDetails.team1_name} vs {matchDetails.team2_name}</h2>
                <p>({matchDetails.season_name})</p>
                <p><strong>Status:</strong> <span className={`status-${displayStatus?.toLowerCase()}`}>{displayStatus}</span></p>
                <p><strong>Date:</strong> {new Date(matchDetails.match_datetime).toLocaleString()}</p>
                <p><strong>Venue:</strong> {matchDetails.venue}</p>
                {matchDetails.toss_winner_name && <p><strong>Toss:</strong> {matchDetails.toss_winner_name} won and chose to {matchDetails.decision}</p>}
                {matchDetails.super_over_number && <p><strong>Super Over:</strong> Over #{matchDetails.super_over_number}</p>}
            </div>
            <hr className="section-divider" />
            <div className="score-summary-section">
                <h3>{displayStatus === 'Live' ? 'Live Score' : (displayStatus === 'Completed' ? 'Final Score' : 'Score')}</h3>
                 <ScoreDisplay
                    state={liveScoreState}
                    matchDetails={matchDetails}
                    innings1Data={finalInnings1Data} // Pass calculated data
                    innings2Data={finalInnings2Data} // Pass calculated data
                 />
                {displayStatus === 'Scheduled' && <p>Match scheduled to start soon.</p>}
                {displayStatus === 'Completed' && matchDetails.man_of_the_match_name && ( <p className="mom-info"><strong>Man of the Match:</strong> {matchDetails.man_of_the_match_name}</p> )}
            </div>
            {(displayStatus !== 'Scheduled') && (
                 <div className="commentary-section">
                      <h3>Ball-by-Ball</h3>
                      <div ref={commentaryContainerRef} className="commentary-box">
                         {commentary.length > 0 ? ( commentary.map((ball, index) => ( <p key={ball.ball_id || `comm-${index}`} className="commentary-item"> {ball.commentary_text} </p> )) ) : ( <p>Waiting for commentary...</p> )}
                      </div>
                 </div>
              )}
             {displayStatus === 'Completed' && (
                <div className="detailed-scorecards-section">
                    <hr className="section-divider" />
                    <h3>Detailed Scorecard</h3>
                    <InningsScorecard stats={innings1BatStats} teamName={innings1TeamName} inningsNumber={1} />
                    <BowlingScorecard stats={innings1BowlStats} teamName={innings2TeamName} inningsNumber={1} />
                    <hr className="innings-divider" />
                    <InningsScorecard stats={innings2BatStats} teamName={innings2TeamName} inningsNumber={2} />
                    <BowlingScorecard stats={innings2BowlStats} teamName={innings1TeamName} inningsNumber={2} />
                </div>
             )}
             <div className="back-link-container">
                 <Link to="/schedule"><button>â† Back to Schedule</button></Link>
            </div>
        </div>
    );
}
export default MatchDetailPage;




--- File: mpl-frontend\src\pages\NotFoundPage.jsx ---


// mpl-project/mpl-frontend/src/pages/NotFoundPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';

const NotFoundPage = () => (
    <div style={{ textAlign: 'center', padding: '3rem 1rem' }}>
        <h1 style={{ fontSize: '2.5rem', marginBottom: '1rem' }}>404</h1>
        <h2>Page Not Found</h2>
        <p style={{ margin: '1rem 0', color: '#555' }}>
            Sorry, the page you are looking for does not exist or may have been moved.
        </p>
        <Link to="/">
            <button>Go Back Home</button>
        </Link>
    </div>
);

export default NotFoundPage;




--- File: mpl-frontend\src\pages\PlayerDetailPage.css ---


/* src/pages/PlayerDetailPage.css */

.player-detail-page {
    padding: 1rem 0; /* Add some vertical padding */
}

/* Two-column layout for wider screens */
.player-layout {
    display: flex;
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    gap: 2rem; /* Space between columns */
}

.player-info-column {
    flex: 1; /* Take up available space */
    min-width: 250px; /* Minimum width before wrapping */
    /* background-color: #353535; */ /* Optional distinct background */
    /* padding: 1.5rem; */
    /* border-radius: 8px; */
}

.player-stats-column {
    flex: 2; /* Take up more space */
    min-width: 300px; /* Minimum width */
}

/* Player Info Styling */
.player-info-column h1 {
    margin-top: 0;
    margin-bottom: 1.5rem;
    font-size: 2.5em; /* Larger name */
    color: #fff;
    border-bottom: 1px solid #555;
    padding-bottom: 0.8rem;
}

.player-details-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.player-details-list li {
    margin-bottom: 0.8rem;
    font-size: 1.05em;
    display: flex; /* Align label and value */
    gap: 0.5rem;
}

.player-details-list .detail-label {
    font-weight: 600;
    color: #bbb;
    min-width: 120px; /* Align labels */
}

.player-details-list .detail-value {
    color: #eee;
}

.player-details-list .detail-value a { /* Style for team link */
    color: #a0a0ff;
    text-decoration: none;
}
.player-details-list .detail-value a:hover {
    text-decoration: underline;
    color: #c0c0ff;
}


/* Stats Section Styling */
.player-stats-section h2,
.player-rating-section h2 {
    margin-top: 0; /* Remove top margin if section has padding */
    margin-bottom: 1.5rem;
    border-bottom: 1px solid #555;
    padding-bottom: 0.5rem;
}

.stats-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95em;
}

.stats-table th,
.stats-table td {
    border: 1px solid #555;
    padding: 0.6rem 0.8rem;
    text-align: left;
    vertical-align: middle;
}

.stats-table th {
    background-color: #4a4a4a;
    font-weight: bold;
    white-space: nowrap;
}

.stats-table tbody tr:nth-child(even) {
    background-color: #404040;
}
.stats-table tbody tr:hover {
    background-color: #4f4f4f;
}

/* Align numeric stats */
.stats-table td:not(:first-child),
.stats-table th:not(:first-child) {
    text-align: right;
    font-variant-numeric: tabular-nums;
}

/* Rating Section */
.player-rating-section {
    margin-top: 2.5rem;
}
.player-rating-section p {
    font-size: 1.1em;
}

/* Back Link */
.back-link {
    display: inline-block; /* Allow margin */
    margin-top: 2rem;
}

/* Divider */
.section-divider {
    border: none;
    border-top: 1px solid #555;
    margin: 2.5rem 0;
}

/* Light Mode */
@media (prefers-color-scheme: light) {
  .player-info-column h1 { color: #213547; border-color: #eee; }
  .player-details-list .detail-label { color: #666; }
  .player-details-list .detail-value { color: #333; }
  .player-details-list .detail-value a { color: #0000d0; }
  .player-details-list .detail-value a:hover { color: #0000ff; }

  .player-stats-section h2,
  .player-rating-section h2 { border-color: #eee; }

  .stats-table th, .stats-table td { border-color: #ddd; }
  .stats-table th { background-color: #e8e8e8; }
  .stats-table tbody tr:nth-child(even) { background-color: #f2f2f2; }
  .stats-table tbody tr:hover { background-color: #e9e9e9; }

  .section-divider { border-color: #ccc; }
}

/* Add these styles AT THE END of src/pages/PlayerDetailPage.css */

@media (max-width: 768px) {
    .player-layout {
        flex-direction: column; /* Stack columns */
        gap: 1.5rem;
    }
    .player-info-column h1 {
        font-size: 2em; /* Adjust heading size */
        margin-bottom: 1rem;
    }
    .player-details-list li {
        font-size: 1em;
    }
    .player-details-list .detail-label {
        min-width: 100px; /* Slightly smaller label width */
    }

    .player-stats-section h2,
    .player-rating-section h2 {
        font-size: 1.4em;
    }

    .stats-table {
        font-size: 0.9em; /* Slightly smaller table text */
    }
    .stats-table th,
    .stats-table td {
        padding: 0.5rem 0.6rem; /* Reduce padding */
    }
}

@media (max-width: 480px) {
    .player-info-column h1 {
        font-size: 1.8em;
    }
     .player-stats-section h2,
    .player-rating-section h2 {
        font-size: 1.2em;
    }
     .stats-table {
        font-size: 0.85em;
    }
    .stats-table th,
    .stats-table td {
        padding: 0.4rem 0.4rem;
    }
    /* Optional: Hide less critical columns on very small screens */
    /*
    .stats-table th:nth-child(3), .stats-table td:nth-child(3), // Hide HS
    .stats-table th:nth-child(6), .stats-table td:nth-child(6) { // Hide 4s
        display: none;
    }
    .stats-table thead tr:first-child th:first-child { // Adjust Batting colspan
       colspan: 5; // Recalculate based on hidden columns
    }
    */
}




--- File: mpl-frontend\src\pages\PlayerDetailPage.jsx ---


// src/pages/PlayerDetailPage.jsx
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';
import './PlayerDetailPage.css'; // Ensure this CSS file exists

function PlayerDetailPage() {
   const { id: playerId } = useParams();
   const [player, setPlayer] = useState(null);
   const [stats, setStats] = useState(null);
   // Keep ratings state in case needed later, but don't fetch/display now
   const [ratings, setRatings] = useState({ average_rating: null, total_ratings: 0 });
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState('');

   useEffect(() => {
       let isMounted = true;
       const fetchPlayerData = async () => {
           if (!playerId) return;
           // --- Keep the reset logic ---
           setLoading(true); setError(''); setPlayer(null); setStats(null);
           // Removed ratings reset

           try {
               console.log(`Fetching data for player ID: ${playerId}`);

               // --- MODIFIED Promise.all handling ---
               const results = await Promise.all([
                   api.get(`/players/${playerId}`).catch(err => {
                       console.error(`Failed to fetch player details for ${playerId}:`, err);
                       // If player details fail, it's a critical error for this page
                       // We'll throw an error object that the outer catch can handle
                       // Include status if available from the error response
                       throw { isCritical: true, status: err.response?.status, message: err.response?.data?.message || err.message || 'Failed to load player details.' };
                   }),
                   api.get(`/players/${playerId}/stats`).catch(err => {
                       console.warn(`Could not fetch player stats for ${playerId}:`, err.message);
                       // If stats fail, log a warning but allow page to render with basic info
                       if(isMounted) setError(prev => prev ? `${prev}, Player Stats` : 'Could not load player stats.');
                       return null; // Indicate failure for stats call
                   })
                   // Ratings call is already commented out
               ]);

               // results array will contain [playerResponse, statsResponseOrNull]
               // This part only runs if the first promise (player details) succeeded
               if (isMounted) {
                   const playerRes = results[0]; // Should always exist if code reaches here
                   const statsRes = results[1];   // Might be null if stats call failed

                   console.log("Raw playerRes:", playerRes);
                   console.log("Raw statsRes:", statsRes); // Log for debugging

                   // Set state using optional chaining for safety
                   setPlayer(playerRes?.data || null); // Should have data if we got here
                   setStats(statsRes?.data || null);   // Will be null if stats call failed

                   // If primary player data failed somehow (should have been caught), set error
                   if (!playerRes?.data) {
                        setError(prev => prev ? `${prev}, Invalid player data received.` : 'Invalid player data received.');
                        setPlayer(null);
                   }
               }
           } catch (err) {
               // Catch errors from Promise.all (specifically the critical player fetch) or other sync errors
               console.error("Failed to fetch player data (outer catch):", err);
               // Use message from thrown error if available (like from the critical player fetch failure)
               const errorMessage = err?.message || 'Failed to load player data.';
               if (isMounted) setError(errorMessage);
               // Ensure state is reset on critical error
               if (isMounted) { setPlayer(null); setStats(null); }
           } finally {
               if (isMounted) setLoading(false);
           }
       };
       fetchPlayerData();
       return () => { isMounted = false; };
   }, [playerId]);


   // --- Render Logic ---
   if (loading) return <LoadingFallback />;

   // If there was an error AND player data couldn't be loaded at all (player is null)
   if (error && !player) return <div className="error-message" style={{ textAlign: 'center' }}>Error: {error}</div>;

   // If loading finished but player is still null (e.g., 404 not found error was set)
   if (!player) return <div style={{ textAlign: 'center' }}>Player not found.</div>;

   // Player data exists, proceed with rendering
   return (
       <div className="player-detail-page">
            {/* Show non-critical errors (like stats failing) if player data loaded */}
            {error && !error.includes('Player not found') && <p className="error-message">Could not load all data: {error}</p>}

            <div className="player-layout">
                 <div className="player-info-column">
                     <h1>{player.name || 'Player Name Missing'}</h1>
                     <ul className="player-details-list">
                         <li><span className="detail-label">Role:</span><span className="detail-value">{player.role || 'N/A'}</span></li>
                         <li><span className="detail-label">Current Team:</span><span className="detail-value">{player.current_team_name || 'Unassigned'}</span></li>
                         <li><span className="detail-label">Average Impact:</span><span className="detail-value">{player.average_impact?.toFixed(2) ?? 'N/A'}</span></li>
                         <li><span className="detail-label">Base Price:</span><span className="detail-value">{player.base_price != null ? `$${parseFloat(player.base_price).toFixed(2)}` : 'N/A'}</span></li>
                     </ul>
                 </div>

                 <div className="player-stats-column">
                     <section className="player-stats-section">
                         <h2>Statistics (Career)</h2>
                         {/* Check if stats object exists AND matches were played */}
                         {stats && stats.matches_played >= 0 ? (
                            <div className="table-responsive">
                                <table className="stats-table">
                                    <thead>
                                        <tr><th colSpan="6">Batting</th></tr>
                                        <tr><th>Mat</th><th>Runs</th><th>HS</th><th>Avg</th><th>SR</th><th>4s</th></tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>{stats.matches_played ?? '-'}</td>
                                            <td>{stats.total_runs ?? '-'}</td>
                                            <td>{stats.highest_score ?? '-'}</td>
                                            <td>{stats.batting_average_display ?? '-'}</td>
                                            <td>{stats.batting_strike_rate ?? '-'}</td>
                                            <td>{stats.total_fours ?? '-'}</td>
                                        </tr>
                                    </tbody>
                                    {/* Bowling Section (Conditional) */}
                                    {stats.total_overs_bowled != null && stats.total_overs_bowled > 0 && (
                                        <>
                                            <thead>
                                                <tr><th colSpan="7">Bowling</th></tr> {/* Adjusted colspan */}
                                                <tr><th>Mat</th><th>Overs</th><th>SO Bowled</th><th>Runs</th><th>Wkts</th><th>Econ</th></tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>{stats.matches_played ?? '-'}</td>
                                                    <td>{stats.total_overs_bowled != null && !isNaN(parseFloat(stats.total_overs_bowled)) ? parseFloat(stats.total_overs_bowled).toFixed(1) : '-'}</td>
                                                    <td>{stats.super_overs_bowled ?? '0'}</td>
                                                    <td>{stats.total_runs_conceded ?? '-'}</td>
                                                    <td>{stats.total_wickets ?? '-'}</td>
                                                    <td>{stats.bowling_economy_rate ?? '-'}</td>
                                                </tr>
                                            </tbody>
                                        </>
                                     )}
                                </table>
                            </div>
                         ) : (
                             <p>No detailed statistics available yet.</p>
                         )}
                     </section>

                    <hr className="section-divider" />

                     <section className="player-rating-section">
                         <h2>Impact Points (Career)</h2>
                         {stats ? (
                             <ul className="player-details-list">
                                 <li>
                                     <span className="detail-label">Batting Impact:</span>
                                     <span className="detail-value">{stats.total_batting_impact != null && !isNaN(parseFloat(stats.total_batting_impact)) ? parseFloat(stats.total_batting_impact).toFixed(1) : '0.0'}</span>
                                 </li>
                                 <li>
                                     <span className="detail-label">Bowling Impact:</span>
                                     <span className="detail-value">{stats.total_bowling_impact != null && !isNaN(parseFloat(stats.total_bowling_impact)) ? parseFloat(stats.total_bowling_impact).toFixed(1) : '0.0'}</span>
                                 </li>
                                 <li>
                                     <span className="detail-label">Fielding Impact:</span>
                                     <span className="detail-value">{stats.total_fielding_impact != null && !isNaN(parseFloat(stats.total_fielding_impact)) ? parseFloat(stats.total_fielding_impact).toFixed(1) : '0.0'}</span>
                                 </li>
                             </ul>
                         ) : (
                             <p>Impact point data not available.</p>
                         )}
                     </section>
                 </div>
            </div>

            <Link to="/players" className="back-link">â† Back to Players List</Link>
       </div>
   );
}

export default PlayerDetailPage;




--- File: mpl-frontend\src\pages\PlayersPage.jsx ---


// mpl-project/mpl-frontend/src/pages/PlayersPage.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../services/api'; // Your configured Axios instance
import LoadingFallback from '../components/LoadingFallback';

function PlayersPage() {
    const [players, setPlayers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    useEffect(() => {
        const fetchPlayers = async () => {
            setLoading(true);
            setError('');
            try {
                console.log("Fetching players list...");
                const { data } = await api.get('/players'); // API call to get player list
                setPlayers(data);
                console.log("Players fetched:", data.length);
            } catch (err) {
                console.error("Failed to fetch players:", err);
                const errorMessage = typeof err === 'string' ? err : (err.message || 'Failed to load players list.');
                setError(errorMessage);
            } finally {
                setLoading(false);
            }
        };

        fetchPlayers();
    }, []); // Empty dependency array ensures this runs only once on mount

    if (loading) return <LoadingFallback />;
    if (error) return <div className="error-message">Error loading players: {error}</div>;

    return (
        <div>
            <h1>MPL Players</h1>
            {/* Optional: Add search/filter functionality here */}
            {players.length > 0 ? (
                <table>
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Role</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody>
                        {players.map((player) => (
                            <tr key={player.player_id}>
                                <td>{player.name}</td>
                                <td>{player.role || 'N/A'}</td>
                                <td>
                                    <Link to={`/players/${player.player_id}`}>View Profile</Link>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            ) : (
                <p>No players found.</p>
            )}
             {/* Optional: Link to player registration form (if public/allowed) */}
        </div>
    );
}

export default PlayersPage;




--- File: mpl-frontend\src\pages\SchedulePage.jsx ---


// mpl-project/mpl-frontend/src/pages/SchedulePage.jsx
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';

function SchedulePage() {
    const [fixtures, setFixtures] = useState([]);
    const [seasons, setSeasons] = useState([]);
    const [selectedSeason, setSelectedSeason] = useState('');
    const [selectedStatus, setSelectedStatus] = useState(''); // 'Scheduled', 'Live', 'Completed' etc.
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    // Fetch available seasons for dropdown
    useEffect(() => {
        const fetchSeasons = async () => {
            try {
                const { data } = await api.get('/seasons/public'); //New public season api call
                setSeasons(data);
                // Optionally set the default selectedSeason to the latest one
                if (data.length > 0) {
                   // Find the most recent year or highest ID? Assuming sorted by year desc
                   setSelectedSeason(data[0].season_id);
                }
            } catch (err) {
                console.error("Failed to fetch seasons:", err);
                // Don't necessarily block fixture loading if seasons fail
            }
        };
        fetchSeasons();
    }, []);

    // Fetch fixtures based on selected filters
    useEffect(() => {
        const fetchFixtures = async () => {
            // Don't fetch until a season is selected (if seasons are used)
            if (!selectedSeason && seasons.length > 0) return;

            setLoading(true);
            setError('');
            try {
                const params = {};
                if (selectedSeason) params.season_id = selectedSeason;
                if (selectedStatus) params.status = selectedStatus;
                console.log("FETCHING FIXTURES FROM:", '/matches', "with params:", params);
                const { data } = await api.get('/matches', { params });
                setFixtures(data);
            } catch (err) {
                console.error("Failed to fetch fixtures:", err);
                setError(typeof err === 'string' ? err : 'Failed to load schedule. Please try again.');
            } finally {
                setLoading(false);
            }
        };

        fetchFixtures();
    }, [selectedSeason, selectedStatus, seasons]); // Refetch when filters change

    return (
        <div>
            <h2>MPL Schedule & Results</h2>

            {/* Filter Controls */}
            <div style={{ marginBottom: '1.5rem', display: 'flex', gap: '1rem', alignItems: 'center' }}>
                 {seasons.length > 0 && (
                    <div>
                        <label htmlFor="season-select" style={{ marginRight: '0.5rem' }}>Season:</label>
                        <select
                            id="season-select"
                            value={selectedSeason}
                            onChange={(e) => setSelectedSeason(e.target.value)}
                        >
                            <option value="">All Seasons</option>
                            {seasons.map(season => (
                                <option key={season.season_id} value={season.season_id}>
                                    {season.name} ({season.year})
                                </option>
                            ))}
                        </select>
                    </div>
                 )}
                 <div>
                    <label htmlFor="status-select" style={{ marginRight: '0.5rem' }}>Status:</label>
                    <select
                        id="status-select"
                        value={selectedStatus}
                        onChange={(e) => setSelectedStatus(e.target.value)}
                    >
                        <option value="">All Statuses</option>
                        <option value="Scheduled">Scheduled</option>
                        <option value="Live">Live</option>
                        <option value="Completed">Completed</option>
                        <option value="Setup">Setup</option>
                        <option value="Abandoned">Abandoned</option>
                    </select>
                 </div>
            </div>


            {loading && <LoadingFallback message="Loading schedule..." />}
            {error && <p className="error-message">Error: {error}</p>}

            {!loading && !error && fixtures.length > 0 ? (
                <table>
                    <thead>
                        <tr>
                            <th>Date & Time</th>
                            <th>Match</th>
                            <th>Venue</th>
                            <th>Status</th>
                            <th>Result / Link</th>
                        </tr>
                    </thead>
                    <tbody>
                        {fixtures.map((match) => (
                            <tr key={match.match_id}>
                                <td>{new Date(match.match_datetime).toLocaleString()}</td>
                                <td>{match.team1_name} vs {match.team2_name}</td>
                                <td>{match.venue}</td>
                                <td>{match.status}</td>
                                <td>
                                    {match.status === 'Completed' ? (
                                        <>
                                        {match.result_summary || 'View Details'} <br/>
                                        <Link to={`/matches/${match.match_id}`}>Details</Link>
                                        </>
                                    ) : match.status === 'Live' || match.status === 'Setup' ? (
                                        <Link to={`/matches/${match.match_id}`}>
                                            <button style={{ backgroundColor: '#dc3545', padding: '0.3em 0.6em', fontSize: '0.9rem' }}>
                                                {match.status === 'Live' ? 'View Live' : 'View Setup'}
                                            </button>
                                        </Link>
                                    ) : (
                                        <Link to={`/matches/${match.match_id}`}>View Details</Link>
                                    )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            ) : (
                !loading && <p>No fixtures found matching the current filters.</p>
            )}
        </div>
    );
}

export default SchedulePage;




--- File: mpl-frontend\src\pages\StandingsPage.css ---


/* src/pages/StandingsPage.css */

.standings-page h2 {
    text-align: center;
    margin-bottom: 1.5rem;
}

.filter-section {
    margin-bottom: 2rem;
    text-align: center;
}

.filter-section label {
    margin-right: 0.5rem;
    font-weight: 500;
}

.table-responsive {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
}

.standings-table {
    width: 100%;
    min-width: 650px; /* Adjusted min-width for new column */
    border-collapse: collapse;
    font-size: 0.95em;
    background-color: #383838;
    border-radius: 5px;
    overflow: hidden;
}

.standings-table th,
.standings-table td {
    border: 1px solid #555;
    padding: 0.7rem 0.9rem;
    text-align: left;
    vertical-align: middle;
}

.standings-table th {
    background-color: #4a4a4a;
    font-weight: bold;
    white-space: nowrap;
}

.standings-table tbody tr:nth-child(even) {
    background-color: #404040;
}

.standings-table tbody tr:hover {
    background-color: #4f4f4f;
}

/* Specific column styles */
.standings-table .position {
    text-align: center;
    font-weight: bold;
    width: 50px;
}
.standings-table .team-name {
    font-weight: 500;
    min-width: 180px;
}
.standings-table .nrr {
    font-weight: 500;
}
.standings-table .points {
    font-weight: bold;
}

/* Right align numeric columns - Adjusted indices for new NR column */
.standings-table td:not(:nth-child(2)):not(:nth-child(7)), /* Exclude Team Name and NRR */
.standings-table th:not(:nth-child(2)):not(:nth-child(7)) {
     text-align: center;
     font-variant-numeric: tabular-nums;
     width: 70px;
}
/* Align Team Name header left */
.standings-table th:nth-child(2),
.standings-table td:nth-child(2) {
    text-align: left;
}
/* Align NRR header/cell right (now column 7) */
.standings-table th:nth-child(7),
.standings-table td:nth-child(7) {
    text-align: right;
    width: 90px;
}
/* Align Points header/cell center (now column 8) */
.standings-table th:nth-child(8),
.standings-table td:nth-child(8) {
    text-align: center;
    width: 60px;
}

/* Light mode */
@media (prefers-color-scheme: light) {
    .standings-table { background-color: #f9f9f9; }
    .standings-table th, .standings-table td { border-color: #ddd; }
    .standings-table th { background-color: #e8e8e8; }
    .standings-table tbody tr:nth-child(even) { background-color: #f2f2f2; }
    .standings-table tbody tr:hover { background-color: #e9e9e9; }
}




--- File: mpl-frontend\src\pages\StandingsPage.jsx ---


// src/pages/StandingsPage.jsx
import React, { useState, useEffect } from 'react';
import api from '../services/api';
import LoadingFallback from '../components/LoadingFallback';
import './StandingsPage.css'; // Create this CSS file

function StandingsPage() {
    const [seasons, setSeasons] = useState([]);
    const [selectedSeason, setSelectedSeason] = useState('');
    const [standings, setStandings] = useState([]);
    const [loadingSeasons, setLoadingSeasons] = useState(true);
    const [loadingData, setLoadingData] = useState(false);
    const [error, setError] = useState('');

    // Fetch Seasons
    useEffect(() => {
        const fetchSeasons = async () => {
            setLoadingSeasons(true);
            try {
                const { data } = await api.get('/seasons/public'); // Fetch all seasons
                setSeasons(data);
                if (data.length > 0) {
                    setSelectedSeason(data[0].season_id); // Default to latest
                }
            } catch (err) { setError('Failed to load seasons.'); }
            finally { setLoadingSeasons(false); }
        };
        fetchSeasons();
    }, []);

    // Fetch Standings when season changes
    useEffect(() => {
        if (!selectedSeason) {
            setStandings([]); // Clear standings if no season selected
            return;
        };

        const fetchStandings = async () => {
            setLoadingData(true); setError(''); setStandings([]);
            try {
                console.log(`Fetching standings for season: ${selectedSeason}`);
                const { data } = await api.get(`/standings?season_id=${selectedSeason}`);
                setStandings(data);
            } catch (err) {
                console.error("Failed to fetch standings:", err);
                setError(typeof err === 'string' ? err : `Failed to load standings.`);
                setStandings([]);
            } finally {
                setLoadingData(false);
            }
        };
        fetchStandings();
    }, [selectedSeason]);

    return (
        <div className="standings-page">
            <h2>Team Standings</h2>

            {loadingSeasons ? <LoadingFallback /> : (
                <div className="filter-section">
                    <label htmlFor="season-select-standings">Select Season:</label>
                    <select
                        id="season-select-standings"
                        value={selectedSeason}
                        onChange={(e) => setSelectedSeason(e.target.value)}
                        disabled={loadingData}
                    >
                        <option value="">-- Select Season --</option>
                        {seasons.map(s => (
                            <option key={s.season_id} value={s.season_id}>
                                {s.name} ({s.year})
                            </option>
                        ))}
                    </select>
                </div>
            )}

            {error && <p className="error-message">{error}</p>}

            {loadingData && <LoadingFallback message="Loading standings..." />}

            {!loadingData && selectedSeason && standings.length === 0 && (
                <p>No standings available for this season yet (check if matches are completed).</p>
            )}

            {!loadingData && standings.length > 0 && (
                <div className="table-responsive">
                    <table className="standings-table">
                        <thead>
                            <tr>
                                <th>Pos</th>
                                <th>Team</th>
                                <th>Played</th>
                                <th>Won</th>
                                <th>Lost</th>
                                <th>NR</th> {/* Added Header */}
                                <th>NRR</th>
                                <th>Pts</th>
                            </tr>
                        </thead>
                        <tbody>
                            {standings.map((team) => (
                                <tr key={team.team_id}>
                                    <td className="position">{team.position}</td>
                                    <td className="team-name">{team.name}</td>
                                    <td>{team.played}</td>
                                    <td>{team.wins}</td>
                                    <td>{team.losses}</td>
                                    <td>{team.no_result}</td> {/* Added Data Cell */}
                                    <td className="nrr">{team.nrrDisplay}</td>
                                    <td className="points">{team.points}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}
        </div>
    );
}

export default StandingsPage;




--- File: mpl-frontend\src\pages\admin\AdminDashboardPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminDashboardPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';

function AdminDashboardPage() {
     // Attempt to get username from localStorage for personalization
     let adminUsername = 'Admin';
     try {
        const adminInfoString = localStorage.getItem('adminInfo');
        if (adminInfoString) {
             adminUsername = JSON.parse(adminInfoString)?.username || 'Admin';
        }
     } catch(e) { console.error("Error reading admin username", e); }


    return (
        <div>
            <h2>Admin Dashboard</h2>
            <p>Welcome back, {adminUsername}!</p>
            <p>Select an option below to manage the league:</p>
            <ul style={{ listStyle: 'none', paddingLeft: 0, marginTop: '1.5rem' }}>
                <li style={{ marginBottom: '0.8rem' }}>
                    <Link to="/admin/seasons">
                        <button style={{ width: '250px', textAlign: 'left' }}>Manage Seasons</button>
                    </Link>
                </li>
                <li style={{ marginBottom: '0.8rem' }}>
                     <Link to="/admin/teams">
                        <button style={{ width: '250px', textAlign: 'left' }}>Manage Teams / Players</button>
                     </Link>
                      {/* Could link to /admin/players directly too */}
                </li>
                
                <li style={{ marginBottom: '0.8rem' }}> {/* <-- ADD THIS LI BLOCK --> */}
                    <Link to="/admin/players"><button style={{ width: '250px', textAlign: 'left' }}>Manage Players (Register/Edit)</button></Link>
                </li>
                 
                <li style={{ marginBottom: '0.8rem' }}>
                    <Link to="/admin/schedule"> {/* <-- Add Link */}
                        <button style={{ width: '250px', textAlign: 'left' }}>Manage Match Schedule</button>
                    </Link>
                </li>
                 <li style={{ marginBottom: '0.8rem' }}>
                    <Link to="/admin/scoring/setup">
                        <button style={{ width: '250px', textAlign: 'left' }}>Setup Match Scoring</button>
                    </Link>
                </li>

                <li style={{ marginBottom: '0.8rem' }}>
                    <Link to="/admin/resolve">
                        <button style={{ width: '250px', textAlign: 'left' }}>Resolve Tie/Incomplete Match</button>
                    </Link>
                </li>
                
                 {/* Add links to Manage Payments, Approve Registrations etc. */}
                 {/* Example:
                 <li style={{ marginBottom: '0.8rem' }}>
                    <Link to="/admin/payments">
                        <button style={{ width: '250px', textAlign: 'left' }}>Manage Payments</button>
                    </Link>
                </li>
                 */}
            </ul>
        </div>
    );
}
export default AdminDashboardPage;




--- File: mpl-frontend\src\pages\admin\AdminLiveScoringPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminLiveScoringPage.jsx
import React, { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useParams, useNavigate } from 'react-router-dom'; // Removed useLocation
import { useSocket } from '../../context/SocketContext';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

// --- ScoreDisplay Component (Assume correct from previous versions) ---
const ScoreDisplay = ({ state }) => {
    if (!state) return <div style={{ border: '1px solid #eee', padding: '1rem', marginBottom: '1rem', backgroundColor: '#f9f9f9', borderRadius: '5px', color: '#888' }}>Waiting for match state...</div>;
    const status = state.status;
    const battingTeamId = state.battingTeamId;
    const bowlingTeamId = state.bowlingTeamId;
    const battingTeamName = `Team ${battingTeamId || '?'}`;
    const bowlingTeamName = `Team ${bowlingTeamId || '?'}`;

    return (
         <div style={{ border: '1px solid #eee', padding: '1rem', marginBottom: '1rem', backgroundColor: '#f9f9f9', borderRadius: '5px' }}>
            <p><strong>Status:</strong> <span style={{ fontWeight: 'bold', color: status === 'Live' ? 'red' : 'inherit' }}>{status ?? 'Loading...'}</span></p>
            {['Setup', 'Live', 'InningsBreak', 'Completed'].includes(status) && battingTeamId && bowlingTeamId &&
              <p><strong>Batting:</strong> {battingTeamName} | <strong>Bowling:</strong> {bowlingTeamName}</p>
            }
            <p style={{ fontSize: '1.8rem', fontWeight: 'bold', margin: '0.5rem 0' }}>Score: {state.score ?? 0} / {state.wickets ?? 0}</p>
             <p style={{ fontSize: '1.2rem' }}>Overs: {state.overs ?? 0}.{state.balls ?? 0} / 5.0</p>
             <p>Super Over: #{state.superOver ?? 'N/A'}</p>
             {state.target != null && state.inningNumber === 2 && <p><strong>Target: {state.target}</strong></p>}
             {state.lastBallCommentary && <p style={{ marginTop: '0.5rem', fontStyle: 'italic', borderTop: '1px dashed #ccc', paddingTop: '0.5rem' }}>{state.lastBallCommentary}</p>}
        </div>
    );
};


// --- RecentBalls Display (Assume correct from previous versions) ---
const RecentBalls = ({ summary }) => {
    if (!summary) return null;
    const balls = summary.split(', ').filter(b => b);
    return (
        <div style={{ marginTop: '10px', fontStyle: 'italic', color: '#555', fontSize:'0.9em' }}>
            Recent: {balls.length > 0 ? balls.join(' | ') : 'No balls recorded yet.'}
        </div>
    );
};

// --- Main Component ---
function AdminLiveScoringPage() {
    const { matchId } = useParams();
    const navigate = useNavigate();
    const { socket, isConnected, connectSocket, joinMatchRoom, leaveMatchRoom } = useSocket();

    const [matchState, setMatchState] = useState(null); // Will be populated by API fetch
    const [isLoading, setIsLoading] = useState(true); // Start loading true
    const [error, setError] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false); // For disabling buttons during API calls
    const hasJoinedRoom = useRef(false);

    // --- State for Scoring Inputs ---
    const [currentBowlerId, setCurrentBowlerId] = useState('');
    const [currentBatsmanId, setCurrentBatsmanId] = useState('');
    const [isWicketEvent, setIsWicketEvent] = useState(false);
    const [selectedWicketType, setSelectedWicketType] = useState('');
    const [selectedFielderId, setSelectedFielderId] = useState('');

    // --- Refs for comparing previous state ---
    const prevStateRef = useRef(null); // Initialize null
    useEffect(() => { prevStateRef.current = matchState; }, [matchState]);


    // --- Effect to Fetch Initial/Current Match State via API ---
    useEffect(() => {
        let isMounted = true;
        const fetchMatchState = async () => {
            if (!matchId) {
                if(isMounted) setError("No Match ID provided.");
                if(isMounted) setIsLoading(false);
                return;
            }
            // Reset state before fetching
            if (isMounted) setIsLoading(true);
            if (isMounted) setError('');
            if (isMounted) setMatchState(null); // Clear previous state
            hasJoinedRoom.current = false; // Reset room join status
            if (isMounted) setCurrentBowlerId(''); // Reset selections
            if (isMounted) setCurrentBatsmanId('');
            if (isMounted) setIsWicketEvent(false);
            if (isMounted) setSelectedWicketType('');
            if (isMounted) setSelectedFielderId('');


            try {
                console.log(`AdminLiveScoring: Fetching state for match ${matchId} via API`);
                // Call the new backend endpoint
                const { data: fetchedState } = await api.get(`/admin/scoring/matches/${matchId}/state`);

                if (isMounted) {
                    console.log("AdminLiveScoring: Received state from API:", fetchedState);
                    if (!fetchedState || !fetchedState.status) {
                        throw new Error("Invalid state received from server.");
                    }
                     // Validate status - scoring page only makes sense for certain statuses
                     if (!['Setup', 'Live', 'InningsBreak', 'Completed'].includes(fetchedState.status)) {
                         setError(`Match status is '${fetchedState.status}'. Cannot initiate/resume scoring.`);
                         setMatchState(fetchedState); // Still set state for display purposes
                         setIsLoading(false);
                         return; // Don't proceed further (e.g., joining socket room for scoring)
                     }

                    setMatchState(fetchedState);
                    prevStateRef.current = fetchedState; // Initialize prev state ref
                }
            } catch (err) {
                console.error("AdminLiveScoring: Failed to fetch match state:", err);
                if (isMounted) {
                    const errorMsg = typeof err === 'string' ? err : (err.response?.data?.message || err.message || 'Failed to load match state.');
                    setError(errorMsg);
                    setMatchState(null); // Clear state on error
                }
            } finally {
                if (isMounted) setIsLoading(false);
            }
        };

        fetchMatchState();

        return () => { isMounted = false; };
    }, [matchId]); // Fetch whenever matchId changes


    // --- Effect to handle Socket Connection and State Updates ---
    useEffect(() => {
        // **Wait** until loading is complete AND we have a valid matchState with a scoreable status
        const scoreableStatuses = ['Setup', 'Live', 'InningsBreak'];
        if (!socket || !matchId || isLoading || !matchState || !scoreableStatuses.includes(matchState.status)) {
             console.log(`Socket Effect skipped: socket=${!!socket}, matchId=${matchId}, isLoading=${isLoading}, matchState=${!!matchState}, scoreableStatus=${scoreableStatuses.includes(matchState?.status)}`);
             // Cleanup function for when effect doesn't run or dependencies change triggering exit
             return () => {
                 if (socket && hasJoinedRoom.current) {
                    console.log(`Cleanup: Leaving room ${matchId} because component unmounted or state became invalid.`);
                    leaveMatchRoom(matchId);
                    hasJoinedRoom.current = false;
                 }
             }
        }

        const attemptJoinRoom = () => {
            if (isConnected && !hasJoinedRoom.current) {
                console.log(`---> Admin attempting to join room match_${matchId}`);
                joinMatchRoom(matchId);
                hasJoinedRoom.current = true;
            } else if (!isConnected) {
                 console.log("Socket not connected, cannot join room yet.");
            } else if (hasJoinedRoom.current) {
                console.log("Admin already joined room.");
            }
        };

        if (isConnected) {
            attemptJoinRoom();
        } else {
            console.log("Socket connecting...");
            connectSocket(); // Attempt connection if not already connected
        }

        // Define handlers
        const handleConnect = () => {
             console.log("Admin socket connected, attempting join...");
             attemptJoinRoom();
        };
        const handleUpdateScore = (newState) => {
            if (newState && newState.matchId === parseInt(matchId)) {
                console.log('Scorer received state update via Socket:', {score: newState.score, wickets: newState.wickets, overs: newState.overs, balls: newState.balls, status: newState.status});
                const oldState = prevStateRef.current; // Use ref for comparison
                const prevBallsCount = oldState?.balls ?? -1;
                const prevWicketCount = oldState?.wickets ?? 0;
                const oldStatus = oldState?.status;
                const prevOversCount = oldState?.overs ?? -1;

                // Update UI state FIRST - This triggers re-render
                setMatchState(newState);

                // Clear transient form states AFTER state update
                setError(''); // Clear previous errors on successful update
                setIsWicketEvent(false);
                setSelectedWicketType('');
                setSelectedFielderId('');

                // Logic to clear player selections based on state change
                const currentBallsCount = newState.balls ?? -1;
                const currentWicketCount = newState.wickets ?? 0;
                const currentOversCount = newState.overs ?? 0;

                 // Clear bowler if over genuinely completed (balls became 0 AND overs increased) OR innings break started
                 const overCompleted = (currentBallsCount === 0 && prevBallsCount >= 0 && currentOversCount > prevOversCount);
                 const inningsBreakStarted = (newState.status === 'InningsBreak' && oldStatus !== 'InningsBreak');
                if (overCompleted || inningsBreakStarted) {
                    console.log("Clearing bowler selection due to over complete or innings break.");
                    setCurrentBowlerId(''); // Clear bowler state
                }

                 // Clear batsman if wicket fell AND match didn't just end/break/setup
                 const wicketFell = currentWicketCount > prevWicketCount;
                 const shouldClearBatsman = wicketFell && !['Completed', 'InningsBreak', 'Setup'].includes(newState.status);
                 if (shouldClearBatsman) {
                    console.log("Clearing batsman selection due to wicket.");
                    setCurrentBatsmanId(''); // Clear batsman state
                }

            } else {
                 console.log(`Scorer received update for different match (${newState?.matchId}) or invalid data. Ignoring.`);
            }
        };
        const handleInningsBreak = (breakState) => { if (breakState && breakState.matchId === parseInt(matchId)) { console.log("Handling inningsBreak event"); setMatchState(prev => ({...prev, ...breakState})); prevStateRef.current = {...(prevStateRef.current || {}), ...breakState}; setCurrentBowlerId(''); setCurrentBatsmanId(''); }};
        const handleMatchEnded = (endState) => { if (endState && endState.matchId === parseInt(matchId)) { console.log("Handling matchEnded event"); setMatchState(prev => ({...prev, ...endState})); prevStateRef.current = {...(prevStateRef.current || {}), ...endState}; }};
        const handleScoringError = (errorMsg) => { console.error('Socket scoring error:', errorMsg); setError(`Scoring Error (Live): ${errorMsg.message || 'Unknown error'}`); };

        // Register listeners
        socket.on('connect', handleConnect);
        socket.on('updateScore', handleUpdateScore);
        socket.on('inningsBreak', handleInningsBreak);
        socket.on('matchEnded', handleMatchEnded);
        socket.on('scoringError', handleScoringError);

        // Component unmount cleanup
        return () => {
             console.log(`Admin scoring page unmounting/deps changing. Leaving room ${matchId}.`);
             if(socket && hasJoinedRoom.current) leaveMatchRoom(matchId);
             hasJoinedRoom.current = false;
             // Unregister listeners
             if(socket) {
                 socket.off('connect', handleConnect);
                 socket.off('updateScore', handleUpdateScore);
                 socket.off('inningsBreak', handleInningsBreak);
                 socket.off('matchEnded', handleMatchEnded);
                 socket.off('scoringError', handleScoringError);
             }
        };
    // Dependencies: Ensure all variables used inside effect are listed correctly
    }, [socket, isConnected, matchId, isLoading, matchState, connectSocket, joinMatchRoom, leaveMatchRoom]);


    // --- Calculate Eligible Players ---
     const eligibleBowlers = useMemo(() => {
        if (!matchState?.playersBowlingTeam) return [];
        const bowlerStatsMap = new Map(matchState.bowlerStats?.map(s => [s.player_id, s.completed_overs || 0]) || []);
        const twoOverBowlerExists = matchState.bowlerStats?.some(s => (s.completed_overs || 0) >= 2) || false;
        const twoOverBowlerId = twoOverBowlerExists ? matchState.bowlerStats?.find(s => (s.completed_overs || 0) >= 2)?.player_id : null;
        return matchState.playersBowlingTeam.filter(player => {
            const completedOvers = bowlerStatsMap.get(player.player_id) || 0;
            if (completedOvers >= 2) return false;
            if (completedOvers >= 1 && twoOverBowlerExists && player.player_id !== twoOverBowlerId) return false;
            return true;
        });
    }, [matchState?.playersBowlingTeam, matchState?.bowlerStats]);

    const availableBatsmen = useMemo(() => {
        if (!matchState?.playersBattingTeam) return [];
        const outIds = new Set(matchState.batsmenOutIds || []);
        return matchState.playersBattingTeam.filter(player => !outIds.has(player.player_id));
    }, [matchState?.playersBattingTeam, matchState?.batsmenOutIds]);


    // --- Ball API Submission Handler ---
    const submitBallData = useCallback(async (ballDetails) => {
        setError('');
        if (!currentBowlerId) { setError("Please select the Bowler."); return; }
        if (!currentBatsmanId) { setError("Please select the Batsman."); return; }
        // Allow submission if Live OR Setup (to trigger start) OR InningsBreak (to trigger start)
        if (!matchState || !['Setup', 'Live', 'InningsBreak'].includes(matchState.status)) { setError(`Cannot score: Status is '${matchState?.status || 'Unknown'}'.`); return; }
        if (ballDetails.isWicket && !ballDetails.wicketType) { setError("Wicket Type missing."); return; }
        if (ballDetails.isExtra && !ballDetails.extraType) { setError("Extra Type missing."); return; }
        if (['Caught','Stumped'].includes(ballDetails.wicketType) && ballDetails.isWicket && !ballDetails.fielderPlayerId) { setError("Fielder needed for Caught/Stumped."); return; }

        setIsSubmitting(true);
        const payload = {
            inningNumber: matchState.status === 'InningsBreak' ? 2 : (matchState.inningNumber || 1),
            bowlerPlayerId: parseInt(currentBowlerId),
            batsmanOnStrikePlayerId: parseInt(currentBatsmanId),
            runsScored: ballDetails.runsScored ?? 0,
            isExtra: ballDetails.isExtra ?? false,
            extraType: ballDetails.extraType || null,
            extraRuns: ballDetails.extraRuns || 0,
            isWicket: ballDetails.isWicket ?? false,
            wicketType: ballDetails.wicketType || null,
            fielderPlayerId: ballDetails.fielderPlayerId ? parseInt(ballDetails.fielderPlayerId) : null,
            isBye: ballDetails.isBye ?? false,
        };
        console.log("Submitting Ball Data:", payload);
        try {
            await api.post(`/admin/scoring/matches/${matchId}/ball`, payload);
            setIsWicketEvent(false); setSelectedWicketType(''); setSelectedFielderId('');
            const { data: fetchedState } = await api.get(`/admin/scoring/matches/${matchId}/state`);
            if (!fetchedState || !fetchedState.status) {
                throw new Error("Invalid state received from server.");
            }
             // Validate status - scoring page only makes sense for certain statuses
             if (!['Setup', 'Live', 'InningsBreak', 'Completed'].includes(fetchedState.status)) {
                 setError(`Match status is '${fetchedState.status}'. Cannot initiate/resume scoring.`);
                 setMatchState(fetchedState); // Still set state for display purposes
                 setIsLoading(false);
                 return; // Don't proceed further (e.g., joining socket room for scoring)
             }

            setMatchState(fetchedState);
            prevStateRef.current = fetchedState; 
        } catch (err) {
            console.error("Error submitting ball:", err);
            const errorMsg = typeof err === 'string' ? err : (err?.message || 'Failed to score ball.');
            setError(errorMsg);
        } finally {
            setIsSubmitting(false);
        }
    }, [matchState, matchId, currentBowlerId, currentBatsmanId]);


    // --- Handlers for UI Controls ---
    const handleLegalBall = (runs) =>
        submitBallData({ runsScored: runs, isBye: false });
      
      const handleBye = (runs) =>
        submitBallData({ runsScored: runs, isBye: true });
      
      const handleWideClick = () =>
        submitBallData({
          isExtra: true,
          extraType: "Wide",
          extraRuns: 1,
          runsScored: 0,
          isBye: false,
        });
      
      const handleWideByeClick = (byes) =>
        submitBallData({
          isExtra: true,
          extraType: "Wide",
          extraRuns: 1,
          runsScored: byes,
          isBye: true,
        });
      
      const handleNoBallClick = (runs) =>
        submitBallData({
          isExtra: true,
          extraType: "NoBall",
          extraRuns: 1,
          runsScored: runs,
          isBye: false,
        });
      
      const handleNoBallByeClick = (byes) =>
        submitBallData({
          isExtra: true,
          extraType: "NoBall",
          extraRuns: 1,
          runsScored: byes,
          isBye: true,
        });
      
      const handleWicketConfirm = () => {
        if (!selectedWicketType) {
          setError("Wicket type needed");
          return;
        }
        if (
          ["Caught", "Stumped"].includes(selectedWicketType) &&
          !selectedFielderId
        ) {
          setError("Fielder needed");
          return;
        }
        submitBallData({
          isWicket: true,
          wicketType: selectedWicketType,
          fielderPlayerId: selectedFielderId,
          runsScored: 0,
          isBye: false,
          isExtra: false,
        });
      };
      
      const handleUndo = async () => {
        if (
          !matchState ||
          !["Live", "InningsBreak", "Completed"].includes(matchState.status)
        ) {
          setError("Cannot undo ball in current match state.");
          return;
        }
      
        /* Basic check - might still fail if DB is empty */
        if (
          matchState.score === 0 &&
          matchState.wickets === 0 &&
          matchState.overs === 0 &&
          matchState.balls === 0 &&
          matchState.inningNumber === 1 &&
          matchState.status !== "Completed"
        ) {
          setError("No balls seem to have been bowled yet to undo.");
          return;
        }
      
        if (!window.confirm("Are you sure you want to undo the last recorded ball?"))
          return;
        setError("");
        setIsSubmitting(true);
      
        try {
          setIsWicketEvent(false);
          setSelectedWicketType('');
          setSelectedFielderId(''); 
          const { data: fetchedState } = await api.get(`/admin/scoring/matches/${matchId}/state`);
            if (!fetchedState || !fetchedState.status) {
                throw new Error("Invalid state received from server.");
            }
             // Validate status - scoring page only makes sense for certain statuses
             if (!['Setup', 'Live', 'InningsBreak', 'Completed'].includes(fetchedState.status)) {
                 setError(`Match status is '${fetchedState.status}'. Cannot initiate/resume scoring.`);
                 setMatchState(fetchedState); // Still set state for display purposes
                 setIsLoading(false);
                 return; // Don't proceed further (e.g., joining socket room for scoring)
             }

            setMatchState(fetchedState);
            prevStateRef.current = fetchedState; 
        } catch (err) { console.error("Error undoing ball:", err); const errorMsg = typeof err === 'string' ? err : (err.response?.data?.message || 'Failed to undo last ball.'); setError(errorMsg); } finally { setIsSubmitting(false); } };


    // --- Render Logic ---
    if (isLoading) return <LoadingFallback message="Loading match state..." />;
    if (error && !matchState) return <div><p className="error-message">{error}</p><button onClick={() => navigate('/admin/scoring/setup')}>Back to Setup List</button></div>;
    if (!matchState) return <div>Match data could not be loaded. Ensure the Match ID is correct and the match exists.</div>;

    const currentStatus = matchState.status;
    const isScoringPossible = ['Setup', 'Live', 'InningsBreak'].includes(currentStatus);
    // Corrected: Check if players are selected
    const selectionRequiredNow = isScoringPossible && (!currentBowlerId || !currentBatsmanId);
    // CORRECTED: Fieldset disabled only if submitting or players not selected
    const controlsDisabled = isSubmitting || !currentBowlerId || !currentBatsmanId;
    const showStatusMessageArea = ['InningsBreak', 'Completed', 'Abandoned'].includes(currentStatus); // Show message for these states

    // Styles
    const buttonGroupStyle = { marginBottom: '0.8rem', display: 'flex', flexWrap: 'wrap', gap: '8px', alignItems: 'center' };
    const buttonStyle = { minWidth: '55px', padding: '0.5em 0.8em', fontSize: '0.9rem'};
    const labelStyle = { fontWeight: 'bold', marginRight: '10px', minWidth: '80px', textAlign: 'right'};

console.log("matchState====>",matchState)
    return (
        <div>
            <h2>Live Scoring - Match {matchId}</h2>
            {error && <p className="error-message">{error}</p>}
            <ScoreDisplay state={matchState} />

            {/* Player Selection Area */}
            {isScoringPossible && (
                 <div style={{ display: 'flex', flexWrap: 'wrap', gap: '1rem', margin: '1rem 0', padding: '1rem', border: '1px solid #eee', borderRadius: '5px', backgroundColor: selectionRequiredNow ? '#fffadf' : 'transparent' }}>
                     {/* Bowler Select */}
                     <div><label htmlFor="bowler-select">{currentStatus === 'InningsBreak' ? 'Opening Bowler (Inn 2):*' : (currentStatus === 'Setup' ? 'Select Opening Bowler:*' : 'Current Bowler:*')}</label><br/><select id="bowler-select" value={currentBowlerId} onChange={(e) => setCurrentBowlerId(e.target.value)} disabled={isSubmitting || (currentStatus === 'Live' && matchState.balls !== 0 && currentBowlerId)} style={{borderColor: selectionRequiredNow && !currentBowlerId ? 'orange' : 'initial', minWidth: '150px'}}> <option value="">-- Select --</option> {eligibleBowlers.map(p => <option key={`bowl-${p.player_id}`} value={p.player_id}>{p.name}</option>)} </select>{selectionRequiredNow && !currentBowlerId && <span style={{color: 'orange', marginLeft: '5px', fontWeight:'bold'}}>â˜œ Required!</span>}{currentBowlerId && currentStatus === 'Live' && <span style={{fontSize: '0.8em', marginLeft: '5px'}}>({matchState?.bowlerStats?.find(b=>b.player_id == currentBowlerId)?.completed_overs || 0}/ {matchState?.bowlerStats?.some(b=>b.completed_overs >= 2 && b.player_id != currentBowlerId) ? '1' : '2'} ov)</span>}</div>
                     {/* Batsman Select */}
                     <div><label htmlFor="batsman-select">{currentStatus === 'InningsBreak' ? 'Opening Batsman (Inn 2):*' : (currentStatus === 'Setup' ? 'Select Opening Batsman:*' : 'Batsman on Strike:*')}</label><br/><select id="batsman-select" value={currentBatsmanId} onChange={(e) => setCurrentBatsmanId(e.target.value)} disabled={isSubmitting} style={{borderColor: selectionRequiredNow && !currentBatsmanId ? 'red' : 'initial', minWidth: '150px'}}> <option value="">-- Select --</option> {availableBatsmen.map(p => <option key={`bat-${p.player_id}`} value={p.player_id}>{p.name}</option>)} </select>{selectionRequiredNow && !currentBatsmanId && <span style={{color: 'red', marginLeft: '5px', fontWeight:'bold'}}>â˜œ Required!</span>}</div>
                 </div>
            )}

            {/* Scoring Controls Container (Rendered if scoring is possible: Setup, Live, InningsBreak) */}
            {isScoringPossible ? (
               <div style={{ border: '1px solid #ccc', padding: '1rem', marginTop: '1rem', borderRadius: '5px' }}>
                    <h4>Record Ball Event</h4>
                    {/* Fieldset handles disabling based on CORRECTED controlsDisabled */}
                    <fieldset disabled={controlsDisabled}>
                        <legend style={{fontWeight: 'bold', color: selectionRequiredNow ? 'red': 'inherit'}}>
                            {selectionRequiredNow ? 'Select Players Above!' : 'Choose Event:'}
                        </legend>
                        {/* Buttons are only rendered *inside* the fieldset if players ARE selected */}
                        {!selectionRequiredNow && ( <> {/* Legal Runs / Byes */} <div style={buttonGroupStyle}> <span style={labelStyle}>Runs/Byes:</span> {[0, 1, 2, 4].map(r => (<button type="button" key={`run-${r}`} onClick={() => handleLegalBall(r)} style={buttonStyle}>{r}</button>))} <button type="button" key="bye-1" onClick={() => handleBye(1)} style={buttonStyle}>1b</button> </div> {/* Extras */} <div style={buttonGroupStyle}> <span style={labelStyle}>Extras:</span> <button type="button" onClick={handleWideClick} style={buttonStyle}>WD</button> <button type="button" onClick={() => handleWideByeClick(1)} style={buttonStyle}>WD+1b</button> <button type="button" onClick={() => handleNoBallClick(0)} style={buttonStyle}>NB+0</button> <button type="button" onClick={() => handleNoBallByeClick(1)} style={buttonStyle}>NB+1b</button> {[1, 2, 4].map(r => (<button type="button" key={`nb-${r}`} onClick={() => handleNoBallClick(r)} style={buttonStyle}>NB+{r}</button>))} </div> {/* Wicket Toggle & Details */} <div style={{ margin: '1rem 0' }}> <button type="button" onClick={() => setIsWicketEvent(!isWicketEvent)} style={{backgroundColor: isWicketEvent ? '#d1ecf1' : '#ffc107', marginRight: '1rem', padding: '0.5em 1em'}}>{isWicketEvent ? 'Cancel Wicket' : 'Record Wicket'}</button> {isWicketEvent && ( <div style={{border: '1px dashed gray', padding: '1rem', marginTop: '0.5rem', display: 'inline-block', verticalAlign: 'top'}}> <label htmlFor="wicket-type">Type:* </label> <select id="wicket-type" value={selectedWicketType} onChange={e => {setSelectedWicketType(e.target.value); if(!['Caught', 'Stumped'].includes(e.target.value)) setSelectedFielderId('');}}> <option value="">--Select--</option> <option value="Bowled">Bowled</option><option value="Caught">Caught</option><option value="Stumped">Stumped</option><option value="Hit Outside">Hit Outside</option><option value="Hit Wicket">Hit Wicket</option> </select> {(selectedWicketType === 'Caught' || selectedWicketType === 'Stumped') && ( <div style={{marginTop: '0.5rem'}}> <label htmlFor="fielder-select">Fielder:* </label> <select id="fielder-select" value={selectedFielderId} onChange={e => setSelectedFielderId(e.target.value)}> <option value="">--Select Fielder--</option> {matchState?.playersBowlingTeam?.map(p => <option key={`field-${p.player_id}`} value={p.player_id}>{p.name}</option>)} </select> </div> )} <button type="button" onClick={handleWicketConfirm} disabled={!selectedWicketType || (['Caught','Stumped'].includes(selectedWicketType) && !selectedFielderId)} style={{backgroundColor: '#dc3545', marginTop: '1rem'}}>Confirm Wicket</button> </div> )} </div> </> )}
                    </fieldset>
                    {isSubmitting && <LoadingFallback message="Submitting..." />}
                    {/* Undo Button */}
                    {(currentStatus === 'Live' || currentStatus === 'InningsBreak' || currentStatus === 'Completed') && (
                        <div style={{ marginTop: '1.5rem', paddingTop: '1rem', borderTop: '1px solid #ccc' }}>
                            <button type="button" onClick={handleUndo} disabled={isSubmitting} style={{backgroundColor: '#6c757d'}}>Undo Last Ball</button>
                        </div>
                    )}
                    <RecentBalls summary={matchState?.recentBallsSummary} />
               </div>
            ) : ( // Handle ONLY non-scoreable states like Completed, Abandoned, Scheduled
                <div style={{ marginTop: '1rem', padding: '1rem', backgroundColor: '#e9ecef', borderRadius: '5px' }}>
                    <p><strong>
                        {currentStatus === 'Completed' ? `Match Completed. ${matchState.resultSummary || ''}` :
                         currentStatus === 'Abandoned' ? 'Match Abandoned.' :
                         currentStatus === 'Scheduled' ? 'Match is Scheduled. Go to Setup page.' :
                         `Scoring inactive (Status: ${currentStatus}).`}
                    </strong></p>
                     {currentStatus === 'Completed' && <button onClick={() => navigate(`/matches/${matchId}`)}>View Final Scorecard</button>}
                     {currentStatus !== 'Completed' && <button onClick={() => navigate('/admin/scoring/setup')}>Back to Setup List</button>}
                </div>
            )}
        </div>
    );
}

export default AdminLiveScoringPage;




--- File: mpl-frontend\src\pages\admin\AdminLoginPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminLoginPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import api from '../../services/api';

function AdminLoginPage() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const navigate = useNavigate();
    const location = useLocation();

    // Redirect if already logged in
     useEffect(() => {
        let isLoggedIn = false;
        try {
             const adminInfo = localStorage.getItem('adminInfo');
            if (adminInfo && JSON.parse(adminInfo).token) {
                isLoggedIn = true;
            }
        } catch (e) { console.error("Error checking login status", e); }

        if (isLoggedIn) {
            console.log("Login Page: Already logged in, redirecting...");
            const from = location.state?.from?.pathname || '/admin/dashboard';
             navigate(from, { replace: true });
        }
    }, [navigate, location.state]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setLoading(true);
        try {
            console.log("Attempting login...");
            const { data } = await api.post('/admin/auth/login', { username, password });
            localStorage.setItem('adminInfo', JSON.stringify(data)); // Store user info and token
             console.log("Login successful", data);

             // Dispatch custom event to notify Navbar/other components
             window.dispatchEvent(new CustomEvent('authChange'));

            // Redirect to the intended page or dashboard
             const from = location.state?.from?.pathname || '/admin/dashboard';
             console.log(`Redirecting after login to: ${from}`);
             navigate(from, { replace: true }); // Replace login page in history

        } catch (err) {
            console.error("Login failed:", err);
             // 'err' here might be the error message string from the interceptor
            const errorMessage = typeof err === 'string' ? err : 'Login failed. Please check credentials.';
            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    return (
        <div style={{ maxWidth: '400px', margin: '2rem auto', padding: '2rem', border: '1px solid #ddd', borderRadius: '8px', backgroundColor: '#fff' }}>
            <h2 style={{ textAlign: 'center', marginBottom: '1.5rem' }}>Admin Login</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <label htmlFor="username">Username:</label>
                    <input
                    style={{backgroundColor:'white'}}
                        type="text"
                        id="username"
                        value={username}
                        onChange={(e) => setUsername(e.target.value)}
                        required
                        autoFocus
                    />
                </div>
                <div>
                    <label htmlFor="password">Password:</label>
                    <input
                                        style={{backgroundColor:'white'}}

                        type="password"
                        id="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                </div>
                {error && <p className="error-message" style={{ marginTop: '1rem' }}>{error}</p>}
                <button type="submit" disabled={loading} style={{ width: '100%', marginTop: '1rem', fontSize: '1.1rem' }}>
                    {loading ? 'Logging in...' : 'Login'}
                </button>
            </form>
        </div>
    );
}
export default AdminLoginPage;




--- File: mpl-frontend\src\pages\admin\AdminMatchSetupPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminMatchSetupPage.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

function AdminMatchSetupPage() {
    const [matches, setMatches] = useState([]); // Matches in 'Scheduled' state
    const [selectedMatchId, setSelectedMatchId] = useState('');
    const [selectedMatchDetails, setSelectedMatchDetails] = useState(null); // Holds { team1_id, team1_name, team2_id, team2_name }

    // Form state
    const [tossWinnerTeamId, setTossWinnerTeamId] = useState('');
    const [decision, setDecision] = useState(''); // 'Bat' or 'Bowl'
    const [superOverNumber, setSuperOverNumber] = useState(''); // 1-5

    // UI State
    const [loading, setLoading] = useState(true); // Loading matches list
    const [submitting, setSubmitting] = useState(false); // Submitting setup form
    const [error, setError] = useState('');

    const navigate = useNavigate();

    // Fetch scheduled matches on component mount
    useEffect(() => {
        const fetchScheduledMatches = async () => {
            setLoading(true);
            setError('');
            try {
                const { data } = await api.get('/admin/scoring/setup-list');
                setMatches(data);
                // Reset selection if list reloads? Optional.
                // setSelectedMatchId('');
                // setSelectedMatchDetails(null);
            } catch (err) {
                console.error("Failed to fetch scheduled matches:", err);
                setError(typeof err === 'string' ? err : 'Failed to load matches ready for setup.');
            } finally {
                setLoading(false);
            }
        };
        fetchScheduledMatches();
    }, []); // Run only once on mount

    // Update selected match details when dropdown changes
    useEffect(() => {
        if (selectedMatchId) {
            const match = matches.find(m => m.match_id === parseInt(selectedMatchId));
            setSelectedMatchDetails(match || null);
            // Reset form fields when match changes
            setTossWinnerTeamId('');
            setDecision('');
            setSuperOverNumber('');
            setError(''); // Clear previous errors specific to a match setup
        } else {
            setSelectedMatchDetails(null);
        }
    }, [selectedMatchId, matches]);

    // Form submit handler
    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');

        // --- Validation ---
        if (!selectedMatchId) {
            setError('Please select a match.');
            return;
        }
        if (!tossWinnerTeamId) {
            setError('Please select the toss winner.');
            return;
        }
        if (!decision) {
            setError('Please select the decision (Bat/Bowl).');
            return;
        }
        const superOverNum = parseInt(superOverNumber);
        if (isNaN(superOverNum) || superOverNum < 1 || superOverNum > 5) {
            setError('Please enter a valid Super Over number (1-5).');
            return;
        }
        // --- End Validation ---


        setSubmitting(true);
        try {
            const payload = {
                toss_winner_team_id: parseInt(tossWinnerTeamId),
                decision: decision,
                super_over_number: superOverNum,
            };
            console.log(`Submitting setup for Match ${selectedMatchId}:`, payload);

            // Make API call to submit setup
            const { data } = await api.post(`/admin/scoring/matches/${selectedMatchId}/setup`, payload);

            console.log("Match setup successful:", data);

            // Navigate to live scoring page, passing the initial state received from backend
            navigate(`/admin/scoring/live/${selectedMatchId}`, {
                state: { initialState: data.initialState }
            });

        } catch (err) {
            console.error("Failed to submit match setup:", err);
            // If err is string (from interceptor), use it, else extract message
            const errorMessage = typeof err === 'string' ? err : (err.response?.data?.message || err.message || 'Failed to submit setup. Please try again.');
            setError(errorMessage);
            setSubmitting(false); // Stop submitting indicator on error
        }
        // No finally block for setSubmitting(false) because we navigate away on success
    };


    // --- Render Logic ---
    if (loading) return <LoadingFallback message="Loading available matches..." />;


    return (
        <div>
            <h2>Setup Match Scoring</h2>
            {error && <p className="error-message">{error}</p>}

            {/* Match Selection Dropdown */}
            <div style={{ marginBottom: '1.5rem' }}>
                <label htmlFor="match-select">Select Match to Setup:</label>
                <select
                    id="match-select"
                    value={selectedMatchId}
                    onChange={(e) => setSelectedMatchId(e.target.value)}
                    required
                    disabled={submitting}
                >
                    <option value="">-- Select a Match --</option>
                    {matches.length > 0 ? (
                        matches.map(match => (
                            <option key={match.match_id} value={match.match_id}>
                                {new Date(match.match_datetime).toLocaleDateString()} - {match.team1_name} vs {match.team2_name}
                            </option>
                        ))
                    ) : (
                        <option value="" disabled>No scheduled matches found</option>
                    )}
                </select>
            </div>

            {/* Setup Form (shown only when a match is selected) */}
            {selectedMatchDetails && (
                <form onSubmit={handleSubmit}>
                    <h3>Setup for: {selectedMatchDetails.team1_name} vs {selectedMatchDetails.team2_name}</h3>

                    {/* Toss Winner Selection */}
                    <div>
                        <label htmlFor="toss-winner">Toss Winner:</label>
                        <select
                            id="toss-winner"
                            value={tossWinnerTeamId}
                            onChange={(e) => setTossWinnerTeamId(e.target.value)}
                            required
                            disabled={submitting}
                        >
                            <option value="">-- Select Toss Winner --</option>
                            <option value={selectedMatchDetails.team1_id}>{selectedMatchDetails.team1_name}</option>
                            <option value={selectedMatchDetails.team2_id}>{selectedMatchDetails.team2_name}</option>
                        </select>
                    </div>

                    {/* Decision Selection */}
                    <div>
                        <label htmlFor="decision">Decision:</label>
                        <select
                            id="decision"
                            value={decision}
                            onChange={(e) => setDecision(e.target.value)}
                            required
                            disabled={submitting}
                        >
                            <option value="">-- Select Decision --</option>
                            <option value="Bat">Bat</option>
                            <option value="Bowl">Bowl</option>
                        </select>
                    </div>

                    {/* Super Over Input */}
                    <div>
                        <label htmlFor="super-over">Super Over Number (1-5):</label>
                        <input
                            type="number"
                            id="super-over"
                            min="1"
                            max="5"
                            step="1"
                            value={superOverNumber}
                            onChange={(e) => setSuperOverNumber(e.target.value)}
                            required
                            disabled={submitting}
                            style={{ width: '100px' }}
                        />
                    </div>

                    {/* Submit Button */}
                    <button type="submit" disabled={submitting || !selectedMatchId}>
                        {submitting ? 'Submitting Setup...' : 'Confirm Setup & Proceed to Live Scoring'}
                    </button>
                </form>
            )}
        </div>
    );
}

export default AdminMatchSetupPage;




--- File: mpl-frontend\src\pages\admin\AdminPlayersPage.jsx ---


// src/pages/admin/AdminPlayersPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

// Reusable Form Component for Add/Edit
const PlayerForm = ({ onSubmit, initialData = {}, loading, onCancel }) => {
    const [formData, setFormData] = useState({
        name: '',
        base_price: '',
        role: '',
    });

    useEffect(() => {
        setFormData({
            name: initialData.name || '',
            base_price: initialData.base_price || '100.00', // Default or existing
            role: initialData.role || '', // Default to empty or existing
        });
    }, [initialData]);

    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        const payload = {
            ...formData,
            base_price: formData.base_price ? parseFloat(formData.base_price) : null,
            role: formData.role || null, // Send null if empty
        };
        onSubmit(payload);
    };

    const isEditing = !!initialData.player_id;
    const roles = ['Batsman', 'Bowler', 'AllRounder', 'WicketKeeper'];

    return (
        <form onSubmit={handleSubmit} style={{ marginBottom: '2rem', padding: '1.5rem', border: '1px solid #ccc', borderRadius: '8px', backgroundColor: '#f9f9f9' }}>
            <h3 style={{ marginTop: 0, marginBottom: '1.5rem' }}>{isEditing ? `Edit Player: ${initialData.name}` : 'Add New Player'}</h3>
            <div>
                <label htmlFor="name">Name:*</label>
                <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} required disabled={loading} />
            </div>
            <div>
                <label htmlFor="base_price">Base Price:</label>
                <input type="number" id="base_price" name="base_price" value={formData.base_price} onChange={handleChange} step="0.01" placeholder="e.g., 100.00" disabled={loading} />
            </div>
            <div>
                <label htmlFor="role">Role:</label>
                <select id="role" name="role" value={formData.role} onChange={handleChange} disabled={loading}>
                    <option value="">-- Select Role (Optional) --</option>
                    {roles.map(r => <option key={r} value={r}>{r}</option>)}
                </select>
            </div>
            <div style={{ marginTop: '1.5rem' }}>
                <button type="submit" disabled={loading}>{loading ? 'Saving...' : (isEditing ? 'Update Player' : 'Add Player')}</button>
                {isEditing && <button type="button" onClick={onCancel} style={{ marginLeft: '1rem', backgroundColor: '#6c757d' }} disabled={loading}>Cancel Edit</button>}
            </div>
        </form>
    );
};


// Main Page Component
function AdminPlayersPage() {
    const [players, setPlayers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [formLoading, setFormLoading] = useState(false);
    const [error, setError] = useState('');
    const [editingPlayer, setEditingPlayer] = useState(null);
    const [showAddForm, setShowAddForm] = useState(false);

    const fetchPlayers = useCallback(async () => {
        setLoading(true); setError('');
        try {
            const { data } = await api.get('/players'); // Use public route to get list
            setPlayers(data);
        } catch (err) { setError(typeof err === 'string' ? err : 'Failed to load players.'); }
        finally { setLoading(false); }
    }, []);

    useEffect(() => {
        fetchPlayers();
    }, [fetchPlayers]);

    const handleFormSubmit = async (payload) => {
        setFormLoading(true); setError('');
        try {
            if (editingPlayer) {
                await api.put(`/players/${editingPlayer.player_id}`, payload); // Use protected PUT
            } else {
                await api.post('/players', payload); // Use protected POST
            }
            setEditingPlayer(null); setShowAddForm(false); fetchPlayers(); // Refresh list
        } catch (err) { setError(typeof err === 'string' ? err : `Failed to ${editingPlayer ? 'update' : 'add'} player.`); }
        finally { setFormLoading(false); }
    };

    const handleEditClick = (player) => {
        setShowAddForm(false); // Close add form if open
        setEditingPlayer(player);
    };

    const handleCancelEdit = () => {
        setEditingPlayer(null);
    };

    const handleDeleteClick = async (playerId) => {
        if (!window.confirm(`Are you sure you want to delete player ID ${playerId}? This may affect related records.`)) return;
        setLoading(true); setError(''); // Use main loading indicator
        try {
            await api.delete(`/players/${playerId}`); // Use protected DELETE
            fetchPlayers(); // Refresh
        } catch (err) { setError(typeof err === 'string' ? err : 'Failed to delete player.'); setLoading(false); }
    };

    return (
        <div>
            <h2>Manage Players</h2>
            {error && <p className="error-message">{error}</p>}

            <div style={{ marginBottom: '1rem', textAlign: 'right' }}>
                <button onClick={() => { setShowAddForm(true); setEditingPlayer(null); }} disabled={loading || formLoading}>+ Add New Player</button>
            </div>

            {(showAddForm || editingPlayer) && (
                <PlayerForm
                    onSubmit={handleFormSubmit}
                    initialData={editingPlayer || {}}
                    loading={formLoading}
                    onCancel={handleCancelEdit}
                />
            )}

            <h3>Player List</h3>
            {loading && <LoadingFallback message="Loading players..." />}
            {!loading && players.length === 0 && <p>No players registered yet.</p>}
            {!loading && players.length > 0 && (
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Role</th>
                            <th>Current Team</th> {/* Added */}
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {players.map(player => (
                            <tr key={player.player_id}>
                                <td>{player.player_id}</td>
                                <td>{player.name}</td>
                                <td>{player.role || 'N/A'}</td>
                                <td>{player.current_team_name || 'N/A'}</td> {/* Display team name */}
                                <td>
                                    <button onClick={() => handleEditClick(player)} disabled={loading || formLoading || !!editingPlayer} style={{ padding: '0.3em 0.6em', fontSize: '0.9rem', marginRight: '0.5rem' }}>Edit</button>
                                    <button onClick={() => handleDeleteClick(player.player_id)} disabled={loading || formLoading} style={{ padding: '0.3em 0.6em', fontSize: '0.9rem', backgroundColor: '#dc3545' }}>Delete</button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
}

export default AdminPlayersPage;






--- File: mpl-frontend\src\pages\admin\AdminResolveMatchPage.css ---


/* src/pages/admin/AdminResolveMatchPage.css */
.admin-resolve-match-page h2,
.admin-resolve-match-page h3 {
    text-align: center;
    margin-bottom: 1.5rem;
}

.filter-section,
.admin-resolve-match-page div[style*="marginBottom"] {
    margin-bottom: 1.5rem;
}

.admin-resolve-match-page form {
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}




--- File: mpl-frontend\src\pages\admin\AdminResolveMatchPage.jsx ---


// src/pages/admin/AdminResolveMatchPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

function AdminResolveMatchPage() {
    const [seasons, setSeasons] = useState([]);
    const [selectedSeason, setSelectedSeason] = useState('');
    const [matches, setMatches] = useState([]); // Matches needing resolution
    const [selectedMatch, setSelectedMatch] = useState(null); // Full details of the selected match
    const [loadingSeasons, setLoadingSeasons] = useState(true);
    const [loadingMatches, setLoadingMatches] = useState(false);
    const [submitting, setSubmitting] = useState(false);
    const [error, setError] = useState('');

    // Form state
    const [resolutionStatus, setResolutionStatus] = useState('Completed'); // Completed | Abandoned
    const [winnerTeamId, setWinnerTeamId] = useState(''); // team_id or '' for tie/abandoned
    const [resultSummary, setResultSummary] = useState('');
    const [momPlayerId, setMomPlayerId] = useState(''); // Optional

    // Fetch Seasons
    useEffect(() => {
        const fetchSeasons = async () => {
            setLoadingSeasons(true);
            try {
                const { data } = await api.get('/admin/seasons');
                setSeasons(data);
                if (data.length > 0) setSelectedSeason(data[0].season_id);
            } catch (err) { setError('Failed to load seasons.'); }
            finally { setLoadingSeasons(false); }
        };
        fetchSeasons();
    }, []);

    // Fetch Matches needing resolution when season changes
    const fetchMatchesToResolve = useCallback(async () => {
        if (!selectedSeason) {
            setMatches([]); return;
        }
        setLoadingMatches(true); setError(''); setMatches([]); setSelectedMatch(null); // Reset
        try {
            // Fetch matches that are Tied (winner is NULL but status is Completed) OR Abandoned OR maybe Stuck in Live/Break?
            // Adjust the statuses based on what you want admins to be able to resolve
            const statusesToFetch = ['Completed', 'Abandoned', 'Live', 'InningsBreak', 'Setup']; // Example
            const params = {
                season_id: selectedSeason,
                // Query multiple statuses if your API supports it, otherwise fetch all and filter locally
                // status: statusesToFetch.join(',') // Example if API supports comma-separated statuses
            };
             // Fetch ALL matches for the season and filter locally for now
             const { data } = await api.get('/admin/matches', { params });

             // Filter for matches that might need resolution
             const filteredMatches = data.filter(m =>
                (m.status === 'Completed' && m.winner_team_id === null) || // Tied matches
                 m.status === 'Abandoned' || // Already abandoned
                 m.status === 'Live' || // Stuck Live?
                 m.status === 'InningsBreak' || // Stuck in Break?
                 m.status === 'Setup' // Stuck in Setup?
                // Add any other statuses you want to allow resolution for
             );
             setMatches(filteredMatches);

        } catch (err) { setError(typeof err === 'string' ? err : 'Failed to load matches.'); }
        finally { setLoadingMatches(false); }
    }, [selectedSeason]);

    useEffect(() => {
        fetchMatchesToResolve();
    }, [fetchMatchesToResolve]);

    // Handle match selection
    const handleMatchSelect = (matchId) => {
        const match = matches.find(m => m.match_id === parseInt(matchId));
        setSelectedMatch(match || null);
        // Reset form fields when selecting a new match
        setResolutionStatus('Completed');
        setWinnerTeamId(match?.winner_team_id ?? ''); // Pre-fill if already set
        setResultSummary(match?.result_summary || '');
        setMomPlayerId(match?.man_of_the_match_player_id || '');
        setError('');
    };

    // Handle form submission
    const handleSubmitResolution = async (e) => {
        e.preventDefault();
        if (!selectedMatch) return;
        setError('');
        setSubmitting(true);

        // Basic validation
        if (resolutionStatus === 'Completed' && !resultSummary) {
            setError('Result summary is required for Completed status.');
            setSubmitting(false);
            return;
        }
        if (resolutionStatus === 'Completed' && winnerTeamId === '') {
             if (!window.confirm("You haven't selected a winner. Is this match a Tie?")) {
                 setSubmitting(false);
                 return;
             }
        }


        const payload = {
            status: resolutionStatus,
            winner_team_id: winnerTeamId === '' ? null : parseInt(winnerTeamId),
            result_summary: resultSummary,
            man_of_the_match_player_id: momPlayerId === '' ? null : parseInt(momPlayerId),
        };

        try {
            await api.put(`/admin/matches/${selectedMatch.match_id}/resolve`, payload);
            alert('Match resolved successfully!');
            setSelectedMatch(null); // Clear selection
            fetchMatchesToResolve(); // Refresh the list
        } catch (err) {
            setError(typeof err === 'string' ? err : 'Failed to resolve match.');
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <div className="admin-resolve-match-page">
            <h2>Resolve Match Result</h2>

            {loadingSeasons ? <LoadingFallback /> : (
                <div className="filter-section">
                    <label htmlFor="season-select-resolve">Select Season:</label>
                    <select id="season-select-resolve" value={selectedSeason} onChange={(e) => setSelectedSeason(e.target.value)} disabled={loadingMatches || submitting}>
                        <option value="">-- Select Season --</option>
                        {seasons.map(s => (<option key={s.season_id} value={s.season_id}>{s.name} ({s.year})</option>))}
                    </select>
                </div>
            )}

            {error && <p className="error-message">{error}</p>}

            {loadingMatches && <LoadingFallback message="Loading matches..." />}

            {!loadingMatches && selectedSeason && matches.length === 0 && (
                <p>No matches found needing resolution for this season.</p>
            )}

            {!loadingMatches && matches.length > 0 && (
                <div style={{ marginBottom: '1.5rem' }}>
                    <label htmlFor="match-select-resolve">Select Match to Resolve:</label>
                    <select id="match-select-resolve" value={selectedMatch?.match_id || ''} onChange={(e) => handleMatchSelect(e.target.value)} disabled={submitting}>
                        <option value="">-- Select Match --</option>
                        {matches.map(m => (
                            <option key={m.match_id} value={m.match_id}>
                                ID: {m.match_id} ({m.team1_name} vs {m.team2_name}) - Status: {m.status}
                            </option>
                        ))}
                    </select>
                </div>
            )}

            {selectedMatch && (
                <form onSubmit={handleSubmitResolution}>
                    <h3>Resolving: {selectedMatch.team1_name} vs {selectedMatch.team2_name} (ID: {selectedMatch.match_id})</h3>
                    <p>Current Status: {selectedMatch.status}</p>

                    <div>
                        <label htmlFor="resolutionStatus">Set Final Status:*</label>
                        <select id="resolutionStatus" value={resolutionStatus} onChange={(e) => setResolutionStatus(e.target.value)} required disabled={submitting}>
                            <option value="Completed">Completed</option>
                            <option value="Abandoned">Abandoned</option>
                        </select>
                    </div>

                    {resolutionStatus === 'Completed' && (
                        <div>
                            <label htmlFor="winnerTeamId">Winner:</label>
                            <select id="winnerTeamId" value={winnerTeamId} onChange={(e) => setWinnerTeamId(e.target.value)} disabled={submitting}>
                                <option value="">-- Select Winner (or leave for Tie) --</option>
                                <option value={selectedMatch.team1_id}>{selectedMatch.team1_name}</option>
                                <option value={selectedMatch.team2_id}>{selectedMatch.team2_name}</option>
                            </select>
                        </div>
                    )}

                    <div>
                        <label htmlFor="resultSummary">Result Summary:*</label>
                        <input type="text" id="resultSummary" value={resultSummary} onChange={(e) => setResultSummary(e.target.value)} required={resolutionStatus === 'Completed'} disabled={submitting} placeholder={resolutionStatus === 'Abandoned' ? 'Reason for abandonment (optional)' : 'E.g., Team X won by Y runs/wickets'} />
                    </div>

                    {resolutionStatus === 'Completed' && (
                         <div>
                            <label htmlFor="momPlayerId">Man of the Match (Player ID - Optional):</label>
                            <input type="number" id="momPlayerId" value={momPlayerId} onChange={(e) => setMomPlayerId(e.target.value)} disabled={submitting} placeholder="Enter Player ID"/>
                             {/* TODO: Replace with a searchable player dropdown filtered by teams in match */}
                         </div>
                    )}

                    <button type="submit" disabled={submitting || !selectedMatch}>
                        {submitting ? 'Saving Resolution...' : 'Save Resolution'}
                    </button>
                </form>
            )}
        </div>
    );
}

export default AdminResolveMatchPage;




--- File: mpl-frontend\src\pages\admin\AdminSchedulePage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminSchedulePage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

// --- Match Form Component ---
const MatchForm = ({ onSubmit, initialData = {}, seasons = [], teams = [], loading, onCancel }) => {
    const [formData, setFormData] = useState({
        season_id: '',
        team1_id: '',
        team2_id: '',
        match_datetime: '',
        venue: 'Metalworks Box Arena',
        // status: 'Scheduled' // Status generally not editable here
    });
     const [filteredTeams, setFilteredTeams] = useState([]);

    // Effect to initialize form when initialData or seasons change
    useEffect(() => {
        const initialSeason = initialData.season_id || (seasons.length > 0 ? seasons[0].season_id : '');
        setFormData({
            season_id: initialSeason,
            team1_id: initialData.team1_id || '',
            team2_id: initialData.team2_id || '',
            match_datetime: initialData.match_datetime ? initialData.match_datetime.substring(0, 16) : '', // Format for datetime-local T separation
            venue: initialData.venue || 'Metalworks Box Arena',
            status: initialData.status || 'Scheduled' // Keep track of status for display/logic
        });
    }, [initialData, seasons]);

     // Effect to update available teams when selected season changes
     useEffect(() => {
         if (formData.season_id) {
            const seasonTeams = teams.filter(t => t.season_id === parseInt(formData.season_id));
            setFilteredTeams(seasonTeams);
             // Reset team selections if the currently selected teams are not in the newly selected season
             if (formData.team1_id && !seasonTeams.some(t => t.team_id === parseInt(formData.team1_id))) {
                setFormData(prev => ({ ...prev, team1_id: '' }));
             }
              if (formData.team2_id && !seasonTeams.some(t => t.team_id === parseInt(formData.team2_id))) {
                setFormData(prev => ({ ...prev, team2_id: '' }));
             }
         } else {
             setFilteredTeams([]);
              setFormData(prev => ({ ...prev, team1_id: '', team2_id: '' })); // Clear teams if no season
         }
     }, [formData.season_id, teams]);


    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
         if (!formData.season_id || !formData.team1_id || !formData.team2_id || !formData.match_datetime) {
             alert("Please fill in all required fields (Season, Team 1, Team 2, Date & Time).");
             return;
         }
         if (formData.team1_id === formData.team2_id) {
             alert("Team 1 and Team 2 cannot be the same.");
             return;
         }
         // Format datetime for backend (YYYY-MM-DD HH:MM:SS)
         const payload = {
             ...formData,
             season_id: parseInt(formData.season_id),
             team1_id: parseInt(formData.team1_id),
             team2_id: parseInt(formData.team2_id),
             match_datetime: formData.match_datetime.replace('T', ' ') + ':00'
         };
         // Remove status if we don't want to send it during create/update of schedule
         delete payload.status;

        onSubmit(payload);
    };

    const isEditing = !!initialData.match_id;

    return (
        <form onSubmit={handleSubmit} style={{ marginBottom: '2rem', padding: '1.5rem', border: '1px solid #ccc', borderRadius: '8px', backgroundColor: '#f9f9f9' }}>
            <h3 style={{ marginTop: 0, marginBottom: '1.5rem' }}>{isEditing ? `Edit Match ID: ${initialData.match_id}` : 'Schedule New Match'}</h3>
             <div>
                 <label htmlFor="season_id">Season:*</label>
                 <select id="season_id" name="season_id" value={formData.season_id} onChange={handleChange} required disabled={loading || isEditing}> {/* Disable season change when editing */}
                     <option value="">-- Select Season --</option>
                     {seasons.map(s => <option key={s.season_id} value={s.season_id}>{s.name} ({s.year})</option>)}
                 </select>
             </div>
             <div>
                 <label htmlFor="team1_id">Team 1:*</label>
                 <select id="team1_id" name="team1_id" value={formData.team1_id} onChange={handleChange} required disabled={loading || !formData.season_id || (isEditing && formData.status !== 'Scheduled')}>
                     <option value="">-- Select Team 1 --</option>
                     {filteredTeams.map(t => <option key={'t1-'+t.team_id} value={t.team_id}>{t.name}</option>)}
                 </select>
             </div>
             <div>
                 <label htmlFor="team2_id">Team 2:*</label>
                 <select id="team2_id" name="team2_id" value={formData.team2_id} onChange={handleChange} required disabled={loading || !formData.season_id || (isEditing && formData.status !== 'Scheduled')}>
                     <option value="">-- Select Team 2 --</option>
                      {/* Filter out selected team 1 */}
                     {filteredTeams.filter(t => t.team_id !== parseInt(formData.team1_id)).map(t => <option key={'t2-'+t.team_id} value={t.team_id}>{t.name}</option>)}
                 </select>
             </div>
             <div>
                 <label htmlFor="match_datetime">Date & Time:*</label>
                 <input
                    type="datetime-local"
                    id="match_datetime"
                    name="match_datetime"
                    value={formData.match_datetime}
                    onChange={handleChange}
                    required
                    disabled={loading || (isEditing && formData.status !== 'Scheduled')}
                 />
             </div>
             <div>
                 <label htmlFor="venue">Venue:</label>
                 <input
                    type="text"
                    id="venue"
                    name="venue"
                    value={formData.venue}
                    onChange={handleChange}
                    disabled={loading}
                    placeholder='Defaults to Metalworks Box Arena'
                 />
             </div>
             {/* Optionally allow editing status back to Scheduled or to Abandoned if needed */}
             {/* {isEditing && (
                 <div>
                     <label htmlFor="status">Status:</label>
                     <select name="status" value={formData.status} onChange={handleChange} disabled={loading}>
                         <option value="Scheduled">Scheduled</option>
                         <option value="Abandoned">Abandoned</option>
                     </select>
                 </div>
             )} */}
             <div style={{ marginTop: '1.5rem' }}>
                 <button type="submit" disabled={loading}>{loading ? 'Saving...' : (isEditing ? 'Update Match' : 'Add Match')}</button>
                 {isEditing && <button type="button" onClick={onCancel} style={{ marginLeft: '1rem', backgroundColor: '#6c757d' }} disabled={loading}>Cancel Edit</button>}
             </div>
        </form>
    );
};


// --- Main Page Component ---
function AdminSchedulePage() {
    const [seasons, setSeasons] = useState([]);
    const [allTeams, setAllTeams] = useState([]); // Fetch all teams for form dropdowns
    const [matches, setMatches] = useState([]); // Matches displayed in the list
    const [selectedSeasonFilter, setSelectedSeasonFilter] = useState(''); // Filter list by season
    const [editingMatch, setEditingMatch] = useState(null); // Holds match object if editing
    const [loading, setLoading] = useState(true); // Combined loading state
    const [formLoading, setFormLoading] = useState(false); // Specific loading for form submission
    const [error, setError] = useState('');
    const [showAddForm, setShowAddForm] = useState(false); // Toggle for add form visibility

    const fetchData = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
             // Fetch seasons and all teams in parallel
             const [seasonsRes, teamsRes] = await Promise.all([
                api.get('/admin/seasons'), // Use admin route if different access needed
                api.get('/admin/teams') // Fetch all teams across all seasons for the form
             ]);
            setSeasons(seasonsRes.data || []);
            setAllTeams(teamsRes.data || []);

             // Set default filter to the first season if available
             if (seasonsRes.data?.length > 0 && !selectedSeasonFilter) {
                 setSelectedSeasonFilter(seasonsRes.data[0].season_id);
             } else if (seasonsRes.data?.length > 0 && selectedSeasonFilter) {
                 // If a filter was already set, fetch matches for it
                 fetchMatches(selectedSeasonFilter);
             } else {
                 // No seasons or no filter, load empty matches
                 setMatches([]);
                 setLoading(false); // Stop loading if no season to fetch matches for
             }

        } catch (err) {
            console.error("Failed to load initial data:", err);
            setError(typeof err === 'string' ? err : 'Failed to load necessary data (Seasons/Teams).');
             setLoading(false);
        }
        // Loading is set to false inside fetchMatches or above if no matches fetched
    }, [selectedSeasonFilter]); // Include filter

    const fetchMatches = useCallback(async (seasonId) => {
         if (!seasonId) {
             setMatches([]);
             setLoading(false); // Ensure loading stops if no season is selected
             return;
         };
         // Keep main loading true until matches are fetched
         // setLoading(true); // Already set in fetchData or handled separately
         setError('');
        try {
            const { data } = await api.get(`/admin/matches?season_id=${seasonId}`);
            setMatches(data);
        } catch (err) {
            console.error(`Failed to fetch matches for season ${seasonId}:`, err);
            setError(typeof err === 'string' ? err : 'Failed to load match schedule.');
        } finally {
             setLoading(false); // Final loading state update
        }
    }, []);

    // Initial data fetch on mount
    useEffect(() => {
        fetchData();
    }, [fetchData]); // fetchData is memoized by useCallback

     // Fetch matches when filter changes
     useEffect(() => {
        if (selectedSeasonFilter) {
             setLoading(true); // Show loading when filter changes
             fetchMatches(selectedSeasonFilter);
        } else {
             setMatches([]); // Clear matches if no season selected
             setLoading(false); // Stop loading if no filter selected after initial load
        }
    }, [selectedSeasonFilter, fetchMatches]);

    // --- Handlers ---
    const handleFormSubmit = async (payload) => {
        setFormLoading(true);
        setError('');
        try {
            if (editingMatch) {
                // Update existing match
                await api.put(`/admin/matches/${editingMatch.match_id}`, payload);
            } else {
                // Create new match
                await api.post(`/admin/matches`, payload);
            }
            setEditingMatch(null); // Close form
            setShowAddForm(false); // Close add form if open
            fetchMatches(selectedSeasonFilter || payload.season_id); // Refresh list for current/new season
        } catch (err) {
             setError(typeof err === 'string' ? err : `Failed to ${editingMatch ? 'update' : 'add'} match.`);
        } finally {
             setFormLoading(false);
        }
    };

    const handleEditClick = (match) => {
        setShowAddForm(false); // Hide add form if open
        setEditingMatch(match); // Set the match to edit, form will populate
    };

    const handleCancelEdit = () => {
        setEditingMatch(null); // Clear editing state, hide form
    };

    const handleDeleteClick = async (matchId) => {
        if (!window.confirm(`Are you sure you want to delete Match ID ${matchId}? This action cannot be undone.`)) {
            return;
        }
        setError('');
        setLoading(true); // Use main loading indicator for delete
        try {
            await api.delete(`/api/admin/matches/${matchId}`);
            fetchMatches(selectedSeasonFilter); // Refresh list
        } catch (err) {
             setError(typeof err === 'string' ? err : 'Failed to delete match. It might have already started or been completed.');
             setLoading(false); // Stop loading on error
        }
        // setLoading(false) will be called by fetchMatches on success
    };


    return (
        <div>
            <h2>Manage Match Schedule</h2>

            {error && <p className="error-message">{error}</p>}

            {/* Filter and Add Button */}
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
                 <div>
                     <label htmlFor="season-filter">Filter by Season:</label>
                     <select
                         id="season-filter"
                         value={selectedSeasonFilter}
                         onChange={(e) => { setSelectedSeasonFilter(e.target.value); setEditingMatch(null); setShowAddForm(false); }} // Reset forms on filter change
                         disabled={loading}
                     >
                         <option value="">-- Select a Season --</option>
                         {seasons.map(s => <option key={s.season_id} value={s.season_id}>{s.name} ({s.year})</option>)}
                     </select>
                 </div>
                <button onClick={() => { setShowAddForm(true); setEditingMatch(null); }} disabled={loading || formLoading}>
                    + Add New Match
                </button>
            </div>

            {/* Add/Edit Form Area */}
            {(showAddForm || editingMatch) && (
                <MatchForm
                     onSubmit={handleFormSubmit}
                     initialData={editingMatch || {}} // Pass empty object if adding
                     seasons={seasons}
                     teams={allTeams} // Pass all teams
                     loading={formLoading}
                     onCancel={handleCancelEdit}
                 />
            )}

             {/* Matches List */}
            <h3>Match List {selectedSeasonFilter ? `(${seasons.find(s=>s.season_id==selectedSeasonFilter)?.name})` : ''}</h3>
            {loading && <LoadingFallback message="Loading matches..." />}
             {!loading && matches.length === 0 && selectedSeasonFilter && <p>No matches scheduled for this season yet.</p>}
             {!loading && !selectedSeasonFilter && <p>Please select a season to view the schedule.</p>}

            {!loading && matches.length > 0 && (
                <table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Date & Time</th>
                            <th>Team 1</th>
                            <th>Team 2</th>
                            <th>Venue</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {matches.map(match => (
                            <tr key={match.match_id}>
                                <td>{match.match_id}</td>
                                <td>{new Date(match.match_datetime).toLocaleString()}</td>
                                <td>{match.team1_name}</td>
                                <td>{match.team2_name}</td>
                                <td>{match.venue}</td>
                                <td>{match.status}</td>
                                <td>
                                    <button
                                        onClick={() => handleEditClick(match)}
                                        disabled={formLoading || !!editingMatch} // Disable if already editing another
                                        style={{ padding: '0.3em 0.6em', fontSize: '0.9rem', marginRight: '0.5rem' }}
                                    >
                                        Edit
                                    </button>
                                     {/* Allow deleting only scheduled matches */}
                                     {match.status === 'Scheduled' && (
                                        <button
                                            onClick={() => handleDeleteClick(match.match_id)}
                                            disabled={loading || formLoading}
                                            style={{ padding: '0.3em 0.6em', fontSize: '0.9rem', backgroundColor: '#dc3545' }}
                                        >
                                            Delete
                                        </button>
                                     )}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}
        </div>
    );
}

export default AdminSchedulePage;




--- File: mpl-frontend\src\pages\admin\AdminSeasonsPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminSeasonsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

function AdminSeasonsPage() {
    const [seasons, setSeasons] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [isEditing, setIsEditing] = useState(null); // Holds season_id if editing, else null
    const [formData, setFormData] = useState({ year: '', name: '', start_date: '', end_date: '', status: 'Planned' });

    const fetchSeasons = useCallback(async () => {
        setLoading(true);
        setError('');
        try {
            const { data } = await api.get('/admin/seasons');
            setSeasons(data);
        } catch (err) {
            console.error("Failed to fetch seasons:", err);
            setError(typeof err === 'string' ? err : 'Failed to load seasons.');
        } finally {
            setLoading(false);
        }
    }, []);

    useEffect(() => {
        fetchSeasons();
    }, [fetchSeasons]);

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const resetForm = () => {
        setIsEditing(null);
        setFormData({ year: '', name: '', start_date: '', end_date: '', status: 'Planned' });
    };

    const handleEditClick = (season) => {
        setIsEditing(season.season_id);
        setFormData({
            year: season.year, // Year usually not editable once set
            name: season.name,
            start_date: season.start_date ? season.start_date.split('T')[0] : '', // Format for date input
            end_date: season.end_date ? season.end_date.split('T')[0] : '',     // Format for date input
            status: season.status,
        });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError('');
        setLoading(true); // Indicate activity

        const payload = { ...formData };
        // Ensure dates are null if empty, backend handles this but good practice
        if (!payload.start_date) delete payload.start_date;
        if (!payload.end_date) delete payload.end_date;
        if (!isEditing) { // Don't send year if editing
             if (!payload.year || isNaN(parseInt(payload.year))) {
                 setError('Valid Year is required for new season.');
                 setLoading(false);
                 return;
             }
        } else {
            delete payload.year; // Don't allow changing year
        }


        try {
            if (isEditing) {
                // Update existing season
                await api.put(`/admin/seasons/${isEditing}`, payload);
                console.log("Season updated successfully");
            } else {
                // Create new season
                await api.post('/admin/seasons', payload);
                console.log("Season created successfully");
            }
            resetForm();
            fetchSeasons(); // Refresh the list
        } catch (err) {
             console.error(`Failed to ${isEditing ? 'update' : 'create'} season:`, err);
             setError(typeof err === 'string' ? err : `Failed to ${isEditing ? 'update' : 'create'} season.`);
        } finally {
             setLoading(false); // Ensure loading is turned off even on error
        }
    };

    // TODO: Implement handleDelete

    return (
        <div>
            <h2>Manage Seasons</h2>

            {/* Add/Edit Form */}
            <form onSubmit={handleSubmit} style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #ccc', borderRadius: '5px' }}>
                <h3>{isEditing ? 'Edit Season' : 'Add New Season'}</h3>
                 {error && <p className="error-message">{error}</p>}
                <div>
                    <label htmlFor="year">Year:</label>
                    <input
                        type="number"
                        id="year"
                        name="year"
                        value={formData.year}
                        onChange={handleInputChange}
                        required={!isEditing} // Required only when adding
                        disabled={!!isEditing} // Disable editing year
                        placeholder="e.g., 2024"
                    />
                </div>
                 <div>
                    <label htmlFor="name">Season Name:</label>
                    <input
                        type="text"
                        id="name"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        required
                        placeholder="e.g., MPL Summer 2024"
                    />
                </div>
                 <div>
                    <label htmlFor="start_date">Start Date:</label>
                    <input
                        type="date"
                        id="start_date"
                        name="start_date"
                        value={formData.start_date}
                        onChange={handleInputChange}
                    />
                </div>
                 <div>
                    <label htmlFor="end_date">End Date:</label>
                    <input
                        type="date"
                        id="end_date"
                        name="end_date"
                        value={formData.end_date}
                        onChange={handleInputChange}
                    />
                </div>
                 <div>
                    <label htmlFor="status">Status:</label>
                    <select id="status" name="status" value={formData.status} onChange={handleInputChange}>
                        <option value="Planned">Planned</option>
                        <option value="RegistrationOpen">Registration Open</option>
                        <option value="Auction">Auction</option>
                        <option value="Ongoing">Ongoing</option>
                        <option value="Completed">Completed</option>
                    </select>
                </div>
                 <button type="submit" disabled={loading}>{loading ? 'Saving...' : (isEditing ? 'Update Season' : 'Add Season')}</button>
                 {isEditing && <button type="button" onClick={resetForm} style={{ marginLeft: '1rem', backgroundColor: '#6c757d' }}>Cancel Edit</button>}
            </form>


            {/* Seasons List */}
            <h3>Existing Seasons</h3>
             {loading && seasons.length === 0 && <LoadingFallback message="Loading seasons..." />} {/* Show loading only if list is empty */}

            {seasons.length > 0 ? (
                <table>
                    <thead>
                        <tr>
                            <th>Year</th>
                            <th>Name</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {seasons.map(season => (
                            <tr key={season.season_id}>
                                <td>{season.year}</td>
                                <td>{season.name}</td>
                                <td>{season.start_date ? new Date(season.start_date).toLocaleDateString() : 'N/A'}</td>
                                <td>{season.end_date ? new Date(season.end_date).toLocaleDateString() : 'N/A'}</td>
                                <td>{season.status}</td>
                                <td>
                                    <button onClick={() => handleEditClick(season)} disabled={loading || isEditing === season.season_id} style={{padding: '0.3em 0.6em', fontSize: '0.9rem'}}>Edit</button>
                                    {/* TODO: Add Delete Button */}
                                     {/* <button onClick={() => handleDelete(season.season_id)} disabled={loading} style={{backgroundColor: '#dc3545', marginLeft: '0.5rem'}}>Delete</button> */}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            ) : (
                 !loading && <p>No seasons found.</p>
            )}
        </div>
    );
}

export default AdminSeasonsPage;




--- File: mpl-frontend\src\pages\admin\AdminTeamsPage.jsx ---


// mpl-project/mpl-frontend/src/pages/admin/AdminTeamsPage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { Link } from 'react-router-dom'; // If linking to team details page
import api from '../../services/api';
import LoadingFallback from '../../components/LoadingFallback';

// --- Reusable Components (Consider moving to components folder) ---
const TeamForm = ({ onSubmit, initialData = {}, seasons = [], loading }) => {
    const [formData, setFormData] = useState({
        name: initialData.name || '',
        season_id: initialData.season_id || (seasons.length > 0 ? seasons[0].season_id : ''), // Default to first season?
        budget: initialData.budget || '10000.00', // Default budget?
        captain_player_id: initialData.captain_player_id || '', // Keep as string, handle null on submit
    });

     // Update form if initialData changes (when editing)
     useEffect(() => {
        setFormData({
            name: initialData.name || '',
            season_id: initialData.season_id || (seasons.length > 0 ? seasons[0].season_id : ''),
            budget: initialData.budget || '10000.00',
            captain_player_id: initialData.captain_player_id || '',
        });
    }, [initialData, seasons]);


    const handleChange = (e) => {
        setFormData({ ...formData, [e.target.name]: e.target.value });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        const payload = {
            ...formData,
            captain_player_id: formData.captain_player_id ? parseInt(formData.captain_player_id) : null, // Ensure number or null
            season_id: parseInt(formData.season_id),
            budget: parseFloat(formData.budget)
        };
        onSubmit(payload);
    };

    return (
        <form onSubmit={handleSubmit}>
            {!initialData.team_id && ( // Only show Season select when adding
                <div>
                    <label htmlFor="season_id">Season:</label>
                    <select id="season_id" name="season_id" value={formData.season_id} onChange={handleChange} required disabled={loading || !!initialData.team_id}>
                        <option value="" disabled>Select Season</option>
                        {seasons.map(s => <option key={s.season_id} value={s.season_id}>{s.name} ({s.year})</option>)}
                    </select>
                </div>
            )}
            <div>
                <label htmlFor="name">Team Name:</label>
                <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} required disabled={loading} />
            </div>
            <div>
                <label htmlFor="budget">Budget:</label>
                <input type="number" id="budget" name="budget" value={formData.budget} onChange={handleChange} step="0.01" disabled={loading} />
            </div>
            <div>
                <label htmlFor="captain_player_id">Captain Player ID (Optional):</label>
                <input type="number" id="captain_player_id" name="captain_player_id" value={formData.captain_player_id} onChange={handleChange} disabled={loading} />
                {/* TODO: Replace with Player Search/Select dropdown for better UX */}
            </div>
            <button type="submit" disabled={loading}>{loading ? 'Saving...' : (initialData.team_id ? 'Update Team' : 'Add Team')}</button>
        </form>
    );
};

const PlayerAssignment = ({ teamId, seasonId, teamPlayers = [], availablePlayers = [], onAssign, onRemove, loading }) => {
     const [selectedPlayerId, setSelectedPlayerId] = useState('');
     const [purchasePrice, setPurchasePrice] = useState('');

     const handleAssign = (e) => {
         e.preventDefault();
         if (!selectedPlayerId) return;
         onAssign({
             team_id: teamId,
             player_id: parseInt(selectedPlayerId),
             season_id: seasonId,
             purchase_price: purchasePrice ? parseFloat(purchasePrice) : null,
             // is_captain: false // Captain is set via Team edit
         });
         setSelectedPlayerId(''); // Reset form
         setPurchasePrice('');
     };

    return (
        <div style={{ marginTop: '1.5rem', borderTop: '1px solid #eee', paddingTop: '1rem' }}>
             <h4>Manage Players for this Team ({teamPlayers.length} assigned)</h4>
             {/* List Assigned Players */}
            {teamPlayers.length > 0 ? (
                 <ul>
                    {teamPlayers.map(p => (
                        <li key={p.team_player_id} style={{ marginBottom: '0.5rem', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                            <span>
                                <Link to={`/players/${p.player_id}`}>{p.name}</Link>
                                {p.is_captain && ' (C)'}
                                {p.purchase_price && ` - $${p.purchase_price}`}
                            </span>
                             <button
                                onClick={() => onRemove(p.team_player_id)}
                                disabled={loading}
                                style={{ backgroundColor: '#dc3545', padding: '0.2em 0.5em', fontSize: '0.8rem' }}
                            >
                                Remove
                            </button>
                        </li>
                    ))}
                 </ul>
            ) : <p>No players assigned to this team for this season yet.</p>}

            {/* Assign Player Form */}
             <form onSubmit={handleAssign} style={{ marginTop: '1rem' }}>
                <select value={selectedPlayerId} onChange={(e) => setSelectedPlayerId(e.target.value)} required disabled={loading || availablePlayers.length === 0}>
                    <option value="">Select Player to Add</option>
                     {/* Only show players NOT already in ANY team for this season */}
                     {availablePlayers.map(p => <option key={p.player_id} value={p.player_id}>{p.name} ({p.player_id})</option>)}
                 </select>
                 <input
                     type="number"
                     placeholder="Purchase Price (Optional)"
                     value={purchasePrice}
                     onChange={(e) => setPurchasePrice(e.target.value)}
                     step="0.01"
                     style={{marginLeft: '0.5rem', width: '150px'}}
                     disabled={loading}
                 />
                 <button type="submit" disabled={loading || !selectedPlayerId} style={{marginLeft: '0.5rem'}}>Assign Player</button>
            </form>

        </div>
    );
};


// --- Main Page Component ---
function AdminTeamsPage() {
    const [seasons, setSeasons] = useState([]);
    const [selectedSeasonId, setSelectedSeasonId] = useState('');
    const [teams, setTeams] = useState([]);
    const [allPlayers, setAllPlayers] = useState([]); // All registered players
    const [assignedPlayerIds, setAssignedPlayerIds] = useState(new Set()); // Set of player IDs already in a team for the selected season
    const [loadingSeasons, setLoadingSeasons] = useState(true);
    const [loadingTeams, setLoadingTeams] = useState(false);
    const [loadingPlayers, setLoadingPlayers] = useState(false);
    const [error, setError] = useState('');

    const [editingTeam, setEditingTeam] = useState(null); // Holds team object if editing

    // Fetch seasons on mount
    useEffect(() => {
        const fetchSeasons = async () => {
            setLoadingSeasons(true);
            try {
                const { data } = await api.get('/admin/seasons?status=Ongoing'); // Fetch seasons (maybe filter active/planned?)
                setSeasons(data);
                if (data.length > 0) {
                    // Automatically select the first season in the list initially
                    setSelectedSeasonId(data[0].season_id);
                }
            } catch (err) {
                setError(typeof err === 'string' ? err : 'Failed to load seasons.');
            } finally {
                setLoadingSeasons(false);
            }
        };
        fetchSeasons();
    }, []);

    // Fetch all players (needed for assignment dropdown)
     useEffect(() => {
        const fetchAllPlayers = async () => {
            setLoadingPlayers(true);
            try {
                const { data } = await api.get('/players'); // Fetch all players
                setAllPlayers(data);
            } catch (err) {
                setError(typeof err === 'string' ? err : 'Failed to load player list.');
            } finally {
                setLoadingPlayers(false);
            }
        };
        fetchAllPlayers();
    }, []);


    // Fetch teams and player assignments when selectedSeasonId changes
    const fetchTeamsAndAssignments = useCallback(async () => {
        if (!selectedSeasonId) {
            setTeams([]);
            setAssignedPlayerIds(new Set());
            return;
        }
        setLoadingTeams(true);
        setError('');
        setEditingTeam(null); // Clear editing state when season changes
        try {
            // Fetch teams for the selected season
            const { data: teamsData } = await api.get(`/admin/teams?season_id=${selectedSeasonId}`);
            setTeams(teamsData);

            // Fetch ALL player assignments for this season to know who is available
            let allAssignmentsForSeason = [];
            // Need an endpoint for this, or iterate through teamsData if it includes players?
            // Assuming an endpoint /api/admin/seasons/:seasonId/assignments exists (adjust as needed)
            // const { data: assignmentData } = await api.get(`/admin/seasons/${selectedSeasonId}/assignments`);
            // For now, let's derive from the teamsData if possible, or make multiple calls (less efficient)
            const playerIdsInTeams = new Set();
            for (const team of teamsData) {
                try {
                     // Use the existing getTeamDetails endpoint (or modify getTeamsForSeason to include players)
                     const { data: teamDetails } = await api.get(`/admin/teams/${team.team_id}?season_id=${selectedSeasonId}`);
                     teamDetails.players.forEach(p => playerIdsInTeams.add(p.player_id));
                     // Find the team in state and update its players list (important for PlayerAssignment component)
                     setTeams(currentTeams => currentTeams.map(t => t.team_id === team.team_id ? { ...t, players: teamDetails.players } : t));

                } catch (detailErr) {
                    console.error(`Failed to get player details for team ${team.team_id}`, detailErr);
                    // Continue fetching other teams
                }
            }
            setAssignedPlayerIds(playerIdsInTeams);


        } catch (err) {
            console.error("Failed to fetch teams or assignments:", err);
            setError(typeof err === 'string' ? err : 'Failed to load teams for the selected season.');
            setTeams([]);
             setAssignedPlayerIds(new Set());
        } finally {
            setLoadingTeams(false);
        }
    }, [selectedSeasonId]);

    useEffect(() => {
        fetchTeamsAndAssignments();
    }, [fetchTeamsAndAssignments]);


    // --- Handler Functions ---
    const handleTeamSubmit = async (payload) => {
        setLoadingTeams(true); // Use main loading flag?
        setError('');
        try {
            if (editingTeam) {
                // Update existing team
                await api.put(`/admin/teams/${editingTeam.team_id}`, payload);
            } else {
                // Create new team
                await api.post(`/admin/teams`, payload);
            }
            setEditingTeam(null); // Reset editing state
            fetchTeamsAndAssignments(); // Refresh list
        } catch (err) {
             setError(typeof err === 'string' ? err : `Failed to ${editingTeam ? 'update' : 'add'} team.`);
        } finally {
            setLoadingTeams(false);
        }
    };

    const handleAssignPlayer = async (assignmentData) => {
         setLoadingTeams(true); // Indicate loading
         setError('');
        try {
            await api.post('/admin/teams/players', assignmentData);
            fetchTeamsAndAssignments(); // Refresh assignments and team player lists
        } catch (err) {
             setError(typeof err === 'string' ? err : 'Failed to assign player.');
        } finally {
             setLoadingTeams(false);
        }
    };

    const handleRemovePlayer = async (teamPlayerId) => {
         if (!window.confirm("Are you sure you want to remove this player from the team?")) return;
         setLoadingTeams(true);
         setError('');
        try {
            await api.delete(`/admin/teams/players/${teamPlayerId}`);
            fetchTeamsAndAssignments(); // Refresh assignments and team player lists
        } catch (err) {
            setError(typeof err === 'string' ? err : 'Failed to remove player.');
        } finally {
             setLoadingTeams(false);
        }
    };


    // --- Calculate Available Players ---
    const availablePlayersForAssignment = allPlayers.filter(
        p => !assignedPlayerIds.has(p.player_id)
    );


    // --- Render ---
    if (loadingSeasons) return <LoadingFallback message="Loading seasons..." />;

    return (
        <div>
            <h2>Manage Teams & Player Assignments</h2>

            {/* Season Selector */}
            <div style={{ marginBottom: '1rem' }}>
                <label htmlFor="season-select-teams">Select Season:</label>
                <select
                    id="season-select-teams"
                    value={selectedSeasonId}
                    onChange={(e) => setSelectedSeasonId(e.target.value)}
                    disabled={loadingTeams}
                >
                    <option value="">-- Select a Season --</option>
                    {seasons.map(s => <option key={s.season_id} value={s.season_id}>{s.name} ({s.year})</option>)}
                </select>
            </div>

             {error && <p className="error-message">{error}</p>}

             {/* Add/Edit Team Form */}
             {selectedSeasonId && (
                 <div style={{ marginBottom: '2rem', padding: '1rem', border: '1px solid #eee', borderRadius: '5px' }}>
                     <h3>{editingTeam ? `Editing Team: ${editingTeam.name}` : 'Add New Team'}</h3>
                     <TeamForm
                         onSubmit={handleTeamSubmit}
                         initialData={editingTeam ? { ...editingTeam, season_id: selectedSeasonId } : { season_id: selectedSeasonId } } // Pass season_id
                         seasons={seasons} // Pass seasons for the dropdown (only used if adding)
                         loading={loadingTeams}
                     />
                     {editingTeam && <button onClick={() => setEditingTeam(null)} style={{marginTop: '0.5rem', backgroundColor: '#6c757d'}}>Cancel Edit</button>}
                 </div>
             )}


            {/* Teams List for Selected Season */}
            {selectedSeasonId && loadingTeams && <LoadingFallback message="Loading teams..." />}
            {selectedSeasonId && !loadingTeams && teams.length === 0 && <p>No teams found for this season. Add one above.</p>}

            {selectedSeasonId && !loadingTeams && teams.length > 0 && (
                <div>
                    <h3>Teams in Selected Season</h3>
                    {teams.map(team => (
                        <div key={team.team_id} style={{ border: '1px solid #ccc', padding: '1rem', marginBottom: '1rem', borderRadius: '5px' }}>
                            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                                <div>
                                    <h4>{team.name}</h4>
                                    <p>Captain: {team.captain_name || 'None'} (ID: {team.captain_player_id || 'N/A'})</p>
                                    <p>Budget: ${team.budget ? parseFloat(team.budget).toFixed(2) : 'N/A'}</p>
                                </div>
                                <div>
                                     <button onClick={() => setEditingTeam(team)} disabled={loadingTeams || !!editingTeam}>Edit Team</button>
                                     {/* TODO: Add delete team button */}
                                </div>
                            </div>

                            {/* Player Assignment Section */}
                             <PlayerAssignment
                                teamId={team.team_id}
                                seasonId={parseInt(selectedSeasonId)}
                                teamPlayers={team.players || []} // Ensure players array exists
                                availablePlayers={availablePlayersForAssignment}
                                onAssign={handleAssignPlayer}
                                onRemove={handleRemovePlayer}
                                loading={loadingTeams || loadingPlayers}
                             />
                         </div>
                    ))}
                </div>
            )}

        </div>
    );
}

export default AdminTeamsPage;




--- File: mpl-frontend\src\services\api.js ---


// mpl-project/mpl-frontend/src/services/api.js
import axios from 'axios';

// Determine the base URL for the API from environment variables or use a default
const API_URL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';
console.log(`API Service configured for URL: ${API_URL}`);

// Create an Axios instance with default configuration
const api = axios.create({
    baseURL: API_URL, // Base URL for all requests made with this instance
    headers: {
        'Content-Type': 'application/json', // Default content type for POST/PUT requests
    },
    timeout: 10000, // Optional: Set a timeout for requests (e.g., 10 seconds)
});

// --- Request Interceptor ---
// This function runs before each request is sent
api.interceptors.request.use(
    (config) => {
        // Attempt to retrieve admin authentication info (token) from local storage
        try {
            const adminInfoString = localStorage.getItem('adminInfo');
            if (adminInfoString) {
                const adminInfo = JSON.parse(adminInfoString);
                // If token exists, add it to the Authorization header using the Bearer scheme
                if (adminInfo && adminInfo.token) {
                    config.headers.Authorization = `Bearer ${adminInfo.token}`;
                     // console.log('Interceptor: Attaching token to request headers.');
                }
            }
        } catch (error) {
            // Handle potential errors parsing JSON from local storage
            console.error("Interceptor: Error reading/parsing adminInfo from localStorage:", error);
            // Optionally clear invalid item: localStorage.removeItem('adminInfo');
        }
        // Must return the config object for the request to proceed
        return config;
    },
    (error) => {
        // Handle errors that occur during request setup
        console.error("Interceptor: Request Error:", error);
        // Reject the promise to propagate the error
        return Promise.reject(error);
    }
);

// --- Response Interceptor ---
// This function runs when a response is received
api.interceptors.response.use(
  (response) => {
      // Any status code within the range of 2xx causes this function to trigger
      // Simply return the successful response
      return response;
  },
  (error) => {
    // Any status codes outside the range of 2xx cause this function to trigger
    console.error('API Response Error Interceptor Caught:', error);

    // Check if the error has a response object (meaning the server responded with an error status)
    if (error.response) {
      console.error('Error Data:', error.response.data);
      console.error('Error Status:', error.response.status);
      // console.error('Error Headers:', error.response.headers);

      // Handle specific error statuses globally
      if (error.response.status === 401) {
        // --- Unauthorized Access ---
        console.warn('Unauthorized (401) detected by interceptor.');
        // Remove potentially invalid authentication info from storage
        localStorage.removeItem('adminInfo');
        // Redirect to login page to force re-authentication
        // Prevent redirect loop if already on login page
        if (!window.location.pathname.includes('/admin/login')) {
            // Preserve the page the user was trying to access for redirection after login
            const intendedPath = window.location.pathname + window.location.search;
            console.log(`Redirecting to login, intended path: ${intendedPath}`);
            // Use window.location.href for a full page reload, clearing state
            window.location.href = `/admin/login?redirect=${encodeURIComponent(intendedPath)}`;
            // Or use react-router's navigate function if available globally (more complex setup)
        }
        // Return a specific rejected promise to prevent further processing in the original caller
        return Promise.reject({ status: 401, message: 'Unauthorized. Please login again.' });

      } else if (error.response.status === 403) {
        // --- Forbidden Access ---
        console.warn('Forbidden (403) detected by interceptor.');
        // User is authenticated but lacks permission for the specific resource
        // Maybe show a notification or redirect to a "permission denied" page
        // Return a specific rejected promise
         return Promise.reject({ status: 403, message: error.response.data?.message || 'Permission Denied.' });
      }

      // For other server errors (4xx, 5xx), extract the message from the response data if possible
      const message = error.response.data?.message || error.message || 'An error occurred processing your request.';
      return Promise.reject({ status: error.response.status, message });


    } else if (error.request) {
      // --- Network Error ---
      // The request was made but no response was received (e.g., server down, network issue)
      console.error('API Network Error:', error.request);
       return Promise.reject({ status: null, message: 'Network Error: Could not connect to the server. Please check your connection.' });

    } else {
      // --- Request Setup Error ---
      // Something happened in setting up the request that triggered an error
      console.error('API Request Setup Error:', error.message);
      return Promise.reject({ status: null, message: error.message || 'An unexpected error occurred while setting up the request.' });
    }

    // Fallback rejection (should ideally be handled above)
    // return Promise.reject(error);
  }
);


export default api; // Export the configured Axios instance



